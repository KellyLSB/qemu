qemu (2.7.0-rc3) UNRELEASED; urgency=medium

  * [4fd811a] ui: gtk: fix crash when terminal inner-border is NULL.
    VTE terminal inner-border can be NULL. The vte-0.36 (API 2.90)
    code checks for the condition too so I assume it's not just a bug
    Fixes a crash on Fedora 24 with gtk 3.20
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 2b2e85d403e8760ea53afd735a170500d5c17716.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [56f289f] ui: sdl2: Release grab before opening console window
    sdl 2.0.4 currently has a bug which causes our UI shortcuts to fire
    rapidly in succession:
      https://bugzilla.libsdl.org/show_bug.cgi?id=3287
    It's a toss up whether ctrl+alt+f or ctrl+alt+2 will fire an
    odd or even number of times, thus determining whether the action
    succeeds or fails.
    Opening monitor/serial windows is doubly broken, since it will often
    lock the UI trying to grab the pointer:
      0x00007fffef3720a5 in SDL_Delay_REAL () at /lib64/libSDL2-2.0.so.0
      0x00007fffef3688ba in X11_SetWindowGrab () at /lib64/libSDL2-2.0.so.0
      0x00007fffef2f2da7 in SDL_SendWindowEvent () at /lib64/libSDL2-2.0.so.0
      0x00007fffef2f080b in SDL_SetKeyboardFocus () at /lib64/libSDL2-2.0.so.0
      0x00007fffef35d784 in X11_DispatchFocusIn.isra.8 () at /lib64/libSDL2-2.0.so.0
      0x00007fffef35dbce in X11_DispatchEvent () at /lib64/libSDL2-2.0.so.0
      0x00007fffef35ee4a in X11_PumpEvents () at /lib64/libSDL2-2.0.so.0
      0x00007fffef2eea6a in SDL_PumpEvents_REAL () at /lib64/libSDL2-2.0.so.0
      0x00007fffef2eeab5 in SDL_WaitEventTimeout_REAL () at /lib64/libSDL2-2.0.so.0
      0x000055555597eed0 in sdl2_poll_events (scon=0x55555876f928) at ui/sdl2.c:593
    We can work around that hang by ungrabbing the pointer before launching
    a new window. This roughly matches what our sdl1 code does
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 31c9ab6540b031f7a614c59edcecea9877685612.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [ee8466d] configure: build SDL if only SDL2 available.
    Right now if SDL2 is installed but not SDL1, default configure will
    entirely disable SDL. Check upfront for SDL2 using pkg-config, but
    still prefer SDL1 if both versions are installed.
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: c9e570b5964d128a3595efe3170129a3da459776.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [e07047c] configure: error on unknown --with-sdlabi value.
    I accidentally tried --with-sdlabi="1.0", and it failed much later in
    a weird way. Instead, throw an error if the value isn't in our
    whitelist.
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 60e4822e17697d257a914df03bdb9fff4b4c0490.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [02d34f6] configure: add echo_version helper.
    Simplifies printing library versions, dependent on if the library
    was even found
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 3c9ab16123e06bb4109771ef6ee8acd82d449ba0.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [f2a4e54] configure: report GTK version.
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 4c464e20d69fdcf21927ceed31a8d749b4af0c49.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [d6a6dba] configure: report SDL version.
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 98e4a3b98dc824bfaff96db43b172272c780c15f.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [c6feff9] configure: support vte-2.91
    vte >= 0.37 expores API version 2.91, which is where all the active
    development is. qemu builds and runs fine with that version, so use it
    if it's available.
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: b4f0375647f7b368d3dbd3834aee58cb0253566a.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [84e2dc4] ui: gtk: Fix a runtime warning on vte >= 0.37
    inner-border was dropped in vte API 2.91, in favor of the standard
    padding style
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 60a6cdc337d611d902f53907e66a8f37ea374d65.1462557436.git.crobinso@redhat.com
    [ kraxel: Fix warning with old vte version. ]
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Cole Robinson ]
  * [bb732ee] ui: gtk: Fix some deprecation warnings.
    All device manager APIs are deprecated now. Much of our usage is
    just to get the current pointer, so centralize that logic and use
    the new seat APIs
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: d6dec24220a4e1449a0172119c10c48e145c0f6f.1462557436.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Roman Kagan ]
  * [491d68d] usb:xhci: no DMA on HC reset.
    This patch is a rough fix to a memory corruption we are observing when
    running VMs with xhci USB controller and OVMF firmware.
    Specifically, on the following call chain
    xhci_reset
      xhci_disable_slot
        xhci_disable_ep
          xhci_set_ep_state
    QEMU overwrites guest memory using stale guest addresses.
    This doesn't happen when the guest (firmware) driver sets up xhci for
    the first time as there are no slots configured yet.  However when the
    firmware hands over the control to the OS some slots and endpoints are
    already set up with their context in the guest RAM.  Now the OS' driver
    resets the controller again and xhci_set_ep_state then reads and writes
    that memory which is now owned by the OS.
    As a quick fix, skip calling xhci_set_ep_state in xhci_disable_ep if the
    device context base address array pointer is zero (indicating we're in
    the HC reset and no DMA is possible).
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Roman Kagan <rkagan@virtuozzo.com>
    Message-id: 1462384435-1034-1-git-send-email-rkagan@virtuozzo.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Isaac Lozano ]
  * [1f66fe5] usb-mtp: fix usb_mtp_get_device_info so that libmtp on the guest doesn't complain.
    If an application uses libmtp on the guest system,
    it will complain with the warning message:
    LIBMTP WARNING: VendorExtensionID: ffffffff
    LIBMTP WARNING: VendorExtensionDesc: (null)
    LIBMTP WARNING: this typically means the device is PTP (i.e. a camera) but
    not a MTP device at all. Trying to continue anyway.
    This is because libmtp expects a MTP Vendor Extension ID of 0x00000006 and a
    MTP Version of 0x0064. These numbers are taken from Microsoft's MTP Vendor
    Extension Identification Message page and are what most physical devices
    show.
    Signed-off-by: Isaac Lozano <109lozanoi@gmail.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1460892593-5908-1-git-send-email-109lozanoi@gmail.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Stefan Weil ]
  * [a277c3e] usb: Support compilation without poll.h.
    This is a hack to support compilation with Mingw-w64 which provides
    a libusb-1.0 package, but no poll.h.
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Message-id: 1458630800-10088-1-git-send-email-sw@weilnetz.de
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Eric Blake ]
  * [983f52d] qapi-visit: Add visitor.type classification.
    We have three classes of QAPI visitors: input, output, and dealloc.
    Currently, all implementations of these visitors have one thing in
    common based on their visitor type: the implementation used for the
    visit_type_enum() callback.  But since we plan to add more such
    common behavior, in relation to documenting and further refining
    the semantics, it makes more sense to have the visitor
    implementations advertise which class they belong to, so the common
    qapi-visit-core code can use that information in multiple places.
    A later patch will better document the types of visitors directly
    in visitor.h.
    For this patch, knowing the class of a visitor implementation lets
    us make input_type_enum() and output_type_enum() become static
    functions, by replacing the callback function Visitor.type_enum()
    with the simpler enum member Visitor.type.  Share a common
    assertion in qapi-visit-core as part of the refactoring.
    Move comments in opts-visitor.c to match the refactored layout.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-2-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [e58d695] qapi: Guarantee NULL obj on input visitor callback error.
    Our existing input visitors were not very consistent on errors in a
    function taking 'TYPE **obj'.  These are start_struct(),
    start_alternate(), type_str(), and type_any().  next_list() is
    similar, but can't fail (see commit 08f9541).  While all of them set
    '*obj' to allocated storage on success, it was not obvious whether
    '*obj' was guaranteed safe on failure, or whether it was left
    uninitialized.  But a future patch wants to guarantee that
    visit_type_FOO() does not leak a partially-constructed obj back to
    the caller; it is easier to implement this if we can reliably state
    that input visitors assign '*obj' regardless of success or failure,
    and that on failure *obj is NULL.  Add assertions to enforce
    consistency in the final setting of err vs. *obj.
    The opts-visitor start_struct() doesn't set an error, but it
    also was doing a weird check for 0 size; all callers pass in
    non-zero size if obj is non-NULL.
    The testsuite has at least one spot where we no longer need
    to pre-initialize a variable prior to a visit; valgrind confirms
    that the test is still fine with the cleanup.
    A later patch will document the design constraint implemented
    here.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-3-git-send-email-eblake@redhat.com>
    [visit_start_alternate()'s assertion tightened, commit message tweaked]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [42a502a] qmp: Drop dead command->type.
    Ever since QMP was first added back in commit 43c20a43, we have
    never had any QmpCommandType other than QCT_NORMAL.  It's
    pointless to carry around the cruft.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-4-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [b471d01] qmp-input: Clean up stack handling.
    Management of the top of stack was a bit verbose; creating a
    temporary variable and adding some comments makes the existing
    code more legible before the next few patches improve things.
    No semantic changes other than asserting that we are always
    visiting a QObject, and not a NULL value.  In particular, the
    check for 'name && qobject_type(qobj) == QTYPE_QDICT)' is a
    bit overkill (a dict visit should always have a name); a later
    patch revisits that, while this patch is only changing one
    layer of indentation due to dropping 'if (qobj)'.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-5-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [fc471c1] qapi: Consolidate QMP input visitor creation.
    Rather than having two separate ways to create a QMP input
    visitor, where the safer approach has the more verbose name,
    it is better to consolidate things into a single function
    where the caller must explicitly choose whether to be strict
    or to ignore excess input.  This patch is the strictly
    mechanical conversion; the next patch will then audit which
    uses can be made stricter.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-6-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [240f64b] qapi: Use strict QMP input visitor in more places.
    The following uses of a QMP input visitor should be strict
    (that is, excess keys in QDict input should be flagged if not
    converted to QAPI):
    - Testsuite code unrelated to explicitly testing non-strict
    mode (test-qmp-commands, test-visitor-serialization); since
    we want more code to be strict by default, having more tests
    of strict mode doesn't hurt
    - Code used for cloning QAPI objects (replay-input.c,
    qemu-sockets.c); we are reparsing a QObject just barely
    produced by the qmp output visitor and which therefore should
    not have any garbage, so while it is extra work to be strict,
    it validates that our clone is correct [note that a later patch
    series will simplify these two uses by creating an actual
    clone visitor that is much more efficient than a
    generate/reparse cycle]
    - qmp_object_add(), which calls into user_creatable_add_type().
    Since command line parsing for '-object' uses the same
    user_creatable_add_type() through the OptsVisitor, and that is
    always strict, we want to ensure that any nested dictionaries
    would be treated the same in QMP and from the command line (I
    don't actually know if such nested dictionaries exist).  Note
    that on this code change, strictness only matters for nested
    dictionaries (if even possible), since we already flag excess
    input at the top level during an earlier object_property_set()
    on an unknown key, whether from QemuOpts:
    $ ./x86_64-softmmu/qemu-system-x86_64 -nographic -nodefaults -qmp stdio -object secret,id=sec0,data=letmein,format=raw,foo=bar
    qemu-system-x86_64: -object secret,id=sec0,data=letmein,format=raw,foo=bar: Property '.foo' not found
    or from QMP:
    $ ./x86_64-softmmu/qemu-system-x86_64 -nographic -nodefaults -qmp stdio
    {"QMP": {"version": {"qemu": {"micro": 93, "minor": 5, "major": 2}, "package": ""}, "capabilities": []}}
    {"execute":"qmp_capabilities"}
    {"return": {}}
    {"execute":"object-add","arguments":{"qom-type":"secret","id":"sec0","props":{"format":"raw","data":"letmein","foo":"bar"}}}
    {"error": {"class": "GenericError", "desc": "Property '.foo' not found"}}
    The only remaining uses of non-strict input visits are:
    - QMP 'qom-set' (which eventually executes
    object_property_set_qobject()) - mark it as something to revisit
    in the future (I didn't want to spend any more time on this patch
    auditing if we have any QOM dictionary properties that might be
    impacted, and couldn't easily prove whether this code path is
    shared with anything else).
    - test-qmp-input-visitor: explicit tests of non-strict mode. If
    we later get rid of users that don't need strictness, then this
    test should be merged with test-qmp-input-strict
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-7-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [e5826a2] qmp-input: Don't consume input when checking has_member.
    Commit e8316d7 mistakenly passed consume=true within
    qmp_input_optional() when checking if an optional member was
    present, but the mistake was silently ignored since the code
    happily let us extract a member more than once.  Fix
    qmp_input_optional() to not consume anything, then tighten up
    the input visitor to ensure that a member is consumed exactly
    once (all generated code follows this pattern; and the new
    assert will catch any hand-written code that tries to visit
    the same key more than once).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-8-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [ed84153] qapi-commands: Wrap argument visit in visit_start_struct.
    The qmp-input visitor was allowing callers to play rather fast
    and loose: when visiting a QDict, you could grab members of the
    root dictionary without first pushing into the dict; among the
    culprit callers was the generated marshal code on the 'arguments'
    dictionary of a QMP command.  But we are about to tighten the
    input visitor, at which point the generated marshal code MUST
    follow the same paradigms as everyone else, of pushing into the
    struct before grabbing its keys.
    Generated code grows as follows:
    |@@ -515,7 +641,12 @@ void qmp_marshal_blockdev_backup(QDict *
    |     BlockdevBackup arg = {0};
    |
    |     v = qmp_input_get_visitor(qiv);
    |+    visit_start_struct(v, NULL, NULL, 0, &err);
    |+    if (err) {
    |+        goto out;
    |+    }
    |     visit_type_BlockdevBackup_members(v, &arg, &err);
    |+    visit_end_struct(v, err ? NULL : &err);
    |     if (err) {
    |         goto out;
    |     }
    |@@ -527,7 +715,9 @@ out:
    |     qmp_input_visitor_cleanup(qiv);
    |     qdv = qapi_dealloc_visitor_new();
    |     v = qapi_dealloc_get_visitor(qdv);
    |+    visit_start_struct(v, NULL, NULL, 0, NULL);
    |     visit_type_BlockdevBackup_members(v, &arg, NULL);
    |+    visit_end_struct(v, NULL);
    |     qapi_dealloc_visitor_cleanup(qdv);
    | }
    The use of 'err ? NULL : &err' is temporary; a later patch will
    clean that up when it splits visit_end_struct().
    Prior to this patch, the fact that there was no final
    visit_end_struct() meant that even though we are using a strict
    input visit, the marshalling code was not detecting excess input
    at the top level (only in nested levels).  Fortunately, we have
    code in monitor.c:qmp_check_client_args() that also checks for
    no excess arguments at the top level.  But as the generated code
    is more compact than the manual check, a later patch will clean
    up monitor.c to drop the redundancy added here.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-9-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [ad73970] qom: Wrap prop visit in visit_start_struct.
    The qmp-input visitor was allowing callers to play rather fast
    and loose: when visiting a QDict, you could grab members of the
    root dictionary without first pushing into the dict; the final
    such culprit was the QOM code for converting to and from object
    properties.  But we are about to tighten the input visitor, at
    which point user_creatable_add_type() as called with a QMP input
    visitor via qmp_object_add() MUST follow the same paradigms as
    everyone else, of pushing into the struct before grabbing its
    keys.
    The use of 'err ? NULL : &err' is temporary; a later patch will
    clean that up when it splits visit_end_struct().
    Furthermore, note that both callers always pass qdict, so we can
    convert the conditional into an assert and reduce indentation.
    The change has no impact to the testsuite now, but is required to
    avoid a failure in tests/test-netfilter once qmp-input is made
    stricter to detect inconsistent 'name' arguments on the root visit.
    Since user_creatable_add_type() is also called with OptsVisitor
    through user_creatable_add_opts(), we must also check that there
    is no negative impact there; both pre- and post-patch, we see:
    $ ./x86_64-softmmu/qemu-system-x86_64 -nographic -nodefaults -qmp stdio -object secret,id=sec0,data=letmein,format=raw,foo=bar
    qemu-system-x86_64: -object secret,id=sec0,data=letmein,format=raw,foo=bar: Property '.foo' not found
    That is, the only new checking that the new visit_end_struct() can
    perform is for excess input, but we already catch excess input
    earlier in object_property_set().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-10-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [ce140b1] qmp-input: Require struct push to visit members of top dict.
    Don't embed the root of the visit into the stack of current
    containers being visited.  That way, we no longer get confused
    on whether the first visit of a dictionary is to the dictionary
    itself or to one of the members of the dictionary, based on
    whether the caller passed name=NULL; and makes the QMP Input
    visitor like other visitors where the value of 'name' is now
    ignored on the root visit.  (We may someday want to revisit
    the rules on what 'name' should be on a top-level visit,
    rather than just ignoring it; but that would be the topic of
    another patch).
    An audit of all qmp_input_visitor_new() call sites shows that
    there were only two places where callers had previously been
    visiting to a QDict with a non-NULL name to bypass a call to
    visit_start_struct(), and those were fixed in prior patches.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-11-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [fcf3cb2] qmp-input: Refactor when list is advanced.
    In the QMP input visitor, visiting a list traverses two objects:
    the QAPI GenericList of the caller (which gets advanced in
    visit_next_list() regardless of this patch), and the QList input
    that we are converting to QAPI.  For consistency with QDict
    visits, we want to consume elements from the input QList during
    the visit_type_FOO() for the list element; that is, we want ALL
    the code for consuming an input to live in qmp_input_get_object(),
    rather than having it split according to whether we are visiting
    a dict or a list.  Making qmp_input_get_object() the common point
    of consumption will make it easier for a later patch to refactor
    visit_start_list() to cover the GenericList * head of a QAPI list,
    and in turn will get rid of the 'first' flag (which lived in
    qmp_input_next_list() pre-patch, and is hoisted to StackObject
    by this patch).
    This patch is therefore altering the post-condition use of 'entry',
    while keeping what gets visited unchanged, from:
            start_list next_list type_ELT ... next_list type_ELT next_list end_list
     visits                      1st elt                last elt
     entry  NULL       1st elt   1st elt      last elt  last elt NULL      gone
    where type_ELT() returns (entry ? entry : 1st elt) and next_list() steps
    entry
    to this usage:
            start_list next_list type_ELT ... next_list type_ELT next_list end_list
     visits                      1st elt                last elt
     entry  1st elt    1nd elt   2nd elt      last elt  NULL     NULL      gone
    where type_ELT() steps entry and returns the old entry, and next_list()
    leaves entry alone.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-12-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [adfb264] qapi: Document visitor interfaces, add assertions.
    The visitor interface for mapping between QObject/QemuOpts/string
    and QAPI is scandalously under-documented, making changes to visitor
    core, individual visitors, and users of visitors difficult to
    coordinate.  Among other questions: when is it safe to pass NULL,
    vs. when a string must be provided; which visitors implement which
    callbacks; the difference between concrete and virtual visits.
    Correct this by retrofitting proper contracts, and document where some
    of the interface warts remain (for example, we may want to modify
    visit_end_* to require the same 'obj' as the visit_start counterpart,
    so the dealloc visitor can be simplified).  Later patches in this
    series will tackle some, but not all, of these warts.
    Add assertions to (partially) enforce the contract.  Some of these
    were only made possible by recent cleanup commits.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-13-git-send-email-eblake@redhat.com>
    [Doc fix from Eric squashed in]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [7d7a337] tests: Add check-qnull.
    Add a new test, for checking reference counting of qnull(). As
    part of the new file, move a previous reference counting change
    added in commit a861564 to a more logical place.
    Note that while most of the check-q*.c leave visitor stuff to
    the test-qmp-*-visitor.c, in this case we actually want the
    visitor tests in our new file because we are validating the
    reference count of qnull_, which is an internal detail that
    test-qmp-*-visitor should not be peeking into (or put another
    way, qnull() is the only special case where we don't have
    independent allocation of a QObject, so none of the other
    visitor tests require the layering violation present in this
    test).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-14-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [3bc97fd] qapi: Add visit_type_null() visitor.
    Right now, qmp-output-visitor happens to produce a QNull result
    if nothing is actually visited between the creation of the visitor
    and the request for the resulting QObject.  A stronger protocol
    would require that a QMP output visit MUST visit something.  But
    to still be able to produce a JSON 'null' output, we need a new
    visitor function that states our intentions.  Yes, we could say
    that such a visit must go through visit_type_any(), but that
    feels clunky.
    So this patch introduces the new visit_type_null() interface and
    its no-op interface in the dealloc visitor, and stubs in the
    qmp visitors (the next patch will finish the implementation).
    For the visitors that will not implement the callback, document
    the situation. The code in qapi-visit-core unconditionally
    dereferences the callback pointer, so that a segfault will inform
    a developer if they need to implement the callback for their
    choice of visitor.
    Note that JSON has a primitive null type, with the single value
    null; likewise with the QNull type for QObject; but for QAPI,
    we just have the 'null' value without a null type.  We may
    eventually want to add more support in QAPI for null (most likely,
    we'd use it via an alternate type that permits 'null' or an
    object); but we'll create that usage when we need it.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-15-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [3df016f] qmp: Support explicit null during visits.
    Implement the new type_null() callback for the qmp input and
    output visitors. While we don't yet have a use for this in QAPI
    input (the generator will need some tweaks first), some
    potential usages have already been discussed on the list.
    Meanwhile, the output visitor could already output explicit null
    via type_any, but this gives us finer control.
    At any rate, it's easy to test that we can round-trip an explicit
    null through manual use of visit_type_null() wrapped by a virtual
    visit_start_struct() walk, even if we can't do the visit in a
    QAPI type.  Repurpose the test_visitor_out_empty test,
    particularly since a future patch will tighten semantics to
    forbid use of qmp_output_get_qobject() without at least one
    intervening visit_type_*.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-16-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [a543a55] spapr_drc: Expose 'null' in qom-get when there is no fdt.
    Now that the QMP output visitor supports an explicit null
    output, we should utilize it to make it easier to diagnose
    the difference between a missing fdt ('null') vs. a
    present-but-empty one ('{}').
    (Note that this reverts the behavior of commit ab8bf1d, taking
    us back to the behavior of commit 6c2f9a1 [which in turn
    stemmed from a crash fix in 1d10b44]; but that this time,
    the change is intentional and not an accidental side-effect.)
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <1461879932-9020-17-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [f2ff429] qmp: Don't reuse qmp visitor after grabbing output.
    The testsuite was the only client that attempted to reuse a
    QmpOutputVisitor for a second visit after encountering an
    error and/or calling qmp_output_get_qobject() on a first
    visit.  The next patch is about to tighten the semantics to
    be one-shot usage of the visitor, like all other visitors
    (which will enable further simplifications down the road).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1462854006-24658-1-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [56a6f02] qmp: Tighten output visitor rules.
    Tighten assertions in the QMP output visitor, so that:
    - qmp_output_get_qobject() can only be called after pairing a
    visit_end_* for every visit_start_* (rather than allowing it on
    a partially built object)
    - qmp_output_get_qobject() cannot be called unless at least one
    visit_type_* or visit_start/visit_end pair has occurred since
    creation/reset (the accidental return of NULL fixed by commit
    ab8bf1d7 would have been much easier to diagnose)
    - ensure that we are encountering the expected object or list
    type, to provide protection against mismatched push(struct)/
    pop(list) or push(list)/pop(struct), similar to the qmp-input
    protection added in commit bdd8e6b5.
    - ensure that except for the root, 'name' is non-null inside a
    dict, and NULL inside a list (this may need changing later if
    we add "name.0" support for better error messages for a list,
    but for now it makes sure all users are at least consistent)
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-19-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [15c2f66] qapi: Split visit_end_struct() into pieces.
    As mentioned in previous patches, we want to call visit_end_struct()
    functions unconditionally, so that visitors can release resources
    tied up since the matching visit_start_struct() without also having
    to worry about error priority if more than one error occurs.
    Even though error_propagate() can be safely used to ignore a second
    error during cleanup caused by a first error, it is simpler if the
    cleanup cannot set an error.  So, split out the error checking
    portion (basically, input visitors checking for unvisited keys) into
    a new function visit_check_struct(), which can be safely skipped if
    any earlier errors are encountered, and leave the cleanup portion
    (which never fails, but must be called unconditionally if
    visit_start_struct() succeeded) in visit_end_struct().
    Generated code in qapi-visit.c has diffs resembling:
    |@@ -59,10 +59,12 @@ void visit_type_ACPIOSTInfo(Visitor *v,
    |         goto out_obj;
    |     }
    |     visit_type_ACPIOSTInfo_members(v, obj, &err);
    |-    error_propagate(errp, err);
    |-    err = NULL;
    |+    if (err) {
    |+        goto out_obj;
    |+    }
    |+    visit_check_struct(v, &err);
    | out_obj:
    |-    visit_end_struct(v, &err);
    |+    visit_end_struct(v);
    | out:
    and in qapi-event.c:
    @@ -47,7 +47,10 @@ void qapi_event_send_acpi_device_ost(ACP
    |         goto out;
    |     }
    |     visit_type_q_obj_ACPI_DEVICE_OST_arg_members(v, &param, &err);
    |-    visit_end_struct(v, err ? NULL : &err);
    |+    if (!err) {
    |+        visit_check_struct(v, &err);
    |+    }
    |+    visit_end_struct(v);
    |     if (err) {
    |         goto out;
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-20-git-send-email-eblake@redhat.com>
    [Conflict with a doc fixup resolved]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Markus Armbruster ]
  * [7337468] tests/string-input-visitor: Add negative integer tests.
    Add two negative tests, one for int and one for int16List.  The latter
    exposes a bug: nonsensical input results in an empty list instead of
    an error.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1461325048-14122-1-git-send-email-armbru@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-22-git-send-email-eblake@redhat.com>

  [ Eric Blake ]
  * [74f24cb] qapi: Fix string input visitor handling of invalid list.
    As shown in the previous commit, the string input visitor was
    treating bogus input as an empty list rather than an error.
    Fix parse_str() to set errp, then the callers to exit early if
    an error was reported.
    Meanwhile, fix the testsuite to use the generated
    qapi_free_int16List() instead of rolling our own, and to
    validate the fixed behavior, while at the same time documenting
    one more change that we'd like to make in a later patch (a
    failed visit_start_list should guarantee a NULL pointer,
    regardless of what things were on input).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-23-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [d9f62dd] qapi: Simplify semantics of visit_next_list()
    The semantics of the list visit are somewhat baroque, with the
    following pseudocode when FooList is used:
    start()
    for (prev = head; cur = next(prev); prev = &cur) {
        visit(&cur->value)
    }
    Note that these semantics (advance before visit) requires that
    the first call to next() return the list head, while all other
    calls return the next element of the list; that is, every visitor
    implementation is required to track extra state to decide whether
    to return the input as-is, or to advance.  It also requires an
    argument of 'GenericList **' to next(), solely because the first
    iteration might need to modify the caller's GenericList head, so
    that all other calls have to do a layer of dereferencing.
    Thankfully, we only have two uses of list visits in the entire
    code base: one in spapr_drc (which completely avoids
    visit_next_list(), feeding in integers from a different source
    than uint8List), and one in qapi-visit.py.  That is, all other
    list visitors are generated in qapi-visit.c, and share the same
    paradigm based on a qapi FooList type, so we can refactor how
    lists are laid out with minimal churn among clients.
    We can greatly simplify things by hoisting the special case
    into the start() routine, and flipping the order in the loop
    to visit before advance:
    start(head)
    for (tail = *head; tail; tail = next(tail)) {
        visit(&tail->value)
    }
    With the simpler semantics, visitors have less state to track,
    the argument to next() is reduced to 'GenericList *', and it
    also becomes obvious whether an input visitor is allocating a
    FooList during visit_start_list() (rather than the old way of
    not knowing if an allocation happened until the first
    visit_next_list()).  As a minor drawback, we now allocate in
    two functions instead of one, and have to pass the size to
    both functions (unless we were to tweak the input visitors to
    cache the size to start_list for reuse during next_list, but
    that defeats the goal of less visitor state).
    The signature of visit_start_list() is chosen to match
    visit_start_struct(), with the new parameters after 'name'.
    The spapr_drc case is a virtual visit, done by passing NULL for
    list, similarly to how NULL is passed to visit_start_struct()
    when a qapi type is not used in those visits.  It was easy to
    provide these semantics for qmp-output and dealloc visitors,
    and a bit harder for qmp-input (several prerequisite patches
    refactored things to make this patch straightforward).  But it
    turned out that the string and opts visitors munge enough other
    state during visit_next_list() to make it easier to just
    document and require a GenericList visit for now; an assertion
    will remind us to adjust things if we need the semantics in the
    future.
    Several pre-requisite cleanup patches made the reshuffling of
    the various visitors easier; particularly the qmp input visitor.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-24-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [68ab47e] qapi: Change visit_type_FOO() to no longer return partial objects.
    Returning a partial object on error is an invitation for a careless
    caller to leak memory.  We already fixed things in an earlier
    patch to guarantee NULL if visit_start fails ("qapi: Guarantee
    NULL obj on input visitor callback error"), but that does not
    help the case where visit_start succeeds but some other failure
    happens before visit_end, such that we leak a partially constructed
    object outside visit_type_FOO(). As no one outside the testsuite
    was actually relying on these semantics, it is cleaner to just
    document and guarantee that ALL pointer-based visit_type_FOO()
    functions always leave a safe value in *obj during an input visitor
    (either the new object on success, or NULL if an error is
    encountered), so callers can now unconditionally use
    qapi_free_FOO() to clean up regardless of whether an error occurred.
    The decision is done by adding visit_is_input(), then updating the
    generated code to check if additional cleanup is needed based on
    the type of visitor in use.
    Note that we still leave *obj unchanged after a scalar-based
    visit_type_FOO(); I did not feel like auditing all uses of
    visit_type_Enum() to see if the callers would tolerate a specific
    sentinel value (not to mention having to decide whether it would
    be better to use 0 or ENUM__MAX as that sentinel).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1461879932-9020-25-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Aurelien Jarno ]
  * [9d989c7] target-mips: fix call to memset in soft reset code.
    Recent versions of GCC report the following error when compiling
    target-mips/helper.c:
      qemu/target-mips/helper.c:542:9: warning: ‘memset’ used with length
      equal to number of elements without multiplication by element size
      [-Wmemset-elt-size]
    This is indeed correct and due to a wrong usage of sizeof(). Fix that.
    Cc: Stefan Weil <sw@weilnetz.de>
    Cc: Leon Alrae <leon.alrae@imgtec.com>
    Cc: qemu-stable@nongnu.org
    LP: https://bugs.launchpad.net/qemu/+bug/1577841
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Reviewed-by: Stefan Weil <sw@weilnetz.de>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Peter Maydell ]
  * [2661792] Open 2.7 development tree.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Pooja Dhannawat ]
  * [5c87c40] blizzard: Remove support for DEPTH != 32.
    Removing support for DEPTH != 32 from blizzard template header
    and file that includes it, as macro DEPTH == 32 only used.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Pooja Dhannawat <dhannawatpooja1@gmail.com>
    Message-id: 1458971873-2768-1-git-send-email-dhannawatpooja1@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [ea644cf] omap_lcdc: Remove support for DEPTH != 32
    surface_bits_per_pixel() always returns 32
    so, removing other dead code which is
    based on DEPTH !== 32
    Signed-off-by: Pooja Dhannawat <dhannawatpooja1@gmail.com>
    Message-id: 1459260142-9144-1-git-send-email-dhannawatpooja1@gmail.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ xiaoqiang.zhao ]
  * [b46818e] hw/intc: QOM'ify etraxfs_pic.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Tested-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [d3d5a6f] hw/intc: QOM'ify exynos4210_combiner.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [68d7161] hw/intc: QOM'ify exynos4210_gic.c
    * Drop the old SysBus init function and use instance_init
    * Split the exynos4210_irq_gate_init into an instance_init
      and a DeviceClass::realize function
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [f777bda] hw/intc: QOM'ify imx_avic.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e3be8b4] hw/intc: QOM'ify pl190.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [c09008d] hw/intc: QOM'ify slavio_intctl.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [22c70d8] hw/intc: QOM'ify grlib_irqmp.c
    * Split the old SysBus init into an instance_init and a
      DeviceClass::realize function
    * Drop the old SysBus init function
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: corrected "can not" to "cannot" in error message]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ xiaoqiang zhao ]
  * [0a750e2] hw/intc: QOM'ify omap_intc.c
    * Split the old SysBus init into an instance_init and a
      DeviceClass::realize function
    * Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Sylvain Garrigues ]
  * [27a5dc7] bcm2835_property: use cached values when querying framebuffer.
    As the framebuffer settings are copied into the result message before it is
    reconfigured, inconsistent behavior can happen when, for instance, you set with
    a single message the width, height, and depth, and ask at the same time to
    allocate the buffer and get the pitch and the size.
    In this case, the reported pitch and size would be incorrect as they were
    computed with the initial values of width, height and depth, not the ones the
    client requested.
    Signed-off-by: Sylvain Garrigues <sylvain@sylvaingarrigues.com>
    Reviewed-by: Andrew Baumann <Andrew.Baumann@microsoft.com>
    Message-id: 1461325343-24995-1-git-send-email-sylvain@sylvaingarrigues.com
    [PMM: folded a couple of long lines]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Zhou Jie ]
  * [0b062eb] hw/arm/nseries: Allocating Large sized arrays to heap
    n8x0_init has a huge stack usage of 65536 bytes approx.
    Moving large arrays to heap to reduce stack usage.
    Signed-off-by: Zhou Jie <zhoujie2011@cn.fujitsu.com>
    Message-id: 1461651308-894-1-git-send-email-zhoujie2011@cn.fujitsu.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Sergey Sorokin ]
  * [dfda683] target-arm: Stage 2 permission fault was fixed in AArch32 state.
    As described in AArch32.CheckS2Permission an instruction fetch fails if
    XN bit is set or there is no read permission for the address.
    Signed-off-by: Sergey Sorokin <afarallax@yandex.ru>
    Message-id: 1461002400-3187-1-git-send-email-afarallax@yandex.ru
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [dddb522] target-arm: Fix descriptor address masking in ARM address translation.
    There is a bug in ARM address translation regime with a long-descriptor
    format. On the descriptor reading its address is formed from an index
    which is a part of the input address. And on the first iteration this index
    is incorrectly masked with 'grainsize' mask. But it can be wider according
    to pseudo-code.
    On the other hand on the iterations other than first the descriptor address
    is formed from the previous level descriptor by masking with 'descaddrmask'
    value. It always clears just 12 lower bits, but it must clear 'grainsize'
    lower bits instead according to pseudo-code.
    The patch fixes both cases.
    Signed-off-by: Sergey Sorokin <afarallax@yandex.ru>
    Message-id: 1460996853-22117-1-git-send-email-afarallax@yandex.ru
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Edgar E. Iglesias ]
  * [1d41478] tcg: Add tcg_set_insn_param.
    Add tcg_set_insn_param as a mechanism to modify an insn
    parameter after emiting the insn. This is useful for icount
    and also for embedding fault information for a specific insn.
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1461931684-1867-2-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [25caa94] gen-icount: Use tcg_set_insn_param.
    Use tcg_set_insn_param() instead of directly accessing internal
    tcg data structures to update an insn param.
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1461931684-1867-3-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [094d028] target-arm: Split data abort syndrome generator.
    Split the data abort syndrome generator into two versions:
    One with a valid Instruction Specific Syndrome (ISS) and another without.
    The following new flags are supported by the syndrome generator
    with ISS:
    * isv - Instruction syndrome valid
    * sas - Syndrome access size
    * sse - Syndrome sign extend
    * srt - Syndrome register transfer
    * sf  - Sixty-Four bit register width
    * ar  - Acquire/Release
    These flags are not yet used, so this patch has no functional change
    except that we will now correctly set the IL bit in data abort
    syndromes without ISS information.
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1461931684-1867-5-git-send-email-edgar.iglesias@gmail.com>
    [PMM: squashed in with patch which was just adding the IL bit]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Edgar E. Iglesias ]
  * [026a19c] target-arm/translate-a64.c: Use extract32 in disas_ldst_reg_imm9.
    Use extract32 instead of open coding the bit masking when decoding
    is_signed and is_extended. This streamlines the decoding with some
    of the other ldst variants.
    No functional change.
    Reviewed-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1461931684-1867-6-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [cd69452] target-arm/translate-a64.c: Unify some of the ldst_reg decoding.
    The various load/store variants under disas_ldst_reg can all reuse the
    same decoding for opc, size, rt and is_vector.
    This patch unifies the decoding in preparation for generating
    instruction syndromes for data aborts.
    This will allow us to reduce the number of places to hook in updates
    to the load/store state needed to generate the insn syndromes.
    No functional change.
    Reviewed-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1461931684-1867-7-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ xiaoqiang zhao ]
  * [3c09d6c] hw/display: QOM'ify exynos4210_fimd.c
    * Drop the old SysBus init function and use instance_init
    * Move graphic_console_init into realize stage
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1462417489-28603-2-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Shannon Zhao ]
  * [9695200] ARM: Virt: Set numa-node-id for cpu and memory nodes.
    Generate memory nodes according to NUMA topology. Set numa-node-id
    property for cpu and memory nodes.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1461667229-9216-2-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e6e400d] ACPI: Add GICC Affinity Structure.
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1461667229-9216-3-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [ea9fcbd] ACPI: Fix the definition of proximity in AcpiSratMemoryAffinity.
    ACPI spec says that Proximity Domain is an "Integer that represents
    the proximity domain to which the processor belongs". So define it as a
    uint32_t.
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1461667229-9216-4-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [64b8313] ACPI: move acpi_build_srat_memory to common place.
    Move acpi_build_srat_memory to common place so that it could be reused
    by ARM. Rename it to build_srat_memory.
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1461667229-9216-5-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [2b302e1] ACPI: Virt: Generate SRAT table.
    To support NUMA, it needs to generate SRAT ACPI table.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1461667229-9216-6-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Jean-Christophe DUBOIS ]
  * [825482a] ARM: Factor out ARM on/off PSCI control functions.
    Split ARM on/off function from PSCI support code.
    This will allow to reuse these functions in other code.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [1983057] i.MX: Add i.MX6 System Reset Controller device.
    This controller is also present in i.MX5X devices but they are not
    yet emulated by QEMU.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [53374b1] FIFO: Add a FIFO32 implementation.
    This one is build on top of the existing FIFO8
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [c906a3a] i.MX: Add the Freescale SPI Controller.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [ec46eaa] i.MX: Add i.MX6 SOC implementation.
    For now we only support the following devices:
    * up to 4 Cortex A9 cores
    * A9 MPCORE (SCU, GIC, TWD)
    * 5 i.MX UARTs
    * 2 EPIT timers
    * 1 GPT timer
    * 3 I2C controllers
    * 7 GPIO controllers
    * 6 SDHC controllers
    * 5 SPI controllers
    * 1 CCM device
    * 1 SRC device
    * various ROM/RAM areas.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [3a0f31b] i.MX: Add sabrelite i.MX6 emulation.
    The sabrelite supports one SPI FLASH memory on SPI1
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [5c87590] hw/display/blizzard: Expand out macros.
    Now that we can assume that only depth 32 is possible, there's no need
    for the COPY_PIXEL1 and PIXEL_TYPE macros, and the SKIP_PIXEL, COPY_PIXEL
    and SWAP_WORDS macros aren't used at all. Expand out COPY_PIXEL1 and
    PIXEL_TYPE where they are used, delete the unused macro definitions, and
    expand out the uses of glue(name_prefix, DEPTH).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1462371352-21498-2-git-send-email-peter.maydell@linaro.org
  * [4274d82] hw/display/blizzard: Remove blizzard_template.h.
    We no longer need to do the "multiply include this header" trick with
    blizzard_template.h, and it is only used in a single .c file, so just
    put its contents inline in blizzard.c.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1462371352-21498-3-git-send-email-peter.maydell@linaro.org
  * [6459b94] target-arm: Avoid unnecessary TLB flush on TCR_EL2, TCR_EL3 writes.
    The TCR_EL2 and TCR_EL3 regdefs were incorrectly using the
    vmsa_tcr_el1_write function for writes. Since these registers don't
    have the A1 bit that TCR_EL1 does, we don't need to do a tlb_flush()
    when they are written. Remove the unnecessary .writefn and also the
    harmless but unneeded .raw_writefn and .resetfn definitions.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>

  [ xiaoqiang.zhao ]
  * [3f5ab25] hw/arm: QOM'ify armv7m.c.
    Drop the use of old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [ff7a27c] hw/arm: QOM'ify highbank.c.
    Drop the use of old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [a1f42e0] hw/arm: QOM'ify integratorcp.c
    * Drop the use of old SysBus init function and use instance_init
    * Remove the empty 'icp_pic_class_init' from Typeinfo
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [16fb31a] hw/arm: QOM'ify pxa2xx.c.
    Drop the use of old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [08ba3fd] hw/arm: QOM'ify pxa2xx_pic.c.
    Remove the empty 'pxa2xx_pic_initfn' and it's
    setup code in the 'pxa2xx_pic_class_init'
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ xiaoqiang zhao ]
  * [f68575c] hw/arm: QOM'ify spitz.c.
    Drop the use of old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ xiaoqiang.zhao ]
  * [15c4fff] hw/arm: QOM'ify stellaris.c
    * Drop the use of old SysBus init function and use instance_init
    * Use DeviceClass::vmsd instead of 'vmstate_register' function
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [5a67508] hw/arm: QOM'ify strongarm.c.
    Drop the use of old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [0bc91ab] hw/arm: QOM'ify versatilepb.c.
    Drop the use of old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Kevin Wolf ]
  * [90c7862] block: Don't disable I/O throttling on sync requests.
    We had to disable I/O throttling with synchronous requests because we
    didn't use to run timers in nested event loops when the code was
    introduced. This isn't true any more, and throttling works just fine
    even when using the synchronous API.
    The removed code is in fact dead code since commit a8823a3b ('block: Use
    blk_co_pwritev() for blk_write()') because I/O throttling can only be
    set on the top layer, but BlockBackend always uses the coroutine
    interface now instead of using the sync API emulation in block.c.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Message-Id: <1458660792-3035-2-git-send-email-kwolf@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Paolo Bonzini ]
  * [733bbc8] block: make bdrv_start_throttled_reqs return void.
    The return value is unused and I am not sure why it would be useful.
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a72f641] block: move restarting of throttled reqs to block/throttle-groups.c.
    We want to remove throttled_reqs from block/io.c.  This is the easy
    part---hide the handling of throttled_reqs during disable/enable of
    throttling within throttle-groups.c.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [b6e84c9] block: extract bdrv_drain_poll/bdrv_co_yield_to_drain from bdrv_drain/bdrv_co_drain.
    Do not call bdrv_drain_recurse twice in bdrv_co_drain.  A small
    tweak to the logic in Fam's patch, which is harmless since no
    one implements bdrv_drain anyway.  But better get it right.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [ce0f141] block: introduce bdrv_no_throttling_begin/end.
    Extract the handling of throttling from bdrv_flush_io_queue.  These
    new functions will soon become BdrvChildRole callbacks, as they can
    be generalized to "beginning of drain" and "end of drain".
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [6b98bd6] block: plug whole tree at once, introduce bdrv_io_unplugged_begin/end.
    Extract the handling of io_plug "depth" from linux-aio.c and let the
    main bdrv_drain loop do nothing but wait on I/O.
    Like the two newly introduced functions, bdrv_io_plug and bdrv_io_unplug
    now operate on all children.  The visit order is now symmetrical between
    plug and unplug, making it possible for formats to implement plug/unplug.
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [dd7f7ed] linux-aio: make it more type safe.
    Replace void* with an opaque LinuxAioState type.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [166fe96] block: Introduce bdrv_driver_preadv()
    This is a function that simply calls into the block driver for doing a
    read, providing the byte granularity interface we want to eventually
    have everywhere, and using whatever interface that driver supports.
    For now, this is just a wrapper for calling bs->drv->bdrv_co_readv().
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [78a0729] block: Introduce bdrv_driver_pwritev()
    This is a function that simply calls into the block driver for doing a
    write, providing the byte granularity interface we want to eventually
    have everywhere, and using whatever interface that driver supports.
    This one is a bit more interesting than the version for reads: It adds
    support for .bdrv_co_writev_flags() everywhere, so that drivers
    implementing this function can drop .bdrv_co_writev() now.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [0884447] block: Support AIO drivers in bdrv_driver_preadv/pwritev()
    Instead of registering emulation functions as .bdrv_co_writev, just
    directly check whether the function is there or not, and use the AIO
    interface if it isn't. This makes the read/write functions more
    consistent with how things are done in other places (flush, discard,
    etc.)
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [cab3a35] block: Rename bdrv_co_do_preadv/writev to bdrv_co_preadv/writev.
    It used to be an internal helper function just for implementing
    bdrv_co_do_readv/writev(), but now that it's a public interface, it
    deserves a name without "do" in it.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [3fb0669] block: Introduce .bdrv_co_preadv/pwritev BlockDriver function.
    Many parts of the block layer are already byte granularity. The block
    driver interface, however, was still missing an interface that allows
    making use of this. This patch introduces a new BlockDriver interface,
    which is based on coroutines, vectored, has flags and uses a byte
    granularity. This is now the preferred interface for new drivers.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [3b8fd33] bochs: Implement .bdrv_co_preadv() interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [5cd2308] cloop: Implement .bdrv_co_preadv() interface.
    This implements .bdrv_co_preadv() for the cloop block driver. While
    updating the error paths, change -1 to a valid -errno code.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [3edf1e7] dmg: Implement .bdrv_co_preadv() interface.
    This implements .bdrv_co_preadv() for the cloop block driver. While
    updating the error paths, change -1 to a valid -errno code.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [0865bb6] vdi: Implement .bdrv_co_preadv() interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [fde9d56] vdi: Implement .bdrv_co_pwritev() interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [a844a2b] vmdk: Add vmdk_find_offset_in_cluster()
    This is a byte granularity version of vmdk_find_index_in_cluster().
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [f10cc24] vmdk: Implement .bdrv_co_preadv() interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [37b1d7d] vmdk: Implement .bdrv_co_pwritev() interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [d46b7cc] vpc: Implement .bdrv_co_preadv() interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [513b0f0] vpc: Implement .bdrv_co_pwritev() interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [4575eb4] vvfat: Implement .bdrv_co_preadv/pwritev interfaces.
    This doesn't really convert any of the actual vvfat logic to use
    vectored I/O (and it's doubtful whether that would make sense), but
    instead just adapts the wrappers to the modern interface.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [e3ddef2] block: Remove BlockDriver.bdrv_read/write.
    There are no block drivers left that implement the old .bdrv_read/write
    interface, so it can be removed now. This gets us rid of the
    corresponding emulation functions, too.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>

  [ Wei Jiangang ]
  * [547cb15] block: Fix typo in comment
    s/imlement/implement/
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Zhou Jie ]
  * [ed79f37] block: always compile-check debug prints.
    Files with conditional debug statements should ensure that the printf is
    always compiled. This prevents bitrot of the format string of the debug
    statement. And switch debug output to stderr.
    Signed-off-by: Zhou Jie <zhoujie2011@cn.fujitsu.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Janne Karhunen ]
  * [f249924] Allow users to specify the vmdk virtual hardware version.
    Vmdk images have metadata to indicate the vmware virtual
    hardware version image was created/tested to run with.
    Allow users to specify that version via new 'hwversion'
    option.
    [ kwolf: Adjust qemu-iotests common.filter ]
    Signed-off-by: Janne Karhunen <Janne.Karhunen@gmail.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [0e01b76] qemu-io: Fix memory leak in 'aio_write -z'
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>

  [ Eric Blake ]
  * [8341f00] block: Allow BDRV_REQ_FUA through blk_pwrite()
    We have several block drivers that understand BDRV_REQ_FUA,
    and emulate it in the block layer for the rest by a full flush.
    But without a way to actually request BDRV_REQ_FUA during a
    pass-through blk_pwrite(), FUA-aware block drivers like NBD are
    forced to repeat the emulation logic of a full flush regardless
    of whether the backend they are writing to could do it more
    efficiently.
    This patch just wires up a flags argument; followup patches
    will actually make use of it in the NBD driver and in qemu-io.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Acked-by: Denis V. Lunev <den@openvz.org>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [b7d17f9] block: Switch blk_read_unthrottled() to byte interface.
    Sector-based blk_read() should die; convert the one-off
    variant blk_read_unthrottled().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [983a160] block: Switch blk_*write_zeroes() to byte interface.
    Sector-based blk_write() should die; convert the one-off
    variant blk_write_zeroes() to use an offset/count interface
    instead.  Likewise for blk_co_write_zeroes() and
    blk_aio_write_zeroes().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [60cb2fa] block: Introduce byte-based aio read/write
    blk_aio_readv() and blk_aio_writev() are annoying in that they
    can't access sub-sector granularity, and cannot pass flags.
    Also, they require the caller to pass redundant information
    about the size of the I/O (qiov->size in bytes must match
    nb_sectors in sectors).
    Add new blk_aio_preadv() and blk_aio_pwritev() functions to fix
    the flaws. The next few patches will upgrade callers, then
    finally delete the old interfaces.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [d4f510e] ide: Switch to byte-based aio block access.
    Sector-based blk_aio_readv() and blk_aio_writev() should die; switch
    to byte-based blk_aio_preadv() and blk_aio_pwritev() instead.
    The patch had to touch multiple files at once, because dma_blk_io()
    takes pointers to the functions, and ide_issue_trim() piggybacks on
    the same interface (while ignoring offset under the hood).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [03c9006] scsi-disk: Switch to byte-based aio block access.
    Sector-based blk_aio_readv() and blk_aio_writev() should die; switch
    to byte-based blk_aio_preadv() and blk_aio_pwritev() instead.
    As part of the cleanup, scsi_init_iovec() no longer needs to return
    a value, and reword a comment.
    [ kwolf: Fix read accounting change ]
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Eric Blake ]
  * [b5772fd] virtio: Switch to byte-based aio block access.
    Sector-based blk_aio_readv() and blk_aio_writev() should die; switch
    to byte-based blk_aio_preadv() and blk_aio_pwritev() instead.
    The trace is modified at the same time, and nb_sectors is now
    unused.  Fix a comment typo while in the vicinity.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [d00000f] xen_disk: Switch to byte-based aio block access.
    Sector-based blk_aio_readv() and blk_aio_writev() should die; switch
    to byte-based blk_aio_preadv() and blk_aio_pwritev() instead.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a7a5b7c] fdc: Switch to byte-based block access.
    Sector-based blk_write() should die; switch to byte-based
    blk_pwrite() instead.  Likewise for blk_read().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [9fc0d36] nand: Switch to byte-based block access.
    Sector-based blk_write() should die; switch to byte-based
    blk_pwrite() instead.  Likewise for blk_read().
    This file is doing some complex computations to map various
    flash page sizes (256, 512, and 2048) atop generic uses of
    512-byte sector operations.  Perhaps someone will want to tidy
    up the file for fewer gymnastics in managing addresses and
    offsets, and less wasteful visits of 256-byte pages, but it
    was out of scope for this series, where I just went with the
    mechanical conversion.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [441692d] onenand: Switch to byte-based block access.
    Sector-based blk_write() should die; switch to byte-based
    blk_pwrite() instead.  Likewise for blk_read().
    This particular device picks its size during onenand_initfn(),
    and can be at most 0x80000000 bytes; therefore, shifting an
    'int sec' request to get back to a byte offset should never
    overflow 32 bits.  But adding assertions to document that point
    should not hurt.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [098e732] pflash: Switch to byte-based block access.
    Sector-based blk_write() should die; switch to byte-based
    blk_pwrite() instead.  Likewise for blk_read().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [12c125c] sd: Switch to byte-based block access.
    Sector-based blk_write() should die; switch to byte-based
    blk_pwrite() instead.  Likewise for blk_read().
    Greatly simplifies the code, now that we let the block layer
    take care of alignment and read-modify-write on our behalf :)
    In fact, we no longer need to include 'buf' in the migration
    stream (although we do have to ensure that the stream remains
    compatible).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [243e6f6] m25p80: Switch to byte-based block access.
    Sector-based blk_read() should die; switch to byte-based
    blk_pread() instead.
    Likewise for blk_aio_readv() and blk_aio_writev().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [26a122d] atapi: Switch to byte-based block access.
    Sector-based blk_read() should die; switch to byte-based
    blk_pread() instead.
    Add new defines ATAPI_SECTOR_BITS and ATAPI_SECTOR_SIZE to
    use anywhere we were previously scaling BDRV_SECTOR_* by 4,
    for better legibility.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [bd31c21] nbd: Switch to byte-based block access.
    Sector-based blk_read() should die; switch to byte-based
    blk_pread() instead.
    Add a constant for our magic number 512, to make it obvious
    that this size will NOT change even if BDRV_SECTOR_SIZE does,
    even though the two happen to be the same for now.  Split
    assignments from conditionals to keep checkpatch.pl happy.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [9166920] qemu-img: Switch to byte-based block access.
    Sector-based blk_write() should die; switch to byte-based
    blk_pwrite() instead.  Likewise for blk_read().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [7b3f971] qemu-io: Switch to byte-based block access
    qemu-io is the last user of several sector-based interfaces.
    This patch upgrades to the new interfaces under the hood,
    then deletes the resulting dead code.  Note that for maximum
    back-compat, while the -p option is no longer required to get
    blk_pread(), it is still needed to allow for unaligned access;
    this is because qemu-iotest 23 relies on qemu-io rejecting
    unaligned accesses without -p.  A later patch may clean up the
    interface to be more user-friendly, but it's better to separate
    what's done under the hood from what the user sees.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [7b1deac] block: Kill unused sector-based blk_* functions.
    Now that there are no remaining clients, we can drop the
    sector-based blk_read(), blk_write(), blk_aio_readv(), and
    blk_aio_writev().  Sadly, there are still remaining
    sector-based interfaces, such as blk_*discard(), or
    blk_write_compressed(); those will have to wait for another
    day.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Denis V. Lunev ]
  * [2928abc] qcow2: improve qcow2_co_write_zeroes()
    There is a possibility that qcow2_co_write_zeroes() will be called
    with the partial block. This could be synthetically triggered with
        qemu-io -c "write -z 32k 4k"
    and can happen in the real life in qemu-nbd. The latter happens under
    the following conditions:
        (1) qemu-nbd is started with --detect-zeroes=on and is connected to the
            kernel NBD client
        (2) third party program opens kernel NBD device with O_DIRECT
        (3) third party program performs write operation with memory buffer
            not aligned to the page
    In this case qcow2_co_write_zeroes() is unable to perform the operation
    and mark entire cluster as zeroed and returns ENOTSUP. Thus the caller
    switches to non-optimized version and writes real zeroes to the disk.
    The patch creates a shortcut. If the block is read as zeroes, f.e. if
    it is unallocated, the request is extended to cover full block.
    User-visible situation with this block is not changed. Before the patch
    the block is filled in the image with real zeroes. After that patch the
    block is marked as zeroed in metadata. Thus any subsequent changes in
    backing store chain are not affected.
    Kevin, thank you for a cool suggestion.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Roman Kagan <rkagan@virtuozzo.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Eric Blake ]
  * [4df863f] block: Make supported_write_flags a per-bds property.
    Pre-patch, .supported_write_flags lives at the driver level, which
    means we are blindly declaring that all block devices using a
    given driver will either equally support FUA, or that we need a
    fallback at the block layer.  But there are drivers where FUA
    support is a per-block decision: the NBD block driver is dependent
    on the remote server advertising NBD_FLAG_SEND_FUA (and has
    fallback code to duplicate the flush that the block layer would do
    if NBD had not set .supported_write_flags); and the iscsi block
    driver is dependent on the mode sense bits advertised by the
    underlying device (and is currently silently ignoring FUA requests
    if the underlying device does not support FUA).
    The fix is to make supported flags as a per-BDS option, set during
    .bdrv_open().  This patch moves the variable and fixes NBD and iscsi
    to set it only conditionally; later patches will then further
    simplify the NBD driver to quit duplicating work done at the block
    layer, as well as tackle the fact that SCSI does not support FUA
    semantics on WRITESAME(10/16) but only on WRITE(10/16).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [465fe88] block: Honor BDRV_REQ_FUA during write_zeroes.
    The block layer has a couple of cases where it can lose
    Force Unit Access semantics when writing a large block of
    zeroes, such that the request returns before the zeroes
    have been guaranteed to land on underlying media.
    SCSI does not support FUA during WRITESAME(10/16); FUA is only
    supported if it falls back to WRITE(10/16).  But where the
    underlying device is new enough to not need a fallback, it
    means that any upper layer request with FUA semantics was
    silently ignoring BDRV_REQ_FUA.
    Conversely, NBD has situations where it can support FUA but not
    ZERO_WRITE; when that happens, the generic block layer fallback
    to bdrv_driver_pwritev() (or the older bdrv_co_writev() in qemu
    2.6) was losing the FUA flag.
    The problem of losing flags unrelated to ZERO_WRITE has been
    latent in bdrv_co_do_write_zeroes() since commit aa7bfbff, but
    back then, it did not matter because there was no FUA flag.  It
    became observable when commit 93f5e6d8 paved the way for flags
    that can impact correctness, when we should have been using
    bdrv_co_writev_flags() with modified flags.  Compare to commit
    9eeb6dd, which got flag manipulation right in
    bdrv_co_do_zero_pwritev().
    Symptoms: I tested with qemu-io with default writethrough cache
    (which is supposed to use FUA semantics on every write), and
    targetted an NBD client connected to a server that intentionally
    did not advertise NBD_FLAG_SEND_FUA.  When doing 'write 0 512',
    the NBD client sent two operations (NBD_CMD_WRITE then
    NBD_CMD_FLUSH) to get the fallback FUA semantics; but when doing
    'write -z 0 512', the NBD client sent only NBD_CMD_WRITE.
    The fix is do to a cleanup bdrv_co_flush() at the end of the
    operation if any step in the middle relied on a BDS that does
    not natively support FUA for that step (note that we don't
    need to flush after every operation, if the operation is broken
    into chunks based on bounce-buffer sizing).  Each BDS gains a
    new flag .supported_zero_flags, which parallels the use of
    .supported_write_flags but only when accessing a zero write
    operation (the flags MUST be different, because of SCSI having
    different semantics based on WRITE vs. WRITESAME; and also
    because BDRV_REQ_MAY_UNMAP only makes sense on zero writes).
    Also fix some documentation to describe -ENOTSUP semantics,
    particularly since iscsi depends on those semantics.
    Down the road, we may want to add a driver where its
    .bdrv_co_pwritev() honors all three of BDRV_REQ_FUA,
    BDRV_REQ_ZERO_WRITE, and BDRV_REQ_MAY_UNMAP, and advertise
    this via bs->supported_write_flags for blocks opened by that
    driver; such a driver should NOT supply .bdrv_co_write_zeroes
    nor .supported_zero_flags.  But none of the drivers touched
    in this patch want to do that (the act of writing zeroes is
    different enough from normal writes to deserve a second
    callback).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [52a4650] nbd: Simplify client FUA handling.
    Now that the block layer honors per-bds FUA support, we don't
    have to duplicate the fallback flush at the NBD layer.  The
    static function nbd_co_writev_flags() is no longer needed, and
    the driver can just directly use nbd_client_co_writev().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Fam Zheng ]
  * [0d1c5c9] block: Invalidate all children.
    Currently we only recurse to bs->file, which will miss the children in quorum
    and VMDK.
    Recurse into the whole subtree to avoid that.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [c9e9e9c] block: Drop superfluous invalidating bs->file from drivers.
    Now they are invalidated by the block layer, so it's not necessary to
    do this in block drivers' implementations of .bdrv_invalidate_cache.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [aad0b7a] block: Inactivate all children.
    Currently we only inactivate the top BDS. Actually bdrv_inactivate
    should be the opposite of bdrv_invalidate_cache.
    Recurse into the whole subtree instead.
    Because a node may have multiple parents, and because once
    BDRV_O_INACTIVE is set for a node, further writes are not allowed, we
    cannot interleave flag settings and .bdrv_inactivate calls (that may
    submit write to other nodes in a graph) within a single pass. Therefore
    two passes are used here.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Wei Jiangang ]
  * [9036e87] iotests: fix the redirection order in 083.
    It should redirect stdout to /dev/null first,
    then redirect stderr to whatever stdout currently points at.
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Message-id: 1461665601-14908-1-git-send-email-weijg.fnst@cn.fujitsu.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Ren Kimura ]
  * [263a6f4] qemu-img: check block status of backing file when converting.
    When converting images, check the block status of its backing file chain
    to avoid needlessly reading zeros.
    Signed-off-by: Ren Kimura <rkx1209dev@gmail.com>
    Message-id: 1461773098-20356-1-git-send-email-rkx1209dev@gmail.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Wen Congyang ]
  * [e06018a] Add new block driver interface to add/delete a BDS's child.
    In some cases, we want to take a quorum child offline, and take
    another child online.
    Signed-off-by: Wen Congyang <wency@cn.fujitsu.com>
    Signed-off-by: zhanghailiang <zhang.zhanghailiang@huawei.com>
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Message-id: 1462865799-19402-2-git-send-email-xiecl.fnst@cn.fujitsu.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [98292c6] quorum: implement bdrv_add_child() and bdrv_del_child()
    Signed-off-by: Wen Congyang <wency@cn.fujitsu.com>
    Signed-off-by: zhanghailiang <zhang.zhanghailiang@huawei.com>
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Message-id: 1462865799-19402-3-git-send-email-xiecl.fnst@cn.fujitsu.com
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [7f82159] qmp: add monitor command to add/remove a child.
    The new QMP command name is x-blockdev-change. It's just for adding/removing
    quorum's child now, and doesn't support all kinds of children, all kinds of
    operations, nor all block drivers. So it is experimental now.
    Signed-off-by: Wen Congyang <wency@cn.fujitsu.com>
    Signed-off-by: zhanghailiang <zhang.zhanghailiang@huawei.com>
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Message-id: 1462865799-19402-4-git-send-email-xiecl.fnst@cn.fujitsu.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Eric Blake ]
  * [e4e12bb] qemu-io: Add missing option documentation.
    The Usage: summary is missing several options, but rather than
    having to maintain it, it's simpler to just state [OPTIONS],
    since the options are spelled out below.
    Commit 499afa2 added --image-opts, but forgot to document it in
    --help.  Likewise for commit 9e8f183 and -d/--discard.
    Commit e3aff4f6 put "-o/--offset" in the long opts, but it has
    never been honored.
    Add a note that '-n' is short for '-t none'.
    Commit 9a2d77ad killed the -C option, but forgot to undocument
    it for the 'open' subcommand.
    Finally, commit 10d9d75 removed -g/--growable, but forgot to
    cull it from the valid short options.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1462677405-4752-2-git-send-email-eblake@redhat.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [b8d970f] qemu-io: Make 'open' subcommand more like command line.
    The command line defaults to BDRV_O_UNMAP, but can use
    -d to reset it.  Meanwhile, the 'open' subcommand was
    defaulting to no discards, with no way to set it.
    The command line has both -n and -tMODE to set a variety
    of cache modes, but the 'open' subcommand had only -n.
    The 'open' subcommand had no way to set BDRV_O_NATIVE_AIO.
    Note that the 'reopen' subcommand uses '-c' where the
    command line and 'open' use -t.  Making that consistent
    would be a separate patch.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1462677405-4752-3-git-send-email-eblake@redhat.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [dc38852] qemu-io: Use bool for command line flags.
    We require a C99 compiler; let's use it to express what we
    really mean.
    (Yes, we now have an instance of 'if (bool + bool + bool > 1)',
    which, although semantically valid C, looks ugly; it gets
    cleaned up later.)
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Message-id: 1462677405-4752-4-git-send-email-eblake@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [093ea23] qemu-io: Allow unaligned access by default.
    There's no reason to require the user to specify a flag just so
    they can pass in unaligned numbers.  Keep 'read -p' and 'write -p'
    as no-ops so that I don't have to hunt down and update all users
    of qemu-io, but otherwise make their behavior default as 'read' and
    'write'.  Also fix 'write -z', 'readv', 'writev', 'writev',
    'aio_read', 'aio_write', and 'aio_write -z'.  For now, 'read -b',
    'write -b', and 'write -c' still require alignment (and 'multiwrite',
    but that's slated to die soon).
    qemu-iotest 23 is updated to match, as the only test that was
    previously explicitly expecting an error on an unaligned request.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1462677405-4752-5-git-send-email-eblake@redhat.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [770e0e0] qemu-io: Add 'write -f' to test FUA flag.
    Make it easier to test block drivers with BDRV_REQ_FUA in
    .supported_write_flags, by adding the '-f' flag to qemu-io to
    conditionally pass the flag through to specific writes ('write',
    'write -z', 'writev', 'aio_write', 'aio_write -z'). You'll want
    to use 'qemu-io -t none' to actually make -f useful (as
    otherwise, the default writethrough mode automatically sets the
    FUA bit on every write).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1462677405-4752-6-git-send-email-eblake@redhat.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [c2e001c] qemu-io: Add 'write -z -u' to test MAY_UNMAP flag.
    Make it easier to control whether the BDRV_REQ_MAY_UNMAP flag
    can be passed through a write_zeroes command, by adding the '-u'
    flag to qemu-io 'write -z' and 'aio_write -z'.  To be useful,
    the device has to be opened with BDRV_O_UNMAP (done by default
    in qemu-io, but can be made explicit with '-d unmap').
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Message-id: 1462677405-4752-7-git-send-email-eblake@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Daniel P. Berrange ]
  * [076003f] block: add support for --image-opts in block I/O tests.
    Currently all block tests use the traditional syntax for images
    just specifying a filename. To support the LUKS driver without
    resorting to JSON, the tests need to be able to use the new
    --image-opts argument to qemu-img and qemu-io.
    This introduces a new env variable IMGOPTSSYNTAX. If this is
    set to 'true', then qemu-img/qemu-io should use --image-opts.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1462896689-18450-2-git-send-email-berrange@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [b7e875b] block: add support for encryption secrets in block I/O tests.
    The LUKS block driver tests will require the ability to specify
    encryption secrets with block devices. This requires using the
    --object argument to qemu-img/qemu-io to create a 'secret'
    object.
    When the IMGKEYSECRET env variable is set, it provides the
    password to be associated with a secret called 'keysec0'
    The _qemu_img_wrapper function isn't modified as that needs
    to cope with differing syntax for subcommands, so can't be
    made to use the image opts syntax unconditionally.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1462896689-18450-3-git-send-email-berrange@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [4e9b25f] block: enable testing of LUKS driver with block I/O tests.
    This adds support for testing the LUKS driver with the block
    I/O test framework.
       cd tests/qemu-io-tests
       ./check -luks
    A handful of test cases are modified to work with luks
     - 004 - whitelist luks format
     - 012 - use TEST_IMG_FILE instead of TEST_IMG for file ops
     - 048 - use TEST_IMG_FILE instead of TEST_IMG for file ops.
             don't assume extended image contents is all zeros,
             explicitly initialize with zeros
             Make file size smaller to avoid having to decrypt
             1 GB of data.
     - 052 - don't assume initial image contents is all zeros,
             explicitly initialize with zeros
     - 100 - don't assume initial image contents is all zeros,
             explicitly initialize with zeros
    With this patch applied, the results are as follows:
      Passed: 001 002 003 004 005 008 009 010 011 012 021 032 043
              047 048 049 052 087 100 134 143
      Failed: 033 120 140 145
     Skipped: 007 013 014 015 017 018 019 020 022 023 024 025 026
              027 028 029 030 031 034 035 036 037 038 039 040 041
              042 043 044 045 046 047 049 050 051 053 054 055 056
              057 058 059 060 061 062 063 064 065 066 067 068 069
              070 071 072 073 074 075 076 077 078 079 080 081 082
              083 084 085 086 087 088 089 090 091 092 093 094 095
              096 097 098 099 101 102 103 104 105 107 108 109 110
              111 112 113 114 115 116 117 118 119 121 122 123 124
              128 129 130 131 132 133 134 135 136 137 138 139 141
              142 144 146 148 150 152
    The reasons for the failed tests are:
     - 033 - needs adapting to use image opts syntax with blkdebug
             and test image in order to correctly set align property
     - 120 - needs adapting to use correct -drive syntax for luks
     - 140 - needs adapting to use correct -drive syntax for luks
     - 145 - needs adapting to use correct -drive syntax for luks
    The vast majority of skipped tests are exercising code that is
    qcow2 specific, though a couple could probably be usefully
    enabled for luks too.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1462896689-18450-4-git-send-email-berrange@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Sascha Silbe ]
  * [5a8fabf] qemu-iotests: iotests: fail hard if not run via "check"
    Running an iotests-based Python test directly might appear to work,
    but may fail in subtle ways and is insecure:
    - It creates files with predictable file names in a world-writable
      location (/var/tmp).
    - Tests expect the environment to be set up by check. E.g. 041 and 055
      may take the wrong code paths if QEMU_DEFAULT_MACHINE is not
      set. This can lead to false negatives.
    Instead fail hard and tell the user we want to be run via "check".
    The actual environment expected by the tests is currently only defined
    by the implementation of "check". We use two of the environment
    variables set by "check" as indication of whether we're being run via
    "check". Anyone writing their own test runner (replacing "check") will
    need to replicate the full environment (in a broader sense, not just
    environment variables) provided by "check" anyway, including setting
    the two environment variables we check. Whereas a regular developer
    just trying to invoke the tests usually won't have both of these
    defined in their environment so we can catch their mistake and give
    out useful advice.
    Signed-off-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Reviewed-by: Bo Tu <tubo@linux.vnet.ibm.com>
    Message-id: 1461094442-16014-1-git-send-email-silbe@linux.vnet.ibm.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Michael S. Tsirkin ]
  * [44b31e0] ui/gtk: copy to clipboard support.
    This adds a menu item to copy current selection to clipboard.
    Seems handy for copying out guest error messages.
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Message-id: 1460924740-24513-1-git-send-email-mst@redhat.com
    [ kraxel: fix build with CONFIG_VTE=n ]
    [ kraxel: fix build with CONFIG_VTE=n, now for real ]
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [39414ef] spice/gl: add & use qemu_spice_gl_monitor_config.
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>

  [ Md Haris Iqbal ]
  * [42ddb8a] Changed malloc to g_malloc, free to g_free in ui/shader.c.
    Signed-off-by: Md Haris Iqbal <haris.phnx@gmail.com>
    Message-id: 1459862499-4768-1-git-send-email-haris.phnx@gmail.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gonglei ]
  * [f454f49] egl-helpers: fix possible resource leak.
    CID 1352419, using g_strdup_printf instead of asprintf.
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1463047028-123868-2-git-send-email-arei.gonglei@huawei.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [28f4a70] spice: fix coverity complains.
    Remove the unnecessary NULL check.
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1463047028-123868-3-git-send-email-arei.gonglei@huawei.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [a69fc69] gtk: update grab code for gtk 3.20.
    Fixes the remaining gtk 3.20 warnings.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Cole Robinson <crobinso@redhat.com>
    Tested-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 1463038146-13939-1-git-send-email-kraxel@redhat.com

  [ Emilio G. Cota ]
  * [89fee74] tb: consistently use uint32_t for tb->flags.
    We are inconsistent with the type of tb->flags: usage varies loosely
    between int and uint64_t. Settle to uint32_t everywhere, which is
    superior to both: at least one target (aarch64) uses the most significant
    bit in the u32, and uint64_t is wasteful.
    Compile-tested for all targets.
    Suggested-by: Laurent Desnogues <laurent.desnogues@gmail.com>
    Suggested-by: Richard Henderson <rth@twiddle.net>
    Tested-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Reviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Reviewed-by: Laurent Desnogues <laurent.desnogues@gmail.com>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Message-Id: <1460049562-23517-1-git-send-email-cota@braap.org>

  [ Sergey Fedorov ]
  * [18a60a7] include/qemu/osdep.h: Add a macro to check for alignment.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-2-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [6b587d3] include/qemu/osdep.h: Add macros for pointer alignment.
    These macros provide a convenient way to n-byte align pointers up and
    down and check if a pointer is n-byte aligned.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-3-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [76442a9] tci: Make direct jump patching thread-safe.
    Ensure direct jump patching in TCI is atomic by:
     * naturally aligning a location of direct jump address;
     * using atomic_read()/atomic_set() to load/store the address.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-4-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [399f164] tcg/ppc: Make direct jump patching thread-safe.
    Ensure direct jump patching in PPC is atomic by:
     * limiting translation buffer size in 32-bit mode to be addressable by
       Branch I-form instruction;
     * using atomic_read()/atomic_set() for code patching.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <1461341333-19646-5-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [0d07abf] tcg/i386: Make direct jump patching thread-safe.
    Ensure direct jump patching in i386 is atomic by:
     * naturally aligning a location of direct jump address;
     * using atomic_read()/atomic_set() for code patching.
    tcg_out_nopn() implementation:
    Suggested-by: Richard Henderson <rth@twiddle.net>.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-6-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [ed3d51e] tcg/s390: Make direct jump patching thread-safe.
    Ensure direct jump patching in s390 is atomic by:
     * naturally aligning a location of direct jump address;
     * using atomic_read()/atomic_set() for code patching.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-7-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [7d14e0e] tcg/arm: Make direct jump patching thread-safe.
    Ensure direct jump patching in ARM is atomic by using
    atomic_read()/atomic_set() for code patching.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-8-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [9e26911] tcg/aarch64: Make direct jump patching thread-safe.
    Ensure direct jump patching in AArch64 is atomic by using
    atomic_read()/atomic_set() for code patching.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-9-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [84f79fb] tcg/sparc: Make direct jump patching thread-safe.
    Ensure direct jump patching in SPARC is atomic by using
    atomic_read()/atomic_set() for code patching.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <1461341333-19646-10-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [c82460a] tcg/mips: Make direct jump patching thread-safe.
    Ensure direct jump patching in MIPS is atomic by using
    atomic_read()/atomic_set() for code patching.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1461341333-19646-11-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    [rth: Merged the deposit32 followup.]
    [rth: Merged the following followup.]
    Message-Id: <1462210518-26522-1-git-send-email-sergey.fedorov@linaro.org>
  * [10b4f48] tcg: Note requirement on atomic direct jump patching.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <1461341333-19646-12-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Emilio G. Cota ]
  * [835154b] translate-all: remove redundant setting of tcg_ctx.code_gen_buffer_size.
    The setting of tcg_ctx.code_gen_buffer_size is done by the only caller of
    size_code_gen_buffer(), which is code_gen_alloc():
      $ git grep size_code_gen_buffer
      translate-all.c:static inline size_t size_code_gen_buffer(size_t tb_size)
      translate-all.c:    tcg_ctx.code_gen_buffer_size = size_code_gen_buffer(tb_size);
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1461283314-2353-1-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [8bdf499] translate-all: add missing munmap of the code_gen guard page for MIPS.
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1461283314-2353-2-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Richard Henderson ]
  * [7ba6a51] translate-all: Adjust 256mb testing for mips64.
    Make sure we preserve the high 32-bits when masking for mips64.
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Sergey Fedorov ]
  * [f309101] tcg: Clean up direct block chaining data fields.
    Briefly describe in a comment how direct block chaining is done. It
    should help in understanding of the following data fields.
    Rename some fields in TranslationBlock and TCGContext structures to
    better reflect their purpose (dropping excessive 'tb_' prefix in
    TranslationBlock but keeping it in TCGContext):
       tb_next_offset  =>  jmp_reset_offset
       tb_jmp_offset   =>  jmp_insn_offset
       tb_next         =>  jmp_target_addr
       jmp_next        =>  jmp_list_next
       jmp_first       =>  jmp_list_first
    Avoid using a magic constant as an invalid offset which is used to
    indicate that there's no n-th jump generated.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [c37e6d7] tcg: Use uintptr_t type for jmp_list_{next|first} fields of TB.
    These fields do not contain pure pointers to a TranslationBlock
    structure. So uintptr_t is the most appropriate type for them.
    Also put some asserts to assure that the two least significant bits of
    the pointer are always zero before assigning it to jmp_list_first.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [e90d96b] tcg: Rearrange tb_link_page() to avoid forward declaration.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [901bc3d] tcg: Init TB's direct jumps before making it visible.
    Initialize TB's direct jump list data fields and reset the jumps before
    tb_link_page() puts it into the physical hash table and the physical
    page list. So TB is completely initialized before it becomes visible.
    This is pure rearrangement of code to a more suitable place, though it
    could be a preparation for relaxing the locking scheme in future.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [9962c47] tcg: Clarify thread safety check in tb_add_jump()
    The check is to make sure that another thread hasn't already done the
    same while we were outside of tb_lock. Mention this in a comment.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [1336267] tcg: Rename tb_jmp_remove() to tb_remove_from_jmp_list()
    tb_jmp_remove() was only used to remove the TB from a list of all TBs
    jumping to the same TB which is n-th jump destination of the given TB.
    Put a comment briefly describing the function behavior and rename it to
    better reflect its purpose.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [89bba49] tcg: Extract removing of jumps to TB from tb_phys_invalidate()
    Move the code for removing jumps to a TB out of tb_phys_invalidate() to
    a separate static inline function tb_jmp_unlink(). This simplifies
    tb_phys_invalidate() and improves code structure.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [f9c5b66] tcg: Clean up tb_jmp_unlink()
    Unify the code of this function with tb_jmp_remove_from_list(). Making
    these functions similar improves their readability. Also this could be a
    step towards making this function thread-safe.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [5b053a4] tcg: Clean up direct block chaining safety checks.
    We don't take care of direct jumps when address mapping changes. Thus we
    must be sure to generate direct jumps so that they always keep valid
    even if address mapping changes. Luckily, we can only allow to execute a
    TB if it was generated from the pages which match with current mapping.
    Document tcg_gen_goto_tb() declaration and note the reason for
    destination PC limitations.
    Some targets with variable length instructions allow TB to straddle a
    page boundary. However, we make sure that both of TB pages match the
    current address mapping when looking up TBs. So it is safe to do direct
    jumps into the both pages. Correct the checks for some of those targets.
    Given that, we can safely patch a TB which spans two pages. Remove the
    unnecessary check in cpu_exec() and allow such TBs to be patched.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [90aa39a] tcg: Allow goto_tb to any target PC in user mode.
    In user mode, there's only a static address translation, TBs are always
    invalidated properly and direct jumps are reset when mapping change.
    Thus the destination address is always valid for direct jumps and
    there's no need to restrict it to the pages the TB resides in.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Cc: Riku Voipio <riku.voipio@iki.fi>
    Cc: Blue Swirl <blauwirbel@gmail.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Paolo Bonzini ]
  * [6fad459] tcg: code_bitmap and code_write_count are not used by user-mode emulation.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [Sergey Fedorov: eliminate the field entirely in user-mode]
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson  <rth@twiddle.net>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    [rth: merged followup fixup]
    Message-Id: <1462982777-4513-1-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Alex Bennée ]
  * [1279f32] tcg: reorganize tb_find_physical loop.
    Put some comments and improve code structure. This should help reading
    the code.
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    [Sergey Fedorov: provide commit message; bring back resetting of
    tb_invalidated_flag]
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson  <rth@twiddle.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Paolo Bonzini ]
  * [7687bf5] cpu-exec: elide more icount code if CONFIG_USER_ONLY.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [Alex Bennée: #ifndef replay code to match elided functions]
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Sergey Fedorov ]
  * [819af24] tcg: Clean up from 'next_tb'
    The value returned from tcg_qemu_tb_exec() is the value passed to the
    corresponding tcg_gen_exit_tb() at translation time of the last TB
    attempted to execute. It is a little confusing to store it in a variable
    named 'next_tb'. In fact, it is a combination of 4-byte aligned pointer
    and additional information in its two least significant bits. Break it
    down right away into two variables named 'last_tb' and 'tb_exit' which
    are a pointer to the last TB attempted to execute and the TB exit
    reason, correspondingly. This simplifies the code and improves its
    readability.
    Correct a misleading documentation comment for tcg_qemu_tb_exec() and
    fix logging in cpu_tb_exec(). Also rename a misleading 'next_tb' in
    another couple of places.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [6f789be] tcg: Rework tb_invalidated_flag
    'tb_invalidated_flag' was meant to catch two events:
     * some TB has been invalidated by tb_phys_invalidate();
     * the whole translation buffer has been flushed by tb_flush().
    Then it was checked:
     * in cpu_exec() to ensure that the last executed TB can be safely
       linked to directly call the next one;
     * in cpu_exec_nocache() to decide if the original TB should be provided
       for further possible invalidation along with the temporarily
       generated TB.
    It is always safe to patch an invalidated TB since it is not going to be
    used anyway. It is also safe to call tb_phys_invalidate() for an already
    invalidated TB. Thus, setting this flag in tb_phys_invalidate() is
    simply unnecessary. Moreover, it can prevent from pretty proper linking
    of TBs, if any arbitrary TB has been invalidated. So just don't touch it
    in tb_phys_invalidate().
    If this flag is only used to catch whether tb_flush() has been called
    then rename it to 'tb_flushed'. Declare it as 'bool' and stick to using
    only 'true' and 'false' to set its value. Also, instead of setting it in
    tb_gen_code(), just after tb_flush() has been called, do it right inside
    of tb_flush().
    In cpu_exec(), this flag is used to track if tb_flush() has been called
    and have made 'next_tb' (a reference to the last executed TB) invalid
    for linking it to directly call the next TB. tb_flush() can be called
    during the CPU execution loop from tb_gen_code(), during TB execution or
    by another thread while 'tb_lock' is released. Catch for translation
    buffer flush reliably by resetting this flag once before first TB lookup
    and each time we find it set before trying to add a direct jump. Don't
    touch in in tb_find_physical().
    Each vCPU has its own execution loop in multithreaded mode and thus
    should have its own copy of the flag to be able to reset it with its own
    'next_tb' and don't affect any other vCPU execution thread. So make this
    flag per-vCPU and move it to CPUState.
    In cpu_exec_nocache(), we only need to check if tb_flush() has been
    called from tb_gen_code() called by cpu_exec_nocache() itself. To do
    this reliably, preserve the old value of the flag, reset it before
    calling tb_gen_code(), check afterwards, and combine the saved value
    back to the flag.
    This patch is based on the patch "tcg: move tb_invalidated_flag to
    CPUState" from Paolo Bonzini <pbonzini@redhat.com>.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [a0522c7] cpu-exec: Move TB chaining into tb_find_fast()
    Move tb_add_jump() call and surrounding code from cpu_exec() into
    tb_find_fast(). That simplifies cpu_exec() a little by hiding the direct
    chaining optimization details into tb_find_fast(). It also allows to
    move tb_lock()/tb_unlock() pair into tb_find_fast(), putting it closer
    to tb_find_slow() which also manipulates the lock.
    Suggested-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    [rth: Fixed rebase typo in nochain test.]
  * [3213525] tcg: Remove needless CPUState::current_tb.
    This field was used for telling cpu_interrupt() to unlink a chain of TBs
    being executed when it worked that way. Now, cpu_interrupt() don't do
    this anymore. So we don't need this field anymore.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1462273462-14036-1-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [c6f0d9f] cpu-exec: Remove relic orphaned comment.
    This comment should have been deleted by commit 0ac087f1f3ae ("removed
    unused code") but somehow it is still here. There's no point to keep it.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1462286050-21778-1-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [8b2d34e] cpu-exec: Move halt handling out of cpu_exec()
    Simplify cpu_exec() by extracting CPU halt state handling code out of
    cpu_exec() into a new static inline function cpu_handle_halt().
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Message-Id: <1462962111-32237-2-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [ea28476] cpu-exec: Move exception handling out of cpu_exec()
    Simplify cpu_exec() by extracting exception handling code out of
    cpu_exec() into a new static inline function cpu_handle_exception().
    Also make cpu_handle_debug_exception() inline as it is used only once.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Message-Id: <1462962111-32237-3-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [c385e6e] cpu-exec: Move interrupt handling out of cpu_exec()
    Simplify cpu_exec() by extracting interrupt handling code outside of
    cpu_exec() into a new static inline function cpu_handle_interrupt().
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson  <rth@twiddle.net>
    Message-Id: <1462962111-32237-4-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [928de9e] cpu-exec: Move TB execution stuff out of cpu_exec()
    Simplify cpu_exec() by extracting TB execution code outside of
    cpu_exec() into a new static inline function cpu_loop_exec_tb().
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Message-Id: <1462962111-32237-5-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [ba048a4] cpu-exec: Remove unused 'x86_cpu' and 'env' from cpu_exec()
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Message-Id: <1462962111-32237-6-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [8b1fe3f] cpu-exec: Clean up 'interrupt_request' reloading in cpu_handle_interrupt()
    Suggested-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1463071937-26607-1-git-send-email-sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ xiaoqiang.zhao ]
  * [7fe91a5] hw/display: QOM'ify jazz_led.c
    * Drop the old SysBus init function and use instance_init
    * Move graphic_console_init into realize stage
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Alberto Garcia ]
  * [6978dc4] gtk: don't leak the GtkBorder with VTE 0.36.
    When gtk_widget_style_get() is used to get the "inner-border" style
    property, it returns a copy of the GtkBorder which must be freed by
    the caller.
    This patch also fixes a warning about the unused 'padding' structure
    with VTE 0.36.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Message-id: 1463127654-5171-1-git-send-email-berto@igalia.com
    Cc: Cole Robinson <crobinso@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    [ kraxel: adapted to changes in ui patch queue ]
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Thomas Huth ]
  * [cebee21] slirp: Clean up slirp_config.h.
    There are a lot of unused #defines / #undefs in slirp_config.h,
    which are apparently left-overs from the very early slirp code.
    Since there is no more code that uses them, let's simply remove
    them from our version of slirp.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
  * [5469fea] slirp: Remove obsolete backward-compatibility cruft.
    The slirp code does not use index() and gethostid() anymore,
    so these parts can be removed without problems.
    memmove() and strerror() should be available on each of the
    supported platforms nowadays, too, so these wrappers are also
    not needed anymore.
    And we certainly also do not support Ultrix anymore, so no
    need to keep the code for this platform anymore.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
  * [2cdc848] slirp: Remove some unused code from slirp.h.
    These hunks are apparently not used anymore, so let's delete them.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
  * [9892663] slirp: Clean up osdep.h related header inclusions
    qemu/osdep.h is included in some headers twice - one time
    should be sufficient.
    Also remove the inclusion of time.h since that is already
    done by osdep.h, too (this makes scripts/clean-includes
    happy again).
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>

  [ Changlong Xie ]
  * [de3e15a] rfifolock: no need to get thread identifier when nesting.
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Message-id: 1462874348-32396-1-git-send-email-xiecl.fnst@cn.fujitsu.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Hollis Blanchard ]
  * [2531088] hw/intc/arm_gic: add tracepoints.
    These are obviously critical to understanding interrupt delivery:
    gic_enable_irq
    gic_disable_irq
    gic_set_irq (inbound irq from device models)
    gic_update_set_irq (outbound irq to CPU)
    gic_acknowledge_irq
    The only one that I think might raise eyebrows is gic_update_bestirq, but I've
    (sadly) debugged problems that ended up being caused by unexpected priorities.
    Knowing that the GIC has an irq ready, but doesn't deliver to the CPU due to
    priority, has also proven important.
    Signed-off-by: Hollis Blanchard <hollis_blanchard@mentor.com>
    Message-id: 1461252281-22399-1-git-send-email-hollis_blanchard@mentor.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Cornelia Huck ]
  * [946e55f] s390x: add compat machine for 2.7.
    Also add some of the option cascading we were missing.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Fan Zhang ]
  * [9700230] s390x: enable runtime instrumentation.
    Introduce run-time-instrumentation support when running under kvm for
    virtio-ccw 2.7 machine and make sure older machines can not enable it.
    The new ri_allowed field in the s390MachineClass serves as an indicator
    whether the feature can be used by the machine and should therefore be
    activated if available.
    riccb_needed() is used to check whether riccb is needed or not in live
    migration.
    Signed-off-by: Fan Zhang <zhangfan@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Alexander Yarygin ]
  * [04ca4b9] s390x/ipl: Extend the IplParameterBlock struct.
    The IplParameterBlock struct currently has only 200 bytes filled, but it
    can be up to 4K.
    This patch converts the struct to union with a fully populated struct
    inside it and second struct with old values.
    For compatibility reasons we disable migration of the extended iplb
    field for pre-2.7 machines. Also a guest still can read/write only the
    first 200 bytes of IPLB for now.
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [9946a91] s390x/ipl: Add type and length checks for IplParameterBlock values.
    We can check for valid type and lengths of the IplParameterBlock fields
    when receiving the struct from the guest.
    Length of the IplParameterBlock can be less than 4K. To play safe we can
    read and write only required amount of data.
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Reviewed-by: David Hildenband <dahi@linux.vnet.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [6aed958] s390x/ipl: Provide ipl parameter block.
    Right now we return the ipl parameter block only if the guest
    specified one. Let's fill in the parameter block when bootindex
    parameter is available and not booting from an external kernel.
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [3041e3b] s390x/ipl: Add ssid field to IplParameterBlock.
    Add the ssid field to the ipl parameter block struct and fill it when
    necessary so the guest can use it.
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [d046c51] pc-bios/s390-ccw: Get device address via diag 308/6.
    To IPL from a device, pc-bios receives from qemu a device address via
    general register 7. The better way to do it is to use diag308/6
    instruction which returns so called
    "IplParameterBlock". IplParameterBlock contains the device address for
    IPL and additional parameters that can be used by pc-bios.
    This patch allows pc-bios to get device address via diag308/6 and
    doesn't use gr7 passed boot information anymore.
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Cornelia Huck ]
  * [a388ac7] s390-ccw.img: rebuild image.
    Contains the following change:
    pc-bios/s390-ccw: Get device address via diag 308/6
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Alexander Yarygin ]
  * [010d45d] s390x/ipl: Remove redundant usage of gr7.
    We don't need to pass device address for pc-bios using gr7 anymore as
    the pcbios completely relies on diag308 now, so we can remove it from
    qemu. devno, ssid and cssid are migrated but the value was never reused,
    so we can safely ignore these fields and migrate 0.
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ xiaoqiang zhao ]
  * [e563c59] hw/char: QOM'ify sclpconsole-lm.c.
    Drop the DO_UPCAST macro
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-Id: <1459237645-17227-6-git-send-email-zxq_yx_007@163.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [3f6ec64] hw/char: QOM'ify sclpconsole.c.
    Drop the DO_UPCAST macro
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-Id: <1459237645-17227-7-git-send-email-zxq_yx_007@163.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Yi Min Zhao ]
  * [bac45d5] s390x/pci: fix reg_irqs()
    In reg_irqs(), present code assumes that map_indicator() always issues
    successfully. Let's check it and return the error to caller in order to
    inform guest.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Reviewed-by: Dong Jia Shi <bjsdjshi@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [8f5cb69] s390x/pci: separate s390_sclp_configure function.
    Split s390_sclp_configure() into separate functions for sclp
    configuring and deconfiguring in order to make the code more readable.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [7158388] s390x/pci: separate s390_pcihost_iommu_configure function.
    Split s390_pcihost_iommu_configure() into separate functions for
    configuring and deconfiguring in order to make the code more readable.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [e141dba] s390x/pci: export pci_dereg_ioat and pci_dereg_irqs
    dereg_irqs and dereg_ioat are needed by external functions. Let's
    rename and export both of them in s390-pci-inst.h.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [df6a050] s390x/pci: introduce S390PCIBusDevice.iommu_enabled.
    We introduce iommu_enabled field for S390PCIBusDevice struct to
    track whether the iommu has been enabled for the device. This allows
    us to stop temporarily changing ->configured while en/disabling the
    iommu and to do conditional cleanup later.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [259a4f0] s390x/pci: fix s390_pci_sclp_deconfigure.
    When deconfiguring a s390 pci device, we should deconfigure the
    corresponding IOMMU memory region and the IRQs for the device.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [a6d9d4f] s390x/pci: enhance mpcifc_service_call.
    Enhance error handling for mpcifc_service_call() to propagate errors
    to guest by setting status codes or triggering program interrupts.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [3b40ea2] s390x/pci: add length checking for pci sclp handlers.
    The configure/deconfigure sclp commands need a SCCB with a length of
    at least 16. Indicate in the response code if this is not fulfilled.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [c269169] s390x/pci: remove whitespace.
    Fix indentation of PciCfgSccb struct.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Michael Tokarev ]
  * [f35c1f6] s390: remove misleading comment.
    The comment talks about a non-ELF object while the
    example gives ELF object.
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Cao jin ]
  * [ec60965] remove comment for nonexistent structure member.
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [ed2f3bc] loader: fix potential memory leak.
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Wei Jiangang ]
  * [37a3e63] vl: fix comment about when parsing cpu definitions
    machine->init() was replaced with machine_class->init()
    in 958db90cd54823c33345000c995453a8c9b7a005.
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Stefan Weil ]
  * [1d817db] Fix typo in variable name (found and fixed by codespell)
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Peter Xu ]
  * [de4905f] qdict: fix unbounded stack warning for qdict_array_entries.
    Here we use one g_strdup_printf() to replace the two stack allocated
    array, considering it's more convenient, safe, and as long as it's
    called rarely only when quorum device opens. This will remove the
    unbound stack warning when compiling with "-Wstack-usage=1000000".
    Reviewed-by:   Eric Blake <eblake@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Wei Jiangang ]
  * [d43eda3] util: fix comment typos.
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Alberto Garcia ]
  * [b996aed] ipack: Update e-mail address.
    I'm not really using the old one anymore.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Stefan Weil ]
  * [3f3b538] configure: Use uniform description for devel packages.
    As all other devel packages are written in the form "name devel",
    use this form for libcap devel and libattr devel, too.
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Wei Jiangang ]
  * [bdc3f61] accel: make configure_accelerator return void.
    Return the negated value of accel_initialised is meaningless,
    and the caller vl doesn't check it.
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Cao jin ]
  * [cc2324d] smbios: fix typo.
    The spec says: "on paragraph (16-byte) boundaries"
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Greg Kurz ]
  * [d506dc8] 9p: drop unused declaration from coth.h.
    Commit "ebac1202c95a virtio-9p: use QEMU thread pool" dropped function
    v9fs_init_worker_threads.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Stefan Weil ]
  * [cb8d4c8] Fix some typos found by codespell.
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Paolo Bonzini ]
  * [f115a19] scripts: add script to build QEMU and analyze inclusions.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [b01501d] s390x: move .needed functions for subsections to machine.c.
    These functions are only used when defining subsections, so move
    them there.
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [4b4629d] include: move CPU-related definitions out of qemu-common.h.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f2937a3] log: do not use CONFIG_USER_ONLY.
    This decouples logging further from config-target.h
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [347b1a5] cpu: make cpu-qom.h only include-able from cpu.h.
    Make cpu-qom.h so that it is only included from cpu.h.  Then there
    is no need for it to include cpu.h again.
    Later we will make cpu-qom.h target independent and we will _want_
    to include it from elsewhere, but for now reduce the number of cases
    to handle.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1dc8e6b] target-alpha: make cpu-qom.h not target specific.
    Make AlphaCPU an opaque type within cpu-qom.h, and move all definitions
    of private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [74e7556] target-arm: make cpu-qom.h not target specific.
    Make ARMCPU an opaque type within cpu-qom.h, and move all definitions of
    private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [28618ac] target-cris: make cpu-qom.h not target specific.
    Make CRISCPU an opaque type within cpu-qom.h, and move all definitions of
    private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [4da6f8d] target-i386: make cpu-qom.h not target specific.
    Make X86CPU an opaque type within cpu-qom.h, and move all definitions of
    private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [6adb9c5] target-lm32: make cpu-qom.h not target specific.
    Make LM32CPU an opaque type within cpu-qom.h, and move all definitions of
    private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [a836b8f] target-m68k: make cpu-qom.h not target specific.
    Make M68KCPU an opaque type within cpu-qom.h, and move all definitions of
    private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [ffa3a3c] target-microblaze: make cpu-qom.h not target specific.
    Make MicroBlazeCPU an opaque type within cpu-qom.h, and move all
    definitions of private methods, as well as all type definitions that
    require knowledge of the layout to cpu.h.  This helps making files
    independent of NEED_CPU_H if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [416bf93] target-mips: make cpu-qom.h not target specific.
    Make MIPSCPU an opaque type within cpu-qom.h, and move all definitions of
    private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [b230560] target-ppc: do not use target_ulong in cpu-qom.h.
    Bring the PowerPCCPUClass handle_mmu_fault method type into line with
    the one in CPUClass.
    Using vaddr also makes the cpu-qom.h file target independent.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [c771dab] target-ppc: do not make PowerPCCPUClass depend on target-specific symbols.
    Just leave some members in even if they are unused on e.g.
    32-bit PPC or user-mode emulation.  This avoids complications
    when using PowerPCCPUClass in code that is compiled just
    once (because it applies to both 32-bit and 64-bit PPC
    for example) but still needs to peek at PPC-specific members.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [2d34fe3] target-ppc: make cpu-qom.h not target specific.
    Make PowerPCCPU an opaque type within cpu-qom.h, and move all definitions
    of private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  Conversely, move all definitions needed to define
    a class to cpu-qom.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [a4a02f9] target-s390x: make cpu-qom.h not target specific.
    Make S390XCPU an opaque type within cpu-qom.h, and move all definitions
    of private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [e6005f6] target-sh4: make cpu-qom.h not target specific.
    Make SuperHCPU an opaque type within cpu-qom.h, and move all definitions
    of private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [d61d1b2] target-sparc: make cpu-qom.h not target specific.
    Make SPARCCPU an opaque type within cpu-qom.h, and move all definitions
    of private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [fc111b1] target-tricore: make cpu-qom.h not target specific.
    Make TriCoreCPU an opaque type within cpu-qom.h, and move all definitions
    of private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  This helps making files independent of NEED_CPU_H
    if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [55b1142] target-unicore32: make cpu-qom.h not target specific.
    Make UniCore32CPU an opaque type within cpu-qom.h, and move all
    definitions of private methods, as well as all type definitions that
    require knowledge of the layout to cpu.h.  This helps making files
    independent of NEED_CPU_H if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [da37426] target-xtensa: make cpu-qom.h not target specific.
    Make XtensaCPU an opaque type within cpu-qom.h, and move all definitions
    of private methods, as well as all type definitions that require knowledge
    of the layout to cpu.h.  Conversely, move all definitions needed to
    define a class to cpu-qom.h.  This helps making files independent of
    NEED_CPU_H if they only need to pass around CPU pointers.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [16fd646] arm: include cpu-qom.h in files that require ARMCPU.
    This will keep things working when cpu.h will not be included
    indirectly almost everywhere (either directly or through
    qemu-common.h).
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [4669fcc] m68k: include cpu-qom.h in files that require M68KCPU.
    This will keep things working when cpu.h will not be included
    indirectly almost everywhere (either directly or through
    qemu-common.h).
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [b4c1c6f] sh4: include cpu-qom.h in files that require SuperHCPU.
    This will keep things working when cpu.h will not be included
    indirectly almost everywhere (either directly or through
    qemu-common.h).
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [0774831] alpha: include cpu-qom.h in files that require AlphaCPU.
    This will keep things working when cpu.h will not be included
    indirectly almost everywhere (either directly or through
    qemu-common.h).
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [5a975d4] mips: use MIPSCPU instead of CPUMIPSState.
    This changes a cpu.h dependency into a cpu-qom.h dependency.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [aa5a9e2] ppc: use PowerPCCPU instead of CPUPPCState.
    This changes a cpu.h dependency for hw/ppc/ppc.h into a cpu-qom.h
    dependency.  For it to compile we also need to clean up a few unused
    definitions.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8ea952d] arm: remove useless cpu.h inclusion.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [7d0c99a] explicitly include qom/cpu.h
    exec/cpu-all.h includes qom/cpu.h.  Explicit inclusion
    will keep things working when cpu.h will not be included
    indirectly almost everywhere (either directly or through
    qemu-common.h).
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [3b3d264] explicitly include hw/qdev-core.h
    exec/cpu-all.h includes qom/cpu.h, which includes hw/qdev-core.h.
    Explicit inclusion will keep things working when cpu.h will not be
    included indirectly almost everywhere (either directly or through
    qemu-common.h).
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [e81096b] explicitly include linux/kvm.h.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [d613f8c] apic: move target-dependent definitions to cpu.h.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [bdd9022] include: poison symbols in osdep.h.
    Ensure that all target-independent files ignore poisoned symbols,
    and fix the fallout.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [cbd62f8] hw: do not use VMSTATE_*TL.
    Reserve this to CPU state serialization.
    Luckily, they were only used by sPAPR devices and these are ppc64
    only.  So there is no change to migration format.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1e00b8d] hw: move CPU state serialization to migration/cpu.h.
    Remove usage of NEED_CPU_H from hw/hw.h.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [741da0d] hw: cannot include hw/hw.h from user emulation.
    All qdev definitions are available from other headers, user-mode
    emulation does not need hw/hw.h.
    By considering system emulation only, it is simpler to disentangle
    hw/hw.h from NEED_CPU_H.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [a7d6039] cpu: move endian-dependent load/store functions to cpu-all.h.
    Disentangle cpu-common.h and memory.h from NEED_CPU_H.  Prototypes are
    not defined for !NEED_CPU_H, so remove them from poison.h too.  Only
    macros need poisoning.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [58369e2] qemu-common: stop including qemu/bswap.h from qemu-common.h.
    Move it to the actual users.  There are still a few includes of
    qemu/bswap.h in headers; removing them is left for future work.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [87776ab] qemu-common: stop including qemu/host-utils.h from qemu-common.h.
    Move it to the actual users.  There are some inclusions of
    qemu/host-utils.h in headers, but they are all necessary.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [da16384] gdbstub: remove unnecessary includes from gdbstub-xml.c
    gdbstub-xml.c defines a bunch of arrays of strings; there is no
    need to include anything.  Keep osdep.h for consistency, but remove
    the rest.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [77ac58d] dma: do not depend on kvm_enabled()
    Memory barriers are needed also by Xen and, when the ioeventfd
    bugs are fixed, by TCG as well.
    sysemu/kvm.h is not anymore needed in sysemu/dma.h, move it to
    the actual users.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [bd3f16a] s390x: reorganize CSS bits between cpu.h and other headers.
    Move cpu_inject_* to the only C file where they are used.
    Move ioinst.h declarations that need S390CPU to cpu.h, to make
    ioinst.h independent of cpu.h.
    Move channel declarations that only need SubchDev from cpu.h
    to css.h, to make more channel users independent of cpu.h.
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [35c5a52] acpi: do not use TARGET_PAGE_SIZE.
    This is a #define used by the CPU.  NVDIMM can just use 4K
    unconditionally.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [33c1187] qemu-common: push cpu.h inclusion out of qemu-common.h.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [27a7ea8] arm: move arm_log_exception into .c file.
    Avoid need for qemu/log.h inclusion, and make the function static too.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [e6623d8] mips: move CP0 functions out of cpu.h.
    These are here for historical reasons: they are needed from both gdbstub.c
    and op_helper.c, and the latter was compiled with fixed AREG0.  It is
    not needed anymore, so uninline them.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [03dd024] hw: explicitly include qemu/log.h.
    Move the inclusion out of hw/hw.h, most files do not need it.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [00f6da6] exec: extract exec/tb-context.h.
    TCG backends do not need most of exec-all.h; extract what they actually
    need to a separate file or move it directly to tcg.h.  The next patch
    will stop including exec-all.h from everywhere.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [63c9155] cpu: move exec-all.h inclusion out of cpu.h
    exec-all.h contains TCG-specific definitions.  It is not needed outside
    TCG-specific files such as translate.c, exec.c or *helper.c.
    One generic function had snuck into include/exec/exec-all.h; move it to
    include/qom/cpu.h.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [89a80e7] hw: remove pio_addr_t
    pio_addr_t is almost unused, because these days I/O ports are simply
    accessed through the address space.  cpu_{in,out}[bwl] themselves are
    almost unused; monitor.c and xen-hvm.c could use address_space_read/write
    directly, since they have an integer size at hand.  This leaves qtest as
    the only user of those functions.
    On the other hand even portio_* functions use this type; the only
    interesting use of pio_addr_t thus is include/hw/sysbus.h.  I guess I
    could move it there, but I don't see much benefit in that either.  Using
    uint32_t is enough and avoids the need to include ioport.h everywhere.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [df43d49] hw: clean up hw/hw.h includes.
    Include qom/object.h and exec/memory.h instead of exec/ioport.h;
    exec/ioport.h was almost everywhere required only for those two
    includes, not for the content of the header itself.
    Remove block/aio.h, everybody is already including it through
    another path.
    With this change, include/hw/hw.h is freed from qemu-common.h.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Kevin Wolf ]
  * [a561499] block: Make sure throttled BDSes always have a BB.
    It was already true in principle that a throttled BDS always has a BB
    attached, except that the order of operations while attaching or
    detaching a BDS to/from a BB wasn't careful enough.
    This commit breaks graph manipulations while I/O throttling is enabled.
    It would have been possible to keep things working with some temporary
    hacks, but quite cumbersome, so it's not worth the hassle. We'll fix
    things again in a minute.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [f2cd875] block: Introduce BlockBackendPublic.
    Some features, like I/O throttling, are implemented outside
    block-backend.c, but still want to keep information in BlockBackend,
    e.g. list entries that allow keeping a list of BlockBackends.
    In order to avoid exposing the whole struct layout in the public header
    file, this patch introduces an embedded public struct where such
    information can be added and a pair of functions to convert between
    BlockBackend and BlockBackendPublic.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [31dce3c] block: throttle-groups: Use BlockBackend pointers internally.
    As a first step towards moving I/O throttling to the BlockBackend level,
    this patch changes all pointers in struct ThrottleGroup from referencing
    a BlockDriverState to referencing a BlockBackend.
    This change is valid because we made sure that throttling can only be
    enabled on BDSes which have a BB attached.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [49d2165] block: Convert throttle_group_get_name() to BlockBackend.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [27ccdd5] block: Move throttling fields from BDS to BB.
    This patch changes where the throttling state is stored (used to be the
    BlockDriverState, now it is the BlockBackend), but it doesn't actually
    make it a BB level feature yet. For example, throttling is still
    disabled when the BDS is detached from the BB.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [441565b] block: Move actual I/O throttling to BlockBackend.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [9714807] block: Move I/O throttling configuration functions to BlockBackend.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [22aa8b2] block: Introduce BdrvChild.opaque.
    BlockBackends use it to get a back pointer from BdrvChild to
    BlockBackend in any BdrvChildRole callbacks.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [c2066af] block: Drain throttling queue with BdrvChild callback.
    This removes the last part of I/O throttling from block/io.c and moves
    it to the BlockBackend.
    Instead of having knowledge about throttling inside io.c, we can call a
    BdrvChild callback .drained_begin/end, which happens to drain the
    throttled requests for BlockBackend parents.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [bb9aaec] block/io: Quiesce parents between drained_begin/end.
    So far, bdrv_parent_drained_begin/end() was called for the duration of
    the actual bdrv_drain() at the beginning of a drained section, but we
    really should keep parents quiesced until the end of the drained
    section.
    This does not actually change behaviour at this point because the only
    user of the .drained_begin/end BdrvChildRole callback is I/O throttling,
    which already doesn't send any new requests after flushing its queue in
    .drained_begin. The patch merely removes a trap for future users.
    Reported-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [7ca7f0f] block: Decouple throttling from BlockDriverState.
    This moves the throttling related part of the BDS life cycle management
    to BlockBackend. The throttling group reference is now kept even when no
    medium is inserted.
    With this commit, throttling isn't disabled and then re-enabled any more
    during graph reconfiguration. This fixes the temporary breakage of I/O
    throttling when used with live snapshots or block jobs that manipulate
    the graph.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [08e83aa] block: Remove bdrv_move_feature_fields()
    bdrv_move_feature_fields() and swap_feature_fields() are empty now, they
    can be removed.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [b26ded9] Revert "block: Forbid I/O throttling on nodes with multiple parents for 2.6"
    This reverts commit 76b223200ef4fb09dd87f0e213159795eb68e7a5.
    Now that I/O throttling is fully done on the BlockBackend level, there
    is no reason any more to block I/O throttling for nodes with multiple
    parents as the parents don't influence each other any more.
    Conflicts:
    	block.c
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [cbe1beb] block: Don't check throttled reqs in bdrv_requests_pending()
    Checking whether there are throttled requests requires going to the
    associated BlockBackend, which we want to avoid.
    All users of bdrv_requests_pending() in block/io.c already call
    bdrv_parent_drained_begin() first, which restarts all throttled
    requests, so no throttled requests can be left here and this is removal
    of dead code.
    The remaining users (assertions during graph manipulation in block.c)
    don't care about requests that are still queued in the BlockBackend and
    haven't been issued for a BlockDriverState yet.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [5c8cab4] block: Use BdrvChild callbacks for change_media/resize.
    We want to get rid of BlockDriverState.blk in order to allow multiple
    BlockBackends per BDS. Converting the device callbacks in block.c (which
    assume a single BlockBackend) to per-child callbacks gets us rid of the
    first few instances.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [4c265bf] block: User BdrvChild callback for device name.
    In order to get rid of bs->blk for bdrv_get_device_name() and
    bdrv_get_device_or_node_name(), ask all parents for their name and
    simply pick the first one.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [81e254d] blockjob: Don't set iostatus of target.
    When block job errors were introduced, we assigned the iostatus of the
    target BDS "just in case". The field has never been accessible for the
    user because the target isn't listed in query-block.
    Before we can allow the user to have a second BlockBackend on the
    target, we need to clean this up. If anything, we would want to set the
    iostatus for the internal BB of the job (which we can always do later),
    but certainly not for a separate BB which the job doesn't even use.
    As a nice side effect, this gets us rid of another bs->blk use.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [66a0fae] blockjob: Don't touch BDS iostatus.
    Block jobs don't actually make use of the iostatus for their BDSes, but
    they manage a separate block job iostatus. Still, they require that it
    is enabled for the source BDS and they enable it automatically for the
    target and set the error handling mode - which ends up never being used
    by the job.
    This patch removes all of the BDS iostatus handling from the block job,
    which removes another few bs->blk accesses.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [91c6e4b] block: Remove bdrv_aio_multiwrite()
    Since virtio-blk implements request merging itself these days, the only
    remaining users are test cases for the function. That doesn't make the
    function exactly useful any more.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [dde3381] block: Add bdrv_has_blk()
    In many cases we just want to know whether a BDS has at least one BB
    attached, without needing to know the exact BB that is attached. In
    contrast to bs->blk, this is still a valid question when more than one
    BB can be attached, so just answer it by checking the parents list.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [7c8eece] block: Avoid bs->blk in bdrv_next()
    We need to introduce a separate BdrvNextIterator struct that can keep
    more state than just the current BDS in order to avoid using the bs->blk
    pointer.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [79c719b] block: Don't return throttling info in query-named-block-nodes
    query-named-block-nodes should not return information that is related
    to the attached BlockBackend rather than the node itself, so throttling
    information needs to be removed from it.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [1f0c461] block: Remove BlockDriverState.blk.
    This patch removes the remaining users of bs->blk, which will allow us
    to have multiple BBs on top of a single BDS. In the meantime, all checks
    that are currently in place to prevent the user from creating such
    setups can be switched to bdrv_has_blk() instead of accessing BDS.blk.
    Future patches can allow them and e.g. enable users to mirror to a block
    device that already has a BlockBackend on it.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>

  [ Max Reitz ]
  * [b97511c] block: Propagate AioContext change to all children.
    Instead of propagating any change of a BDS's AioContext only to its file
    and backing children and letting driver-specific code do the rest, just
    propagate it to all and drop the thus superfluous implementations of
    bdrv_{at,de}tach_aio_context() in Quorum, blkverify and VMDK.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Denis V. Lunev ]
  * [f575f14] qcow2: fix condition in is_zero_cluster.
    We should check for (res & BDRV_BLOCK_ZERO) only. The situation when we
    will have !(res & BDRV_BLOCK_DATA) and will not have BDRV_BLOCK_ZERO is
    not possible for images with bdi.unallocated_blocks_are_zero == true.
    For those images where it's false, however, it can happen and we must
    not consider the data zeroed then or we would corrupt the image.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [5efdf53] qcow2: Fix write_zeroes with partially allocated backing file cluster.
    In order to correctly check whether a given cluster is read as zero, we
    don't only need to check whether bdrv_get_block_status_above() sets
    BDRV_BLOCK_ZERO, but also if all sectors for the whole cluster have the
    same status.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
  * [1ef7d01] qemu-iotests: Some more write_zeroes tests.
    This covers some more write_zeroes cases which are relevant for the
    recent qcow2 optimisations that check the allocation status of the
    backing file for partial cluster write_zeroes requests.
    This needs to be separate from 034 because we can only support qcow2 in
    this test case for multiple reasons: We check the allocation status
    after write_zeroes with 'qemu-img map' and the optimised behaviour that
    produces zero clusters is only implemented in qcow2; second, the map
    command returns offsets that are qcow2 specific; and finally, we also
    use 512 byte clusters which aren't supported for formats like qed.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>

  [ John Snow ]
  * [3a3086b] block: clarify error message for qmp-eject.
    If you use HMP's eject but the CDROM tray is locked, you may get a
    confusing error message informing you that the "tray isn't open."
    As this is the point of eject, we can do a little better and help
    clarify that the tray was locked and that it (might) open up later,
    so try again.
    It's not ideal, but it makes the semantics of the (legacy) eject
    command more understandable to end users when they try to use it.
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Eric Blake ]
  * [4ca1d34] qemu-io: Fix recent UI updates.
    Commit 770e0e0e [*] tried to add 'writev -f', but didn't tweak
    the getopt() call to actually let it work.  Likewise, commit
    c2e001c missed implementing 'aio_write -u -z'.  The latter commit
    also introduced a leak of ctx.
    [*] does it sound "ech0e" in here? :)
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1463416983-28318-2-git-send-email-eblake@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [9e28bb2] qemu-iotests: Simplify 109 with unaligned qemu-img compare.
    For some time now, qemu-img compare has been able to compare
    unaligned images.  So we no longer need test 109's hack of
    resizing to sector boundaries before invoking compare.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Message-id: 1463416983-28318-3-git-send-email-eblake@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [37546ff] qemu-iotests: Fix regression in 136 on aio_read invalid.
    Commit 093ea232 removed the ability for aio_read and aio_write
    to artificially inflate the invalid statistics counters for
    block devices, since it no longer flags unaligned offset or
    length.  Add 'aio_read -i' and 'aio_write -i' to restore
    the ability, and update test 136 to use it.
    Reported-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1463416983-28318-4-git-send-email-eblake@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Paolo Bonzini ]
  * [22b31af] aspeed: include qemu/log.h.
    This is not visible with the default "log" trace backend.  With other
    backends however trace.h does not include qemu/log.h, resulting in
    build failures.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1463745452-25831-2-git-send-email-pbonzini@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [65603e2] tci: do not include exec/exec-all.h.
    TCI does not need the runtime definition in exec-all.h.  It only needs the
    host-side definitions in tcg/tcg.h.  Now that cpu.h is not included
    everywhere, this caused a failure because exec-all.h does need cpu.h
    but does not include it itself.
    Fix by including the intended header.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1463745452-25831-1-git-send-email-pbonzini@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cao jin ]
  * [07fcd59] pc-dimm: correct comment of MemoryHotplugState
    correct comment and remove an unused macro. commit adcb4ee6
    already correct its type
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Eduardo Habkost ]
  * [4aeae87] vl: Use exit(1) when requested VGA interface is unavailable.
    Instead of using exit(0), use exit(1) when an unavailable VGA
    interface is used in the command-line to indicate it's an error.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [8c9a2b7] vl: Table-based select_vgahw()
    Instead of implementing separate check functions for each vga
    interface type, add a table enumerating the possible VGA
    interfaces.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [c2c7b22] vl: Replace *_vga_available() functions with class_names field.
    Instead of requiring a separate function for each VGA interface,
    just enumerate the corresponding class names on struct
    VGAInterfaceInfo.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [7b7d2be] vl: Add DT_COCOA DisplayType value.
    Instead of reusing DT_SDL for Cocoa, use DT_COCOA to indicate
    that a Cocoa display was requested.
    configure already ensures CONFIG_COCOA and CONFIG_SDL are never
    set at the same time. The only case where DT_SDL is used outside
    a #ifdef CONFIG_SDL block is in the no_frame/alt_grab/ctrl_grab
    check. That means the only user-visible change is that we will
    start printing a warning if the SDL-specific options are used in
    Cocoa mode. This is a bugfix, because no_frame/alt_grab/ctrl_grab
    are not used by Cocoa code.
    Cc: Andreas Färber <andreas.faerber@web.de>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Acked-by: Andreas Färber <andreas.faerber@web.de>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [f8c75b2] vnc: Initialization stubs.
    This reduces the number of CONFIG_VNC #ifdefs in the vl.c code.
    The only user-visible difference is that this will make QEMU
    complain about syntax when using "-display vnc" ("VNC requires a
    display argument vnc=<display>") even if CONFIG_VNC is disabled.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [674ec68] curses: curses_display_init() stub.
    One less #ifdef in vl.c.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [476db08] sdl: Initialization stubs.
    This reduces the number of CONFIG_SDL #ifdefs in vl.c.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [e35ee7c] cocoa: cocoa_display_init() stub.
    One less #ifdef in vl.c.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [19a2c62] gtk: Initialization stubs.
    This reduces the number of CONFIG_GTK #ifdefs in vl.c.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [6f0c894] spice: Initialization stubs on qemu-spice.h.
    This reduces the number of CONFIG_SPICE #ifdefs in vl.c.
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [cf3dc71] milkymist: Move DT_NOGRAPHIC check outside milkymist_tmu2_create()
    DT_NOGRAPHIC handling will be moved to a MachineState field, and
    it will be easier to change milkymist_init() to check that field.
    Cc: Michael Walle <michael@walle.cc>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [cfc58cf] vl: Replace DT_NOGRAPHIC with machine option.
    All DisplayType values are just UI options that don't affect any
    hardware emulation code, except for DT_NOGRAPHIC. Replace
    DT_NOGRAPHIC with DT_NONE plus a new "-machine graphics=on|off"
    option, so hardware emulation code don't need to use the
    display_type variable.
    Cc: Michael Walle <michael@walle.cc>
    Cc: Blue Swirl <blauwirbel@gmail.com>
    Cc: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [d29345d] vl: Make display_type a local variable.
    Now display_type is only used inside main(), and don't need to be a
    global variable.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [0cb48c4] vl: Move DisplayType typedef to vl.c.
    Now the type is only used inside vl.c and doesn't need to be in a
    header file.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [1f0dfe0] vl: Make display_remote a local variable.
    The variable is used only inside main(), so it can be local.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [16714b1] vl: Simplify global property registration.
    There's no need to use qdev_prop_register_global_list() and an
    array, if we are registering a single GlobalProperty struct. Use
    qdev_prop_register_global() instead.
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [bacc344] machine: add properties to compat_props incrementaly.
    Switch to adding compat properties incrementaly instead of
    completly overwriting compat_props per machine type.
    That removes data duplication which we have due to nested
    [PC|SPAPR]_COMPAT_* macros.
    It also allows to set default device properties from
    default foo_machine_options() hook, which will be used
    in following patch for putting VMGENID device as
    a function if ISA bridge on pc/q35 machines.
    Suggested-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    [ehabkost: Fixed CCW_COMPAT_* and PC_COMPAT_0_* defines]
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Eduardo Habkost ]
  * [7b1ee0f] vl: Use &error_fatal when parsing VNC options.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [822ac12] vl: Use &error_fatal when parsing monitor options.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [e8f2d27] Use &error_fatal when initializing crypto on qemu-{img,io,nbd}
    In addition to making the code simpler, this will replace the
    long error messages:
      cannot initialize crypto: Unable to initialize GNUTLS library: [...]
      cannot initialize crypto: Unable to initialize gcrypt
    with shorter messages:
      Unable to initialize GNUTLS library: [...]
      Unable to initialize gcrypt
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Wei Jiangang ]
  * [cde6361] rng-random: rename RndRandom to RngRandom.
    Usually, Random Number Generator is abbreviated to RNG/rng.
    so replacing RndRandom with RngRandom seems more reasonable
    and keep consistent with RngBackend.
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Reviewed-by: Pankaj Gupta <pagupta@redhat.com>
    Message-Id: <1460684168-5403-1-git-send-email-weijg.fnst@cn.fujitsu.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Markus Armbruster ]
  * [17b74b9] migration: Move qjson.[ch] to migration/
    Type QJSON lets you build JSON text.  Its interface mirrors (a subset
    of) abstract JSON syntax.
    QAPI output visitors also produce JSON text.  They assert their
    preconditions and invariants, and therefore abort on incorrect use.
    Contrastingly, QJSON does *not* detect incorrect use.  It happily
    produces invalid JSON then.  This is what migration wants.
    QJSON was designed for migration, and migration is its only user.
    Move it to migration/ for proper coverage by MAINTAINERS, and to deter
    accidental use outside migration.
    [Pointed out by Eric: QJSON was added in commits 0457d07..b174257
     -- Amit]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <1462380558-2030-2-git-send-email-armbru@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [b72fe9e] migration/qjson: Drop gratuitous use of QOM.
    All the use of QOM buys us here is the ability to destroy the thing
    with object_unref(OBJECT(vmdesc)).  Not worth the notational overhead.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <1462380558-2030-3-git-send-email-armbru@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Jason J. Herne ]
  * [d85a31d] migration: Promote improved autoconverge commands out of experimental state.
    The new autoconverge throttling commands have been tested for a release now. It
    is time to move them out of the experimental state.
    Signed-off-by: Jason J. Herne <jjherne@linux.vnet.ibm.com>
    Message-Id: <1461262038-8197-1-git-send-email-jjherne@linux.vnet.ibm.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Marc-André Lureau ]
  * [fe89fde] virtio-gpu: check early scanout id.
    Before accessing the g->scanout array, in order to avoid potential
    out-of-bounds access.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1463653560-26958-2-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [d0f0c86] virtio-vga: propagate on gpu realized error.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1463653560-26958-3-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [5e3d741] virtio-gpu: check max_outputs value.
    The value must be less than VIRTIO_GPU_MAX_SCANOUT.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1463653560-26958-4-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [2fe7605] virtio-gpu: check max_outputs only.
    The scanout id should not be above the configured num_scanouts.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1463653560-26958-5-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Juergen Gross ]
  * [9432e53] xen: introduce dummy system device.
    Introduce a new dummy system device serving as parent for virtual
    buses. This will enable new pv backends to introduce virtual buses
    which are removable again opposed to system buses which are meant
    to stay once added.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>
    Reviewed-by: Wei Liu <wei.liu2@citrix.com>
    Message-id: 1463062421-613-2-git-send-email-jgross@suse.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Marc-André Lureau ]
  * [acfc484] virtio-gpu: use VIRTIO_GPU_MAX_SCANOUTS.
    The value is defined in virtio_gpu.h already (changing from 4 to 16).
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1463653560-26958-6-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Juergen Gross ]
  * [637c53f] xen: write information about supported backends.
    Add a Xenstore directory for each supported pv backend. This will allow
    Xen tools to decide which backend type to use in case there are
    multiple possibilities.
    The information is added under
    /local/domain/<backend-domid>/device-model/<domid>/backends
    before the "running" state is written to Xenstore. Using a directory
    for each backend enables us to add parameters for specific backends
    in the future.
    This interface is documented in the Xen source repository in the file
    docs/misc/qemu-backends.txt
    In order to reuse the Xenstore directory creation already present in
    hw/xen/xen_devconfig.c move the related functions to
    hw/xen/xen_backend.c where they fit better.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>
    Reviewed-by: Wei Liu <wei.liu2@citrix.com>
    Message-id: 1463062421-613-3-git-send-email-jgross@suse.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Marc-André Lureau ]
  * [6b86080] virtio-gpu: fix ui idx check.
    Fix off-by-one value check (0 is the first scanout).
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1463653560-26958-7-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Juergen Gross ]
  * [816ac92] xen: add pvUSB backend.
    Add a backend for para-virtualized USB devices for xen domains.
    The backend is using host-libusb to forward USB requests from a
    domain via libusb to the real device(s) passed through.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>
    Message-id: 1463062421-613-4-git-send-email-jgross@suse.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [94ef4f3] vga: add sr_vbe register set.
    Commit "fd3c136 vga: make sure vga register setup for vbe stays intact
    (CVE-2016-3712)." causes a regression.  The win7 installer is unhappy
    because it can't freely modify vga registers any more while in vbe mode.
    This patch introduces a new sr_vbe register set.  The vbe_update_vgaregs
    will fill sr_vbe[] instead of sr[].  Normal vga register reads and
    writes go to sr[].  Any sr register read access happens through a new
    sr() helper function which will read from sr_vbe[] with vbe active and
    from sr[] otherwise.
    This way we can allow guests update sr[] registers as they want, without
    allowing them disrupt vbe video modes that way.
    Cc: qemu-stable@nongnu.org
    Reported-by: Thomas Lamprecht <thomas@lamprecht.org>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1463475294-14119-1-git-send-email-kraxel@redhat.com

  [ Thomas Huth ]
  * [d400fc0] usb/ohci: Fix crash with when specifying too many num-ports.
    QEMU currently crashes when an OHCI controller is instantiated with
    too many ports, e.g. "-device pci-ohci,num-ports=100,masterbus=1".
    Thus add a proper check in usb_ohci_init() to make sure that we
    do not use more than OHCI_MAX_PORTS = 15 ports here.
    Ticket: https://bugs.launchpad.net/qemu/+bug/1581308
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-id: 1463995387-11710-1-git-send-email-thuth@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Dominik Dingel ]
  * [d2f39ad] exec.c: Ensure right alignment also for file backed ram.
    While in the anonymous ram case we already take care of the right alignment
    such an alignment gurantee does not exist for file backed ram allocation.
    Instead, pagesize is used for alignment. On s390 this is not enough for gmap,
    as we need to satisfy an alignment up to segments.
    Reported-by: Halil Pasic <pasic@linux.vnet.ibm.com>
    Signed-off-by: Dominik Dingel <dingel@linux.vnet.ibm.com>
    Message-Id: <1461585338-45863-1-git-send-email-dingel@linux.vnet.ibm.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Pranith Kumar ]
  * [dfc007f] docs/atomics.txt: Update pointer to linux macro.
    Add a missing end brace and update doc to point to the latest access
    macro. ACCESS_ONCE() is deprecated.
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Message-Id: <1462198852-28694-1-git-send-email-bobby.prani@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Prasad J Pandit ]
  * [691a02e] i386: kvmvapic: initialise imm32 variable.
    When processing Task Priorty Register(TPR) access, it could leak
    automatic stack variable 'imm32' in patch_instruction().
    Initialise the variable to avoid it.
    Reported by: Donghai Zdh <donghai.zdh@alibaba-inc.com>
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1460013608-16670-1-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Stefan Weil ]
  * [5919e03] configure: Allow builds with extra warnings.
    The clang compiler supports a useful compiler option -Weverything,
    and GCC also has other warnings not enabled by -Wall.
    If glib header files trigger a warning, however, testing glib with
    -Werror will always fail. A size mismatch is also detected without
    -Werror, so simply remove it.
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Message-Id: <1461879221-13338-1-git-send-email-sw@weilnetz.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [14cb949] target-i386: key sfence availability on CPUID_SSE, not CPUID_SSE2
    sfence was introduced before lfence and mfence.  This fixes Linux
    2.4's measurement of checksumming speeds for the pIII_sse
    algorithm:
    md: linear personality registered as nr 1
    md: raid0 personality registered as nr 2
    md: raid1 personality registered as nr 3
    md: raid5 personality registered as nr 4
    raid5: measuring checksumming speed
       8regs     :   384.400 MB/sec
       32regs    :   259.200 MB/sec
    invalid operand: 0000
    CPU:    0
    EIP:    0010:[<c0240b2a>]    Not tainted
    EFLAGS: 00000246
    eax: c15d8000   ebx: 00000000   ecx: 00000000   edx: c15d5000
    esi: 8005003b   edi: 00000004   ebp: 00000000   esp: c15bdf50
    ds: 0018   es: 0018   ss: 0018
    Process swapper (pid: 1, stackpage=c15bd000)
    Stack: 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000
           00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000
           00000000 00000206 c0241c6c 00001000 c15d4000 c15d7000 c15d4000
    c15d4000
    Call Trace:    [<c0241c6c>] [<c0105000>] [<c0241db4>] [<c010503b>]
    [<c0105000>]
      [<c0107416>] [<c0105030>]
    Code: 0f ae f8 0f 10 04 24 0f 10 4c 24 10 0f 10 54 24 20 0f 10 5c
     <0>Kernel panic: Attempted to kill init!
    Reported-by: Stefan Weil <sw@weilnetz.de>
    Fixes: 121f3157887f92268a3d6169e2d4601f9292020b
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Xu ]
  * [479c2a1] ioapic: keep RO bits for IOAPIC entry.
    Currently IOAPIC RO bits can be written. To be better aligned with
    hardware, we should let them read-only.
    Reviewed-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <1462875682-1349-2-git-send-email-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [ed1263c] ioapic: clear remote irr bit for edge-triggered interrupts.
    This is to better emulate IOAPIC version 0x1X hardware. Linux kernel
    leveraged this "feature" to do explicit EOI since EOI register is still
    not introduced at that time. This will also fix the issue that level
    triggered interrupts failed to work when IR enabled (tested with Linux
    kernel version 4.5).
    Reviewed-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <1462875682-1349-3-git-send-email-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Li Zhijian ]
  * [e92a2d9] vl: change runstate only if new state is different from current state.
    Previously, qemu will abort at following scenario:
    (qemu) stop
    (qemu) system_reset
    (qemu) system_reset
    (qemu) 2016-04-13T20:54:38.979158Z qemu-system-x86_64: invalid runstate transition: 'prelaunch' -> 'prelaunch'
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <1460604352-18630-1-git-send-email-lizhijian@cn.fujitsu.com>
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Gonglei ]
  * [fa53a0e] memory: drop find_ram_block()
    On the one hand, we have already qemu_get_ram_block() whose function
    is similar. On the other hand, we can directly use mr->ram_block but
    searching RAMblock by ram_addr which is a kind of waste.
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1462845901-89716-2-git-send-email-arei.gonglei@huawei.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [ab0a995] exec: adjust rcu_read_lock requirement
    qemu_ram_unset_idstr() doesn't need rcu lock anymore,
    meanwhile make the range of rcu lock in
    qemu_ram_set_idstr() as small as possible.
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Message-Id: <1462845901-89716-3-git-send-email-arei.gonglei@huawei.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Fam Zheng ]
  * [b613597] memory: Remove code for mr->may_overlap.
    The collision check does nothing and hasn't been used. Remove the
    variable together with related code.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1458900629-2334-2-git-send-email-famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [5b5660a] memory: Drop FlatRange.romd_mode.
    Its value is alway set to mr->romd_mode, so the removed comparisons are
    fully superseded by "a->mr == b->mr".
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1458900629-2334-3-git-send-email-famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [e4e6979] memory: remove unnecessary masking of MemoryRegion ram_addr
    mr->ram_block->offset is already aligned to both host and target size
    (see qemu_ram_alloc_internal).  Remove further masking as it is
    unnecessary.
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Maydell ]
  * [a2d1761] cpus.c: Use pthread_sigmask() rather than sigprocmask()
    On Linux, sigprocmask() and pthread_sigmask() are in practice the
    same thing (they only set the signal mask for the calling thread),
    but the documentation states that the behaviour of sigprocmask() in a
    multithreaded process is undefined. Use pthread_sigmask() instead
    (which is what we do in almost all places in QEMU that alter the
    signal mask already).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-Id: <1463420039-29761-1-git-send-email-peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [168340b] Remove config-devices.mak on 'make clean'
    Our dependency mechanism works like this:
     * on first build there is neither a .o nor a .d
     * we create the .d as a side effect of creating the .o
     * for rebuilds we know when we need to update the .o,
       which also updates the .d
    This system requires that you're never in a situation where there is
    a .o file but no .d (because then we will never realise we need to
    build the .d, and we will not have the dependency information about
    when to rebuild the .o).
    This is working fine for our object files, but we also try to use it
    for $TARGET/config-devices.mak (where the dependency file is
    in $TARGET-config-devices.mak.d). Unfortunately "make clean" doesn't
    remove config-devices.mak, which means that it puts us in the
    forbidden situation of "object file exists but not its .d file".
    This in turn means that we will fail to notice when we need to rebuild:
      mkdir build/depbug
      (cd build/depbug && '../../configure')
      make -C build/depbug -j8
      make -C build/depbug clean
      echo "CONFIG_CANARY = y" >> default-configs/arm-softmmu.mak
      make -C build/depbug
      grep CANARY build/depbug/aarch64-softmmu/config-devices.mak
    The CANARY token should show up in config-devices.mak but does not.
    Fix this bug by making "make clean" delete the config-devices.mak files.
    config-all-devices.mak doesn't have the same problem since it has
    no .d file, but delete it too, since it is created by "make" and
    logically should be removed by "make clean".
    (Note that it is important not to remove config-devices.mak until
    after we have recursively run 'make clean' in the subdirectories.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-Id: <1463484451-22979-1-git-send-email-peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Richard W.M. Jones ]
  * [6f71b77] scripts/signrom.py: Allow option ROM checksum script to write the size header.
    Modify the signrom.py script so that if the size byte in the header is
    0 (ie. not set) then the script will set the size.  If the size byte
    is non-zero then we do the same as before, so this doesn't require
    changes to any existing ROM sourcecode.
    Signed-off-by: Richard W.M. Jones <rjones@redhat.com>
    Message-Id: <1463000807-18015-2-git-send-email-rjones@redhat.com>
  * [fd28938] scripts/signrom.py: Check for magic in option ROMs.
    Because of the risk that compilers might not emit the asm() block at
    the beginning of the option ROM, check that the ROM contains the
    required magic signature.
    Signed-off-by: Richard W.M. Jones <rjones@redhat.com>
    Message-Id: <1463000807-18015-3-git-send-email-rjones@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Prasad J Pandit ]
  * [c98c6c1] esp: check command buffer length before write(CVE-2016-4439)
    The 53C9X Fast SCSI Controller(FSC) comes with an internal 16-byte
    FIFO buffer. It is used to handle command and data transfer. While
    writing to this command buffer 's->cmdbuf[TI_BUFSZ=16]', a check
    was missing to validate input length. Add check to avoid OOB write
    access.
    Fixes CVE-2016-4439.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1463654371-11169-2-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [6c1fef6] esp: check dma length before reading scsi command(CVE-2016-4441)
    The 53C9X Fast SCSI Controller(FSC) comes with an internal 16-byte
    FIFO buffer. It is used to handle command and data transfer.
    Routine get_cmd() uses DMA to read scsi commands into this buffer.
    Add check to validate DMA length against buffer size to avoid any
    overrun.
    Fixes CVE-2016-4441.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1463654371-11169-3-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Vadim Rozenfeld ]
  * [644c686] iscsi: pass SCSI status back for SG_IO.
    Signed-off-by: Vadim Rozenfeld <vrozenfe@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [6ad978e] coccinelle: add g_assert_cmp* to macro file.
    This helps applying semantic patches to unit tests.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Bandan Das ]
  * [1255166] target-i386: add a generic x86 nmi handler.
    Instead of having x86 ifdefs in core nmi code, this
    change adds a arch specific handler that the nmi common
    code can call.
    Signed-off-by: Bandan Das <bsd@redhat.com>
    Message-Id: <1463761717-26558-2-git-send-email-bsd@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f7e981f] nmi: remove x86 specific nmi handling
    nmi_monitor_handle is wired to call the x86 nmi
    handler. So, we can directly use it at call sites.
    Signed-off-by: Bandan Das <bsd@redhat.com>
    Message-Id: <1463761717-26558-3-git-send-email-bsd@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1453e66] cpus: call the core nmi injection function.
    We can call the common function here directly since
    x86 specific actions will be taken care of by the arch
    specific nmi handler
    Signed-off-by: Bandan Das <bsd@redhat.com>
    Message-Id: <1463761717-26558-4-git-send-email-bsd@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Greg Kurz ]
  * [24f3902] savevm: fail if migration blockers are present.
    QEMU has currently two ways to prevent migration to occur:
    - migration blocker when it depends on runtime state
    - VMStateDescription.unmigratable when migration is not supported at all
    This patch gathers all the logic into a single function to be called from
    both the savevm and the migrate paths.
    This fixes a bug with 9p, at least, where savevm would succeed and the
    following would happen in the guest after loadvm:
    $ ls /host
    ls: cannot access /host: Protocol error
    With this patch:
    (qemu) savevm foo
    Migration is disabled when VirtFS export path '/' is mounted in the guest
    using mount_tag 'host'
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <146239057139.11271.9011797645454781543.stgit@bahia.huguette.org>
    [Update subject according to Paolo's suggestion - Amit]
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Eduardo Habkost ]
  * [b503717] target-i386: Define structs for layout of xsave area.
    Add structs that define the layout of the xsave areas used by
    Intel processors. Add some QEMU_BUILD_BUG_ON lines to ensure the
    structs match the XSAVE_* macros in target-i386/kvm.c and the
    offsets and sizes at target-i386/cpu.c:ext_save_areas.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [ee1b09f] target-i386: Use xsave structs for ext_save_area.
    This doesn't introduce any change in the code, as the offsets and
    struct sizes match what was present in the table. This can be
    validated by the QEMU_BUILD_BUG_ON lines on target-i386/cpu.h,
    which ensures the struct sizes and offsets match the existing
    values in ext_save_area.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [86cd2ea] target-i386: kvm: Use X86XSaveArea struct for xsave save/load.
    Instead of using offset macros and bit operations in a uint32_t
    array, use the X86XSaveArea struct to perform the loading/saving
    operations in kvm_put_xsave() and kvm_get_xsave().
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [d494352] osdep: Move default qemu_hw_version() value to a macro.
    The macro will be used by code that will stop calling
    qemu_hw_version() at runtime and just need a constant value.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [cd6c1b7] pc: Set CPU model-id on compat_props for pc <= 2.4.
    Instead of relying on x86_cpudef_setup() calling
    qemu_hw_version(), just make old machines set model-id explicitly
    on compat_props for qemu64, qemu32, and athlon. This will allow
    us to eliminate x86_cpudef_setup() later.
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Greg Kurz ]
  * [fe904ea] migration: regain control of images when migration fails to complete.
    We currently have an error path during migration that can cause
    the source QEMU to abort:
    migration_thread()
      migration_completion()
        runstate_is_running() ----------------> true if guest is running
        bdrv_inactivate_all() ----------------> inactivate images
        qemu_savevm_state_complete_precopy()
         ... qemu_fflush()
               socket_writev_buffer() --------> error because destination fails
             qemu_fflush() -------------------> set error on migration stream
      migration_completion() -----------------> set migrate state to FAILED
    migration_thread() -----------------------> break migration loop
      vm_start() -----------------------------> restart guest with inactive
                                                images
    and you get:
    qemu-system-ppc64: socket_writev_buffer: Got err=104 for (32768/18446744073709551615)
    qemu-system-ppc64: /home/greg/Work/qemu/qemu-master/block/io.c:1342:bdrv_co_do_pwritev: Assertion `!(bs->open_flags & 0x0800)' failed.
    Aborted (core dumped)
    If we try postcopy with a similar scenario, we also get the writev error
    message but QEMU leaves the guest paused because entered_postcopy is true.
    We could possibly do the same with precopy and leave the guest paused.
    But since the historical default for migration errors is to restart the
    source, this patch adds a call to bdrv_invalidate_cache_all() instead.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Message-Id: <146357896785.6003.11983081732454362715.stgit@bahia.huguette.org>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Max Filippov ]
  * [aa8e0ab] hw/net/opencores_eth: use mii.h.
    Drop local definitions of MII registers and use constants from mii.h for
    registers and register bits. No functional changes.
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>

  [ Zhou Jie ]
  * [ea4d824] hw/net/opencores_eth: Allocating Large sized arrays to heap
    open_eth_start_xmit has a huge stack usage of 65536 bytes approx.
    Moving large arrays to heap to reduce stack usage.
    Reduce size of a buffer allocated on stack to 0x600 bytes, which is the
    maximal frame length when HUGEN bit is not set in MODER, only allocate
    buffer on heap when that is too small. Thus heap is not used in typical
    use case.
    Signed-off-by: Zhou Jie <zhoujie2011@cn.fujitsu.com>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>

  [ Eduardo Habkost ]
  * [9cf2cc3] target-i386: Set constant model_id for qemu64/qemu32/athlon.
    Newer PC machines don't set hw_version, and older machines set
    model-id on compat_props explicitly, so we don't need the
    x86_cpudef_setup() code that sets model_id using
    qemu_hw_version() anymore.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [3e2c0e0] cpu: Eliminate cpudef_init(), cpudef_setup()
    x86_cpudef_init() doesn't do anything anymore, cpudef_init(),
    cpudef_setup(), and x86_cpudef_init() can be finally removed.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [4fe15cd] target-i386: Move TCG initialization check to tcg_x86_init()
    Instead of requiring cpu.c to check if TCG was already initialized,
    simply let the function be called multiple times.
    Suggested-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [57f2453] target-i386: Move TCG initialization to realize time.
    QOM instance_init functions are not supposed to have any side-effects,
    as new objects may be created at any moment for querying property
    information (see qmp_device_list_properties()).
    Move TCG initialization to realize time so it won't be called when just
    doing object_new() on a X86CPU subclass.
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [42ecaba] target-i386: Call cpu_exec_init() on realize.
    QOM instance_init functions are not supposed to have any side-effects,
    as new objects may be created at any moment for querying property
    information (see qmp_device_list_properties()).
    Calling cpu_exec_init() also affects QEMU's ability to handle errors
    during CPU creation, as some actions done by cpu_exec_init() can't be
    reverted.
    Move cpu_exec_init() call to realize so a simple object_new() won't
    trigger it, and so that it is called after some basic validation of CPU
    parameters.
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [d71b62a] target-i386: kvm: Allocate kvm_msrs struct once per VCPU.
    Instead of using 2400 bytes in the stack for 150 MSR entries in
    kvm_get_msrs() and kvm_put_msrs(), allocate a buffer once for
    each VCPU.
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [d113825] target-i386: kvm: Increase MSR_BUF_SIZE.
    We are dangerously close to the array limits in kvm_put_msrs()
    and kvm_get_msrs(): with the default mcg_cap configuration, we
    can set up to 148 MSRs in kvm_put_msrs(), and if we allow mcg_cap
    to be changed, we can write up to 236 MSRs.
    Use 4096 bytes for the buffer, that can hold 255 kvm_msr_entry
    structs.
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [9c600a8] target-i386: kvm: Simplify MSR array construction.
    Add a helper function that appends new entries to the MSR buffer
    and checks for the buffer size limit.
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [e25ffda] target-i386: kvm: Simplify MSR setting functions.
    Simplify kvm_put_tscdeadline_msr() and
    kvm_put_msr_feature_control() using kvm_msr_buf and the
    kvm_msr_entry_add() helper.
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [1abc2ca] target-i386: kvm: Eliminate kvm_msr_entry_set()
    Inline the function inside kvm_msr_entry_add().
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Zhou Jie ]
  * [11196e9] net/tap: Allocating Large sized arrays to heap
    net_init_tap has a huge stack usage of 8192 bytes approx.
    Moving large arrays to heap to reduce stack usage.
    Signed-off-by: Zhou Jie <zhoujie2011@cn.fujitsu.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Prasad J Pandit ]
  * [3af9187] net: mipsnet: check packet length against buffer.
    When receiving packets over MIPSnet network device, it uses
    receive buffer of size 1514 bytes. In case the controller
    accepts large(MTU) packets, it could lead to memory corruption.
    Add check to avoid it.
    Reported by: Oleksandr Bazhaniuk <oleksandr.bazhaniuk@intel.com>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Andreas Färber ]
  * [aa373a1] MAINTAINERS: Drop Andreas as Cocoa maintainer.
    Peter has taken over Cocoa maintainership.
    Signed-off-by: Andreas Färber <andreas.faerber@web.de>
  * [9f38774] MAINTAINERS: Drop Andreas as PReP maintainer.
    Signed-off-by: Andreas Färber <andreas.faerber@web.de>
  * [211b76d] MAINTAINERS: Drop Andreas as 0.15 maintainer.
    Downgrade to orphan status, like all other remaining stable entries.
    Signed-off-by: Andreas Färber <afaerber@suse.de>
  * [12b0e69] MAINTAINERS: Drop Andreas as CPU maintainer.
    Signed-off-by: Andreas Färber <afaerber@suse.de>

  [ Kevin Wolf ]
  * [88be7b4] block: Fix bdrv_next() memory leak.
    The bdrv_next() users all leaked the BdrvNextIterator after completing
    the iteration. Simply changing bdrv_next() to free the iterator before
    returning NULL at the end of list doesn't work because some callers exit
    the loop before looking at all BDSes.
    This patch moves the BdrvNextIterator from the heap to the stack of
    the caller and switches to a bdrv_first()/bdrv_next() interface for
    initialising the iterator.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>

  [ Max Reitz ]
  * [506f870] block: Drop useless bdrv_new() call
    bdrv_append_temp_snapshot() uses bdrv_new() to create an empty BDS
    before invoking bdrv_open() on that BDS. This is probably a relict from
    when it used to do some modifications on that empty BDS, but now that is
    unnecessary, so we can just set bs_snapshot to NULL and let bdrv_open()
    do the rest.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [6683618] block: Let bdrv_open_inherit() return the snapshot.
    If bdrv_open_inherit() creates a snapshot BDS and *pbs is NULL, that
    snapshot BDS should be returned instead of the BDS under it.
    This has worked so far because (nearly) all users of BDRV_O_SNAPSHOT use
    blk_new_open() to create the BDS tree. bdrv_append() (which is called by
    bdrv_append_temp_snapshot()) redirects pointers from parents (i.e. the
    BB in this case) to the newly appended child (i.e. the overlay),
    therefore, while bdrv_open_inherit() did not return the root BDS, the BB
    still pointed to it.
    The only instance where BDRV_O_SNAPSHOT is used but blk_new_open() is
    not is in blockdev_init() if no BDS tree is created, and instead
    blk_new() is used and the flags are stored in the BB root state.
    However, qmp_blockdev_change_medium() filters the BDRV_O_SNAPSHOT flag
    before invoking bdrv_open(), so it will not have any effect.
    In any case, it would be nicer if bdrv_open_inherit() could just always
    return the root of the BDS tree that has been created.
    To this end, bdrv_append_temp_snapshot() now returns the snapshot BDS
    instead of just appending it on top of the snapshotted BDS. Also, it
    calls bdrv_ref() before bdrv_append() (which bdrv_open_inherit() has to
    undo if not returning the overlay).
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [21a699a] tests: Drop BDS from test-throttle.c.
    Now that throttling has been moved to the BlockBackend level, we do not
    need to create a BDS along with the BB in the I/O throttling test.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [28eb9b1] block: Drop blk_new_with_bs()
    Its only caller is blk_new_open(), so we can just inline it there.
    The bdrv_new_root() call is dropped in the process because we can just
    let bdrv_open() create the BDS.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [9bddf75] block: Drop bdrv_new_root()
    It is unused now, so we may just as well drop it.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [5b36393] block: Make bdrv_open() return a BDS.
    There are no callers to bdrv_open() or bdrv_open_inherit() left that
    pass a pointer to a non-NULL BDS pointer as the first argument of these
    functions, so we can finally drop that parameter and just make them
    return the new BDS.
    Generally, the following pattern is applied:
        bs = NULL;
        ret = bdrv_open(&bs, ..., &local_err);
        if (ret < 0) {
            error_propagate(errp, local_err);
            ...
        }
    by
        bs = bdrv_open(..., errp);
        if (!bs) {
            ret = -EINVAL;
            ...
        }
    Of course, there are only a few instances where the pattern is really
    pure.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [30f55fb] block: Assert !bs->refcnt in bdrv_close()
    The only caller of bdrv_close() left is bdrv_delete(). We may as well
    assert that, in a way (there are some things in bdrv_close() that make
    more sense under that assumption, such as the call to
    bdrv_release_all_dirty_bitmaps() which in turn assumes that no frozen
    bitmaps are attached to the BDS).
    In addition, being called only in bdrv_delete() means that we can drop
    bdrv_close()'s forward declaration at the top of block.c.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [6b574e0] block: Drop bdrv_parent_cb_...() from bdrv_close()
    bdrv_close() now asserts that the BDS's refcount is 0, therefore it
    cannot have any parents and the bdrv_parent_cb_change_media() call is a
    no-op.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [109525a] block: Drop errp parameter from blk_new()
    blk_new() cannot fail so its Error ** parameter has become superfluous.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [e9740bc] block: Introduce bdrv_replace_child()
    This adds a common function that is called when attaching a new child to
    a parent, removing a child from a parent and when reconfiguring the
    graph so that an existing child points to a different node now.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [6820643] block: Make bdrv_drain() use bdrv_drained_begin/end()
    Until now, bdrv_drained_begin() used bdrv_drain() internally to drain
    the queue. This is kind of backwards and caused quiescing code to be
    duplicated because bdrv_drained_begin() had to ensure that no new
    requests come in even after bdrv_drain() returns, whereas bdrv_drain()
    had to have them because it could be called from other places.
    Instead move the bdrv_drain() code to bdrv_drained_begin() and make
    bdrv_drain() a simple wrapper around bdrv_drained_begin/end().
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [36fe133] block: Fix reconfiguring graph with drained nodes.
    When changing the BlockDriverState that a BdrvChild points to while the
    node is currently drained, we must call the .drained_end() parent
    callback. Conversely, when this means attaching a new node that is
    already drained, we need to call .drained_begin().
    bdrv_root_attach_child() takes now an opaque parameter, which is needed
    because the callbacks must also be called if we're attaching a new child
    to the BlockBackend when the root node is already drained, and they need
    a way to identify the BlockBackend. Previously, child->opaque was set
    too late and the callbacks would still see it as NULL.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
  * [20018e1] block: Propagate .drained_begin/end callbacks.
    When draining intermediate nodes (i.e. nodes that aren't the root node
    for at least one of their parents; with node references, the user can
    always configure the graph to create this situation), we need to
    propagate the .drained_begin/end callbacks all the way up to the root
    for the drain to be effective.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>

  [ Paolo Bonzini ]
  * [cbe0ed6] dma-helpers: change interface to byte-based.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [8a8e63e] dma-helpers: change BlockBackend to opaque value in DMAIOFunc.
    Callers of dma_blk_io have no way to pass extra data to the DMAIOFunc,
    because the original callback and opaque are gone by the time DMAIOFunc
    is called.  On the other hand, the BlockBackend is usually derived
    from those extra data that you could pass to the DMAIOFunc (in the
    next patch, that would be the SCSIRequest).
    So change DMAIOFunc's prototype, decoupling it from blk_aio_readv
    and blk_aio_writev's.  The new prototype loses the BlockBackend
    and gains an extra opaque value which, in the case of dma_blk_readv
    and dma_blk_writev, is of course used for the BlockBackend.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Eric Blake ]
  * [d004bd5] block: Rename blk_write_zeroes()
    Commit 983a1600 changed the semantics of blk_write_zeroes() to
    be byte-based rather than sector-based, but did not change the
    name, which is an open invitation for other code to misuse the
    function.  Renaming to pwrite_zeroes() makes it more in line
    with other byte-based interfaces, and will help make it easier
    to track which remaining write_zeroes interfaces still need
    conversion.
    Reported-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>

  [ Alberto Garcia ]
  * [a711279] block: keep a list of block jobs.
    The current way to obtain the list of existing block jobs is to
    iterate over all root nodes and check which ones own a job.
    Since we want to be able to support block jobs in other nodes as well,
    this patch keeps a list of jobs that is updated every time one is
    created or destroyed.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>

  [ Kevin Wolf ]
  * [a1a2af0] block: Cancel jobs first in bdrv_close_all()
    So far, bdrv_close_all() first removed all root BlockDriverStates of
    BlockBackends and monitor owned BDSes, and then assumed that the
    remaining BDSes must be related to jobs and cancelled these jobs.
    This order doesn't work that well any more when block jobs use
    BlockBackends internally because then they will lose their BDS before
    being cancelled.
    This patch changes bdrv_close_all() to first cancel all jobs and then
    remove all root BDSes from the remaining BBs.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [0c3169d] block: Default to enabled write cache in blk_new()
    The existing users of the function are:
    1. blk_new_open(), which already enabled the write cache
    2. Some test cases that don't care about the setting
    3. blockdev_init() for empty drives, where the cache mode is overridden
       with the value from the options when a medium is inserted
    Therefore, this patch doesn't change the current behaviour. It will be
    convenient, however, for additional users of blk_new() (like block
    jobs) if the most sensible WCE setting is the default.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
  * [b6d2e59] block: Convert block job core to BlockBackend.
    This adds a new BlockBackend field to the BlockJob struct, which
    coexists with the BlockDriverState while converting the individual jobs.
    When creating a block job, a new BlockBackend is created on top of the
    given BlockDriverState, and it is destroyed when the BlockJob ends. The
    reference to the BDS is now held by the BlockBackend instead of calling
    bdrv_ref/unref manually.
    We have to be careful when we use bdrv_replace_in_backing_chain() in
    block jobs because this changes the BDS that job->blk points to. At the
    moment block jobs are too tightly coupled with their BDS, so that moving
    a job to another BDS isn't easily possible; therefore, we need to just
    manually undo this change afterwards.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [1e98fef] block: Make blk_co_preadv/pwritev() public.
    Also add trace points now that the function can be directly called.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
  * [03e35d8] stream: Use BlockBackend for I/O.
    This changes the streaming block job to use the job's BlockBackend for
    performing the COR reads. job->bs isn't used by the streaming code any
    more afterwards.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [b880481] mirror: Allow target that already has a BlockBackend.
    We had to forbid mirroring to a target BDS that already had a BB
    attached because the node swapping at job completion would add a second
    BB and we didn't support multiple BBs on a single BDS at the time. Now
    we do, so we can lift the restriction.
    As we allow additional BlockBackends for the target, we must expect
    other users to be sending requests. There may no requests be in flight
    during the graph modification, so we have to drain those users now.
    The core part of this patch is a revert of commit 40365552.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [e253f4b] mirror: Use BlockBackend for I/O.
    This changes the mirror block job to use the job's BlockBackend for
    performing its I/O. job->bs isn't used by the mirroring code any more
    afterwards.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [91ab688] backup: Don't leak BackupBlockJob in error path.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>

  [ John Snow ]
  * [12b3e52] backup: Pack Notifier within BackupBlockJob.
    Instead of relying on peeking at bs->job, we want to explicitly get
    a reference to the job that was involved in this notifier callback.
    Pack the Notifier inside of the BackupBlockJob so we can use
    container_of to get a reference back to the BackupBlockJob object.
    This cuts out one more case where we rely unnecessarily on bs->job.
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>

  [ Kevin Wolf ]
  * [8543c27] backup: Remove bs parameter from backup_do_cow()
    Now that we pass the job to the function, bs is implied by that.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
  * [5c438bc] backup: Use BlockBackend for I/O.
    This changes the backup block job to use the job's BlockBackend for
    performing its I/O. job->bs isn't used by the backup code any more
    afterwards.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [4653456] commit: Use BlockBackend for I/O.
    This changes the commit block job to use the job's BlockBackend for
    performing its I/O. job->bs isn't used by the commit code any more
    afterwards.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [b75536c] blockjob: Remove BlockJob.bs.
    There is a single remaining user in qemu-img, and another one in a test
    case, both of which can be trivially converted to using BlockJob.blk
    instead.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>

  [ Daniel P. Berrange ]
  * [1fd791f] s390: use FILE instead of QEMUFile for creating text file.
    The s390 skeys monitor command needs to write out a plain text
    file. Currently it is using the QEMUFile class for this, but
    work is ongoing to refactor QEMUFile and eliminate much code
    related to it. The only feature qemu_fopen() gives over fopen()
    is support for QEMU FD passing, but this can be achieved with
    qemu_open() + fdopen() too. Switching to regular stdio FILE
    APIs avoids the need to sprintf via an intermedia buffer which
    slightly simplifies the code.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-2-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [d656ec5] io: avoid double-free when closing QIOChannelBuffer.
    The QIOChannelBuffer's close implementation will free
    the internal data buffer. It failed to reset the pointer
    to NULL though, so when the object is later finalized
    it will free it a second time with predictable crash.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-3-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [a8ec443] migration: remove use of qemu_bufopen from vmstate tests.
    Some of the test-vmstate.c test cases use a temporary file
    while others use a memory buffer. To facilitate the future
    removal of the qemu_bufopen() function, convert all the tests
    to use a temporary file.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-4-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [baf51e7] migration: ensure qemu_fflush() always writes full data amount.
    The QEMUFile writev_buffer / put_buffer functions are expected
    to write out the full set of requested data, blocking until
    complete. The qemu_fflush() caller does not expect to deal with
    partial writes. Clarify the function comments and add a sanity
    check to the code to catch mistaken implementations.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-5-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [0436e09] migration: split migration hooks out of QEMUFileOps.
    The QEMUFileOps struct contains the I/O subsystem callbacks
    and the migration stage hooks. Split the hooks out into a
    separate QEMUFileHooks struct to make it easier to refactor
    the I/O side of QEMUFile without affecting the hooks.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-6-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [06ad513] migration: introduce set_blocking function in QEMUFileOps.
    Remove the assumption that every QEMUFile implementation has
    a file descriptor available by introducing a new function
    in QEMUFileOps to change the blocking state of a QEMUFile.
    If not set, it will fallback to the original code using
    the get_fd method.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-7-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [9e4d2b9] migration: force QEMUFile to blocking mode for outgoing migration.
    Instead of relying on the default QEMUFile I/O blocking flag
    state, explicitly turn on blocking I/O for outgoing migration
    since it takes place in a background thread.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-8-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [a9cfeb3] migration: introduce a new QEMUFile impl based on QIOChannel.
    Introduce a new QEMUFile implementation that is based on
    the QIOChannel objects. This impl is different from existing
    impls in that there is no file descriptor that can be made
    available, as some channels may be based on higher level
    protocols such as TLS.
    Although the QIOChannel based implementation can trivially
    provide a bi-directional stream, initially we have separate
    functions for opening input & output directions to fit with
    the expectation of the current QEMUFile interface.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-9-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [48f0748] migration: add helpers for creating QEMUFile from a QIOChannel.
    Currently creating a QEMUFile instance from a QIOChannel is
    quite simple only requiring a single call to
    qemu_fopen_channel_input or  qemu_fopen_channel_output
    depending on the end of migration connection.
    When QEMU gains TLS support, however, there will need to be
    a TLS negotiation done inbetween creation of the QIOChannel
    and creation of the final QEMUFile. Introduce some helper
    methods that will encapsulate this logic, isolating the
    migration protocol drivers from knowledge about TLS.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Acked-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-10-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [d59ce6f] migration: add reporting of errors for outgoing migration.
    Currently if an application initiates an outgoing migration,
    it may or may not, get an error reported back on failure. If
    the error occurs synchronously to the 'migrate' command
    execution, the client app will see the error message. This
    is the case for DNS lookup failures. If the error occurs
    asynchronously to the monitor command though, the error
    will be thrown away and the client left guessing about
    what went wrong. This is the case for failure to connect
    to the TCP server (eg due to wrong port, or firewall
    rules, or other similar errors).
    In the future we'll be adding more scope for errors to
    happen asynchronously with the TLS protocol handshake.
    TLS errors are hard to diagnose even when they are well
    reported, so discarding errors entirely will make it
    impossible to debug TLS connection problems.
    Management apps which do migration are already using
    'query-migrate' / 'info migrate' to check up on progress
    of background migration operations and to see their end
    status. This is a fine place to also include the error
    message when things go wrong.
    This patch thus adds an 'error-desc' field to the
    MigrationInfo struct, which will be populated when
    the 'status' is set to 'failed':
    (qemu) migrate -d tcp:localhost:9001
    (qemu) info migrate
    capabilities: xbzrle: off rdma-pin-all: off auto-converge: off zero-blocks: off compress: off events: off x-postcopy-ram: off
    Migration status: failed (Error connecting to socket: Connection refused)
    total time: 0 milliseconds
    In the HMP, when doing non-detached migration, it is
    also possible to display this error message directly
    to the app.
    (qemu) migrate tcp:localhost:9001
    Error connecting to socket: Connection refused
    Or with QMP
      {
        "execute": "query-migrate",
        "arguments": {}
      }
      {
        "return": {
          "status": "failed",
          "error-desc": "address resolution failed for myhost:9000: No address associated with hostname"
        }
      }
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1461751518-12128-11-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [61b67d4] migration: convert post-copy to use QIOChannelBuffer.
    The post-copy code does some I/O to/from an intermediate
    in-memory buffer rather than direct to the underlying
    I/O channel. Switch this code to use QIOChannelBuffer
    instead of QEMUSizedBuffer.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-12-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [d984464] migration: convert unix socket protocol to use QIOChannel.
    Convert the unix socket migration protocol driver to use
    QIOChannel and QEMUFileChannel, instead of plain sockets
    APIs. It can be unconditionally built, since the socket
    impl of QIOChannel will report a suitable error on platforms
    where UNIX sockets are unavailable.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-13-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [6f860ae] migration: rename unix.c to socket.c.
    The unix.c file will be nearly the same as the tcp.c file,
    only differing in the initial SocketAddress creation code.
    Rename unix.c to socket.c and refactor it a little to
    prepare for merging the TCP code.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-14-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [e65c67e] migration: convert tcp socket protocol to use QIOChannel.
    Drop the current TCP socket migration driver and extend
    the new generic socket driver to cope with the TCP address
    format
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-15-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [64802ee] migration: convert fd socket protocol to use QIOChannel.
    Convert the fd socket migration protocol driver to use
    QIOChannel and QEMUFileChannel, instead of plain sockets
    APIs. It can be unconditionally built because the
    QIOChannel APIs it uses will take care to report suitable
    error messages if needed.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-16-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [527792f] migration: convert exec socket protocol to use QIOChannel.
    Convert the exec socket migration protocol driver to use
    QIOChannel and QEMUFileChannel, instead of the stdio
    popen APIs. It can be unconditionally built because the
    QIOChannelCommand class can report suitable error messages
    on platforms which can't fork processes.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-17-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [6ddd2d7] migration: convert RDMA to use QIOChannel interface.
    This converts the RDMA code to provide a subclass of QIOChannel
    that uses RDMA for the data transport.
    This implementation of RDMA does not correctly handle non-blocking
    mode. Reads might block if there was not already some pending data
    and writes will block until all data is sent. This flawed behaviour
    was already present in the existing impl, so appears to not be a
    critical problem at this time. It should be on the list of things
    to fix in the future though.
    The RDMA code would be much better off it it could be split up in
    a generic RDMA layer, a QIOChannel impl based on RMDA, and then
    the RMDA migration glue. This is left as a future exercise for
    the brave.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-18-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [8925839] migration: convert savevm to use QIOChannel for writing to files.
    Convert the exec savevm code to use QIOChannel and QEMUFileChannel,
    instead of the stdio APIs.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-19-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [8b7c5c0] migration: delete QEMUFile buffer implementation.
    The qemu_bufopen() method is no longer used, so the memory
    buffer based QEMUFile backend can be deleted entirely.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-20-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [2a22b4f] migration: delete QEMUSizedBuffer struct.
    Now that we don't have have a buffer based QemuFile
    implementation, the QEMUSizedBuffer code is also
    unused and can be deleted. A simpler buffer class
    also exists in util/buffer.c which other code can
    used as needed.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-21-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [40946ae] migration: delete QEMUFile sockets implementation.
    Now that the tcp, unix and fd migration backends have converted
    to use the QIOChannel based QEMUFile, there is no user remaining
    for the sockets based QEMUFile impl and it can be deleted.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-22-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [7fdc61c] migration: delete QEMUFile stdio implementation.
    Now that the exec migration backend and savevm have converted
    to use the QIOChannel based QEMUFile, there is no user remaining
    for the stdio based QEMUFile impl and it can be deleted.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-23-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [a24939f] migration: move definition of struct QEMUFile back into qemu-file.c.
    Now that the memory buffer based QEMUFile impl is gone, there
    is no need for any backend to be accessing internals of the
    QEMUFile struct, so it can be moved back into qemu-file.c
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-24-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [2594f56] migration: don't use an array for storing migrate parameters.
    The MigrateState struct uses an array for storing migration
    parameters. This presumes that all future parameters will
    be integers too, which is not going to be the case. There
    is no functional reason why an array is used, if anything
    it makes the code less clear. The QAPI schema already
    defines a struct - MigrationParameters - capable of storing
    all the individual parameters, so just use that instead of
    an array.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-25-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [69ef1f3] migration: define 'tls-creds' and 'tls-hostname' migration parameters.
    Define two new migration parameters to be used with TLS encryption.
    The 'tls-creds' parameter provides the ID of an instance of the
    'tls-creds' object type, or rather a subclass such as 'tls-creds-x509'.
    Providing these credentials will enable use of TLS on the migration
    data stream.
    If using x509 certificates, together with a migration URI that does
    not include a hostname, the 'tls-hostname' parameter provides the
    hostname to use when verifying the server's x509 certificate. This
    allows TLS to be used in combination with fd: and exec: protocols
    where a TCP connection is established by a 3rd party outside of
    QEMU.
    NB, this requires changing the migrate_set_parameter method in the
    HMP to accept a 's' (string) value instead of 'i' (integer). This
    is backwards compatible, because the parsing of strings allows the
    quotes to be optional, thus any integer is also a valid string.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-26-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [e122636] migration: add support for encrypting data with TLS.
    This extends the migration_set_incoming_channel and
    migration_set_outgoing_channel methods so that they
    will automatically wrap the QIOChannel in a
    QIOChannelTLS instance if TLS credentials are configured
    in the migration parameters.
    This allows TLS to work for tcp, unix, fd and exec
    migration protocols. It does not (currently) work for
    RDMA since it does not use these APIs, but it is
    unlikely that TLS would be desired with RDMA anyway
    since it would degrade the performance to that seen
    with TCP defeating the purpose of using RDMA.
    On the target host, QEMU would be launched with a set
    of TLS credentials for a server endpoint
     $ qemu-system-x86_64 -monitor stdio -incoming defer \
        -object tls-creds-x509,dir=/home/berrange/security/qemutls,endpoint=server,id=tls0 \
        ...other args...
    To enable incoming TLS migration 2 monitor commands are
    then used
      (qemu) migrate_set_str_parameter tls-creds tls0
      (qemu) migrate_incoming tcp:myhostname:9000
    On the source host, QEMU is launched in a similar
    manner but using client endpoint credentials
     $ qemu-system-x86_64 -monitor stdio \
        -object tls-creds-x509,dir=/home/berrange/security/qemutls,endpoint=client,id=tls0 \
        ...other args...
    To enable outgoing TLS migration 2 monitor commands are
    then used
      (qemu) migrate_set_str_parameter tls-creds tls0
      (qemu) migrate tcp:otherhostname:9000
    Thanks to earlier improvements to error reporting,
    TLS errors can be seen 'info migrate' when doing a
    detached migration. For example:
      (qemu) info migrate
      capabilities: xbzrle: off rdma-pin-all: off auto-converge: off zero-blocks: off compress: off events: off x-postcopy-ram: off
      Migration status: failed
      total time: 0 milliseconds
      error description: TLS handshake failed: The TLS connection was non-properly terminated.
    Or
      (qemu) info migrate
      capabilities: xbzrle: off rdma-pin-all: off auto-converge: off zero-blocks: off compress: off events: off x-postcopy-ram: off
      Migration status: failed
      total time: 0 milliseconds
      error description: Certificate does not match the hostname localhost
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-27-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [11808bb] migration: remove support for non-iovec based write handlers.
    All the remaining QEMUFile implementations provide an iovec
    based write handler, so the put_buffer callback can be removed
    to simplify the code.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-28-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [12992c1] migration: remove qemu_get_fd method from QEMUFile.
    Now that there is a set_blocking callback in QEMUFileOps,
    and all users needing non-blocking support have been
    converted to QIOChannel, there is no longer any codepath
    requiring the qemu_get_fd() method for QEMUFile. Remove it
    to avoid further code being introduced with an expectation
    of direct file handle access.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1461751518-12128-29-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Sergey Fedorov ]
  * [c88c67e] cpu-exec: Fix direct jump to TB spanning page.
    It is not safe to make a direct jump to a TB spanning two pages in
    system emulation because the mapping for the second page can get changed
    but we don't take care of direct jumps in this case.
    However in user mode emulation, this is not the case because there's
    only static address translation and TBs are always invalidated properly.
    Fixes: 5b053a4a2827 ("tcg: Clean up direct block chaining safety checks")
    Reported-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Tested-by: Max Filippov <jcmvbkbc@gmail.com>
    Message-id: 1463404380-29302-1-git-send-email-sergey.fedorov@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Andreas Färber ]
  * [a62c891] qdev: Start disentangling bus from device.
    Move bus type and related APIs to a separate file bus.c.
    This is a first step in breaking up qdev.c into more manageable chunks.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [AF: Rebased onto osdep.h]
    Signed-off-by: Andreas Färber <afaerber@suse.de>
    [PMM: added bus.o to link line for test-qdev-global-props]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Alex Williamson ]
  * [b53b0f6] vfio: Enable sparse mmap capability.
    The sparse mmap capability in a vfio region info allows vfio to tell
    us which sub-areas of a region may be mmap'd.  Thus rather than
    assuming a single mmap covers the entire region and later frobbing it
    ourselves for things like the PCI MSI-X vector table, we can read that
    directly from vfio.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>
  * [e61a424] vfio: Create device specific region info helper.
    Given a device specific region type and sub-type, find it.  Also
    cleanup return point on error in vfio_get_region_info() so that we
    always return 0 with a valid pointer or -errno and NULL.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>
  * [4225f2b] vfio/pci: Fix return of vfio_populate_vga()
    This function returns success if either we setup the VGA region or
    the host vfio doesn't return enough regions to support the VGA index.
    This latter case doesn't make any sense.  If we're asked to populate
    VGA, fail if it doesn't exist and let the caller decide if that's
    important.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>
  * [182bca4] vfio/pci: Consolidate VGA setup.
    Combine VGA discovery and registration.  Quirks can have dependencies
    on BARs, so the quirks push out until after we've scanned the BARs.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>
  * [581406e] vfio/pci: Setup BAR quirks after capabilities probing.
    Capability probing modifies wmask, which quirks may be interested in
    changing themselves.  Apply our BAR quirks after the capability scan
    to make this possible.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>
  * [c4c45e9] vfio/pci: Intel graphics legacy mode assignment.
    Enable quirks to support SandyBridge and newer IGD devices as primary
    VM graphics.  This requires new vfio-pci device specific regions added
    in kernel v4.6 to expose the IGD OpRegion, the shadow ROM, and config
    space access to the PCI host bridge and LPC/ISA bridge.  VM firmware
    support, SeaBIOS only so far, is also required for reserving memory
    regions for IGD specific use.  In order to enable this mode, IGD must
    be assigned to the VM at PCI bus address 00:02.0, it must have a ROM,
    it must be able to enable VGA, it must have or be able to create on
    its own an LPC/ISA bridge of the proper type at PCI bus address
    00:1f.0 (sorry, not compatible with Q35 yet), and it must have the
    above noted vfio-pci kernel features and BIOS.  The intention is that
    to enable this mode, a user simply needs to assign 00:02.0 from the
    host to 00:02.0 in the VM:
      -device vfio-pci,host=0000:00:02.0,bus=pci.0,addr=02.0
    and everything either happens automatically or it doesn't.  In the
    case that it doesn't, we leave error reports, but assume the device
    will operate in universal passthrough mode (UPT), which doesn't
    require any of this, but has a much more narrow window of supported
    devices, supported use cases, and supported guest drivers.
    When using IGD in this mode, the VM firmware is required to reserve
    some VM RAM for the OpRegion (on the order or several 4k pages) and
    stolen memory for the GTT (up to 8MB for the latest GPUs).  An
    additional option, x-igd-gms allows the user to specify some amount
    of additional memory (value is number of 32MB chunks up to 512MB) that
    is pre-allocated for graphics use.  TBH, I don't know of anything that
    requires this or makes use of this memory, which is why we don't
    allocate any by default, but the specification suggests this is not
    actually a valid combination, so the option exists as a workaround.
    Please report if it's actually necessary in some environment.
    See code comments for further discussion about the actual operation
    of the quirks necessary to assign these devices.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>
  * [6ced0bb] vfio/pci: Add a separate option for IGD OpRegion support.
    The IGD OpRegion is enabled automatically when running in legacy mode,
    but it can sometimes be useful in universal passthrough mode as well.
    Without an OpRegion, output spigots don't work, and even though Intel
    doesn't officially support physical outputs in UPT mode, it's a
    useful feature.  Note that if an OpRegion is enabled but a monitor is
    not connected, some graphics features will be disabled in the guest
    versus a headless system without an OpRegion, where they would work.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>
  * [0eb7342] vfio/pci: Add IGD documentation.
    Document the usage modes, host primary graphics considerations, usage,
    and fw_cfg ABI required for IGD assignment with vfio.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Alexey Kardashevskiy ]
  * [7a057b4] vfio: Fix 128 bit handling when deleting region.
    7532d3cbf "vfio: Fix 128 bit handling" added support for 64bit IOMMU
    memory regions when those are added to VFIO address space; however
    removing code cannot cope with these as int128_get64() will fail on
    1<<64.
    This copies 128bit handling from region_add() to region_del().
    Since the only machine type which is actually going to use 64bit IOMMU
    is pseries and it never really removes them (instead it will dynamically
    add/remove subregions), this should cause no behavioral change.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
  * [d78c19b] memory: Fix IOMMU replay base address.
    Since a788f227 "memory: Allow replay of IOMMU mapping notifications"
    when new VFIO listener is added, all existing IOMMU mappings are
    replayed. However there is a problem that the base address of
    an IOMMU memory region (IOMMU MR) is ignored which is not a problem
    for the existing user (which is pseries) with its default 32bit DMA
    window starting at 0 but it is if there is another DMA window.
    This stores the IOMMU's offset_within_address_space and adjusts
    the IOVA before calling vfio_dma_map/vfio_dma_unmap.
    As the IOMMU notifier expects IOVA offset rather than the absolute
    address, this also adjusts IOVA in sPAPR H_PUT_TCE handler before
    calling notifier(s).
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
  * [f1f9365] vfio: Check that IOMMU MR translates to system address space.
    At the moment IOMMU MR only translate to the system memory.
    However if some new code changes this, we will need clear indication why
    it is not working so here is the check.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

  [ David Gibson ]
  * [319de6f] target-ppc: Correct KVM synchronization for ppc_hash64_set_external_hpt()
    ppc_hash64_set_external_hpt() was added in e5c0d3c "target-ppc: Add helpers
    for updating a CPU's SDR1 and external HPT".  This helper contains a
    cpu_synchronize_state() since it may need to push state back to KVM
    afterwards.
    This turns out to break things when it is used in the reset path, which is
    the only current user.  It appears that kvm_vcpu_dirty is not being set
    early in the reset path, so the cpu_synchronize_state() is clobbering state
    set up by the early part of the cpu reset path with stale state from KVM.
    This may require some changes to the generic cpu reset path to fix
    properly, but as a short term fix we can just remove the
    cpu_synchronize_state() from ppc_hash64_set_external_hpt(), and require any
    non-reset path callers to do that manually.
    Reported-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Richard Henderson ]
  * [24f9cd9] target-ppc: Use movcond in isel.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [63ae091] target-ppc: Use 32-bit rotate instead of deposit + 64-bit rotate.
    A 32-bit rotate insn is more common on hosts than a deposit insn,
    and if the host has neither the result is truely horrific.
    At the same time, tidy up the temporaries within these functions,
    drop the over-use of "likely", drop some checks for identity that
    will also be checked by tcg-op.c functions, and special case mask
    without rotate within rlwinm.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [a7b2c8b] target-ppc: Cleanups to rldinm, rldnm, rldimi.
    Mirror the cleanups just done to rlwinm, rlwnm and rlwimi.
    This adds use of deposit to rldimi.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Thomas Huth ]
  * [8836630] hw/net/spapr_llan: Delay flushing of the RX queue while adding new RX buffers.
    Currently, the spapr-vlan device is trying to flush the RX queue
    after each RX buffer that has been added by the guest via the
    H_ADD_LOGICAL_LAN_BUFFER hypercall. In case the receive buffer pool
    was empty before, we only pass single packets to the guest this
    way. This can cause very bad performance if a sender is trying
    to stream fragmented UDP packets to the guest. For example when
    using the UDP_STREAM test from netperf with UDP packets that are
    much bigger than the MTU size, almost all UDP packets are dropped
    in the guest since the chances are quite high that at least one of
    the fragments got lost on the way.
    When flushing the receive queue, it's much better if we'd have
    a bunch of receive buffers available already, so that fragmented
    packets can be passed to the guest in one go. To do this, the
    spapr_vlan_receive() function should return 0 instead of -1 if there
    are no more receive buffers available, so that receive_disabled = 1
    gets temporarily set for the receive queue, and we have to delay
    the queue flushing at the end of h_add_logical_lan_buffer() a little
    bit by using a timer, so that the guest gets a chance to add multiple
    RX buffers before we flush the queue again.
    This improves the UDP_STREAM test with the spapr-vlan device a lot:
    Running
     netserver -p 44444 -L <guestip> -f -D -4
    in the guest, and
     netperf -p 44444 -L <hostip> -H <guestip> -t UDP_STREAM -l 60 -- -m 16384
    in the host, I get the following values _without_ this patch:
    Socket  Message  Elapsed      Messages
    Size    Size     Time         Okay Errors   Throughput
    bytes   bytes    secs            #      #   10^6bits/sec
    229376   16384   60.00     1738970      0    3798.83
    229376           60.00          23              0.05
    That "0.05" means that almost all UDP packets got lost/discarded
    at the receiving side.
    With this patch applied, the value look much better:
    Socket  Message  Elapsed      Messages
    Size    Size     Time         Okay Errors   Throughput
    bytes   bytes    secs            #      #   10^6bits/sec
    229376   16384   60.00     1789104      0    3908.35
    229376           60.00       22818             49.85
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [5c29dd8] hw/net/spapr_llan: Provide counter with dropped rx frames to the guest.
    The last 8 bytes of the receive buffer list page (that has been supplied
    by the guest with the H_REGISTER_LOGICAL_LAN call) contain a counter
    for frames that have been dropped because there was no suitable receive
    buffer available. This patch introduces code to use this field to
    provide the information about dropped rx packets to the guest.
    There it can be queried with "ethtool -S eth0 | grep rx_no_buffer".
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Zhou Jie ]
  * [8afc22a] Added negative check for get_image_size()
    This patch adds check for negative return value from get_image_size(),
    where it is missing. It avoids unnecessary two function calls.
    Signed-off-by: Zhou Jie <zhoujie2011@cn.fujitsu.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Greg Kurz ]
  * [41264b3] PPC/KVM: early validation of vcpu id.
    The KVM API restricts vcpu ids to be < KVM_CAP_MAX_VCPUS. On PowerPC
    targets, depending on the number of threads per core in the host and
    in the guest, some topologies do generate higher vcpu ids actually.
    When this happens, QEMU bails out with the following error:
    kvm_init_vcpu failed: Invalid argument
    The KVM_CREATE_VCPU ioctl has several EINVAL return paths, so it is
    not possible to fully disambiguate.
    This patch adds a check in the code that computes vcpu ids, so that
    we can detect the error earlier, and print a friendlier message instead
    of calling KVM_CREATE_VCPU with an obviously bogus vcpu id.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Jianjun Duan ]
  * [5dd5238] spapr: ensure device trees are always associated with DRC.
    There are possible racing situations involving hotplug events and
    guest migration. For cases where a hotplug event is migrated, or
    the guest is in the process of fetching device tree at the time of
    migration, we need to ensure the device tree is created and
    associated with the corresponding DRC for devices that were
    hotplugged on the source, but 'coldplugged' on the target.
    Signed-off-by: Jianjun Duan <duanj@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Alexey Kardashevskiy ]
  * [eded5ba] spapr_pci: Use correct DMA LIOBN when composing the device tree.
    The user could have picked LIOBN via the CLI but the device tree
    rendering code would still use the value derived from the PHB index
    (which is the default fallback if LIOBN is not set in the CLI).
    This replaces SPAPR_PCI_LIOBN() with the actual DMA LIOBN value.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [f94819d] spapr_iommu: Finish renaming vfio_accel to need_vfio.
    6a81dd17 "spapr_iommu: Rename vfio_accel parameter" renamed vfio_accel
    flag everywhere but one spot was missed.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [fec5d3a] spapr_iommu: Move table allocation to helpers.
    At the moment presence of vfio-pci devices on a bus affect the way
    the guest view table is allocated. If there is no vfio-pci on a PHB
    and the host kernel supports KVM acceleration of H_PUT_TCE, a table
    is allocated in KVM. However, if there is vfio-pci and we do yet not
    KVM acceleration for these, the table has to be allocated by
    the userspace. At the moment the table is allocated once at boot time
    but next patches will reallocate it.
    This moves kvmppc_create_spapr_tce/g_malloc0 and their counterparts
    to helpers.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ David Gibson ]
  * [b4daafb] MAINTAINERS: Add David Gibson as ppc maintainer.
    I've been de facto co-maintainer of all ppc target related code for some
    time.  Alex Graf isworking on other things and doesn't have a whole lot of
    time for qemu ppc maintainership.  So, update the MAINTAINERS file to
    reflect this.
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Alexander Graf <agraf@suse.de>
    Acked-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>

  [ Timothy E Baldwin ]
  * [2466119] linux-user: Check array bounds in errno conversion.
    Check array bounds in host_to_target_errno() and target_to_host_errno().
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-2-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: Add a lower-bound check, use braces on if(), tweak commit message]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>

  [ Peter Maydell ]
  * [a3ca7bb] linux-user: Consistently return host errnos from do_openat()
    The function do_openat() is not consistent about whether it is
    returning a host errno or a guest errno in case of failure.
    Standardise on returning -1 with errno set (ie caller has
    to call get_errno()).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reported-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>

  [ Timothy E Baldwin ]
  * [da7c864] linux-user: Reindent signal handling.
    Some of the signal handling was a mess with a mixture of tabs and 8 space
    indents.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-3-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: just rebased]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [14896d3] linux-user: Define TARGET_ERESTART* errno values.
    Define TARGET_ERESTARTSYS; like the kernel, we will use this to
    indicate that a guest system call should be restarted. We use
    the same value the kernel does for this, 512.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    [PMM: split out from the patch which moves and renumbers
     TARGET_QEMU_ESIGRETURN, add comment on usage]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [499b5d1] linux-user: Renumber TARGET_QEMU_ESIGRETURN, make it not arch-specific.
    Currently we define a QEMU-internal errno TARGET_QEMU_ESIGRETURN
    only on the MIPS and PPC targets; move this to errno_defs.h
    so it is available for all architectures, and renumber it to 513.
    We pick 513 because this is safe from future use as a system call return
    value: Linux uses it as ERESTART_NOINTR internally and never allows that
    errno to escape to userspace.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-4-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: TARGET_ERESTARTSYS split out into preceding patch, add comment]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [0284b03] linux-user: Support for restarting system calls for x86 targets.
    Update the x86 main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code rather than passing it
       back out as the "return code" from do_sigreturn()
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch EAX
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-5-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: Commit message tweaks; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [f0267ef] linux-user: Support for restarting system calls for ARM targets.
    Update the 32-bit and 64-bit ARM main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code on sigreturn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-6-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [2eb3ae2] linux-user: Support for restarting system calls for MIPS targets.
    Update the MIPS main loop code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
    (We already handle TARGET_QEMU_ESIGRETURN.)
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-7-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [6db9d00] linux-user: Support for restarting system calls for PPC targets.
    Update the PPC main loop code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
    (We already handle TARGET_QEMU_ESIGRETURN.)
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-8-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [c0bea68] linux-user: Support for restarting system calls for SPARC targets.
    Update the SPARC main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code on sigreturn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-9-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: Commit message tweaks; drop TARGET_USE_ERESTARTSYS define]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [ba41249] linux-user: Support for restarting system calls for SH4 targets.
    Update the SH4 main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code on sigreturn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-12-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [338c858] linux-user: Support for restarting system calls for Alpha targets.
    Update the Alpha main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-13-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define;
     PC is env->pc, not env->ir[IR_PV]]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [256cb6a] linux-user: Support for restarting system calls for UniCore32 targets.
    Update the UniCore32 main loop code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    (We don't support signals on this target so there is no sigreturn code
    to update.)
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-30-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [7fe7231] linux-user: Support for restarting system calls for OpenRISC targets.
    Update the OpenRISC main loop code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    (We don't implement sigreturn on this target so there is no
    code there to update.)
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-31-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [7ccb84a] linux-user: Support for restarting system calls for M68K targets.
    Update the M68K main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code on sigreturn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-32-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [47405ab] linux-user: Support for restarting system calls for S390 targets.
    Update the S390 main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code on sigreturn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-33-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: tweak commit message; remove stray double semicolon; drop
     TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [6205086] linux-user: Support for restarting system calls for CRIS targets.
    Update the CRIS main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code on sigreturn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-34-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    [PMM: tweak commit message; drop TARGET_USE_ERESTARTSYS define]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Peter Maydell ]
  * [a917516] linux-user: Support for restarting system calls for tilegx targets.
    Update the tilegx main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * return -TARGET_QEMU_ESIGRETURN from sigreturn rather than current R_RE
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Note that this fixes a bug where a sigreturn which happened to have
    an errno value in TILEGX_R_RE would incorrectly cause TILEGX_R_ERR
    to get set.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [d7749ab] linux-user: Set r14 on exit from microblaze syscall.
    All syscall exits on microblaze result in r14 being equal to the
    PC we return to, because the kernel syscall exit instruction "rtbd"
    does this. (This is true even for sigreturn(); note that r14 is
    not a userspace-usable register as the kernel may clobber it at
    any point.)
    Emulate the setting of r14 on exit; this isn't really a guest
    visible change for valid guest code because r14 isn't reliably
    observable anyway. However having the code and the comment helps
    to explain why it's ok for the ERESTARTSYS handling not to undo
    the changes to r14 that happen on syscall entry.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Timothy E Baldwin ]
  * [4134ecf] linux-user: Support for restarting system calls for Microblaze targets.
    Update the Microblaze main loop and sigreturn code:
     * on TARGET_ERESTARTSYS, wind guest PC backwards to repeat syscall insn
     * set all guest CPU state within signal.c code on sigreturn
     * handle TARGET_QEMU_ESIGRETURN in the main loop as the indication
       that the main loop should not touch any guest CPU state
    Note that this in passing fixes a bug where we were corrupting
    the guest r[3] on sigreturn with the guest's r[10] because
    do_sigreturn() was returning env->regs[10] but the register for
    syscall return values is env->regs[3].
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-11-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: Commit message tweaks; drop TARGET_USE_ERESTARTSYS define;
     drop whitespace changes]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [71a8f7f] linux-user: Add debug code to exercise restarting system calls.
    If DEBUG_ERESTARTSYS is set restart all system calls once. This
    is pure debug code for exercising the syscall restart code paths
    in the per-architecture cpu main loops.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-10-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: Add comment and a commented-out #define next to the commented-out
     generic DEBUG #define; remove the check on TARGET_USE_ERESTARTSYS;
     tweak comment message]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [4d330ce] linux-user: Provide safe_syscall for fixing races between signals and syscalls.
    If a signal is delivered immediately before a blocking system call the
    handler will only be called after the system call returns, which may be a
    long time later or never.
    This is fixed by using a function (safe_syscall) that checks if a guest
    signal is pending prior to making a system call, and if so does not call the
    system call and returns -TARGET_ERESTARTSYS. If a signal is received between
    the check and the system call host_signal_handler() rewinds execution to
    before the check. This rewinding has the effect of closing the race window
    so that safe_syscall will reliably either (a) go into the host syscall
    with no unprocessed guest signals pending or or (b) return
    -TARGET_ERESTARTSYS so that the caller can deal with the signals.
    Implementing this requires a per-host-architecture assembly language
    fragment.
    This will also resolve the mishandling of the SA_RESTART flag where
    we would restart a host system call and not call the guest signal handler
    until the syscall finally completed -- syscall restarting now always
    happens at the guest syscall level so the guest signal handler will run.
    (The host syscall will never be restarted because if the host kernel
    rewinds the PC to point at the syscall insn for a restart then our
    host_signal_handler() will see this and arrange the guest PC rewind.)
    This commit contains the infrastructure for implementing safe_syscall
    and the assembly language fragment for x86-64, but does not change any
    syscalls to use it.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-14-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM:
     * Avoid having an architecture if-ladder in configure by putting
       linux-user/host/$(ARCH) on the include path and including
       safe-syscall.inc.S from it
     * Avoid ifdef ladder in signal.c by creating new hostdep.h to hold
       host-architecture-specific things
     * Added copyright/license header to safe-syscall.inc.S
     * Rewrote commit message
     * Added comments to safe-syscall.inc.S
     * Changed calling convention of safe_syscall() to match syscall()
       (returns -1 and host error in errno on failure)
     * Added a long comment in qemu.h about how to use safe_syscall()
       to implement guest syscalls.
    ]
    RV: squashed Peters "fixup! linux-user: compile on non-x86-64 hosts"
    patch
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [50afd02] linux-user: Use safe_syscall for read and write system calls.
    Restart read() and write() if signals occur before, or during with SA_RESTART
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-15-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: Update to new safe_syscall() convention of setting errno]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [c10a073] linux-user: Use safe_syscall for open and openat system calls.
    Restart open() and openat() if signals occur before,
    or during with SA_RESTART.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-17-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: Adjusted to follow new -1-and-set-errno safe_syscall convention]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [4af80a3] linux-user: Use safe_syscall for wait system calls.
    Use safe_syscall for waitpid, waitid and wait4 syscalls. Note that this
    change allows us to implement support for waitid's fifth (rusage) argument
    in future; for the moment we ignore it as we have done up til now.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-18-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: Adjust to new safe_syscall convention. Add fifth waitid syscall argument
     (which isn't present in the libc interface but is in the syscall ABI)]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [ffdcbe2] linux-user: Use safe_syscall for execve syscall.
    Wrap execve() in the safe-syscall handling. Although execve() is not
    an interruptible syscall, it is a special case: if we allow a signal
    to happen before we make the host$ syscall then we will 'lose' it,
    because at the point of execve the process leaves QEMU's control.  So
    we use the safe syscall wrapper to ensure that we either take the
    signal as a guest signal, or else it does not happen before the
    execve completes and makes it the other program's problem.
    The practical upshot is that without this SIGTERM could fail to
    terminate the process.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-25-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: expanded commit message to explain in more detail why this is
     needed, and add comment about it too]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Peter Maydell ]
  * [6df9d38] linux-user: Use safe_syscall for pselect, select syscalls.
    Use the safe_syscall wrapper for the pselect and select syscalls.
    Since not every architecture has the select syscall, we now
    have to implement select in terms of pselect, which means doing
    timeval<->timespec conversion.
    (Five years on from the initial patch that added pselect support
    to QEMU and a decade after pselect6 went into the kernel, it seems
    safe to not try to support hosts with header files which don't
    define __NR_pselect6.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [d509eeb] linux-user: Use safe_syscall for futex syscall.
    Use the safe_syscall wrapper for the futex syscall.
    In particular, this fixes hangs when using programs that link
    against the Boehm garbage collector, including the Mono runtime.
    (We don't change the sys_futex() call in the implementation of
    the exit syscall, because as the FIXME comment there notes
    that should be handled by disabling signals, since we can't
    easily back out if the futex were to return ERESTARTSYS.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [c7e35da] linux-user: Handle negative values in timespec conversion.
    In a struct timespec, both fields are signed longs. Converting
    them from guest to host with code like
        host_ts->tv_sec = tswapal(target_ts->tv_sec);
    mishandles negative values if the guest has 32-bit longs and
    the host has 64-bit longs because tswapal()'s return type is
    abi_ulong: the assignment will zero-extend into the host long
    type rather than sign-extending it.
    Make the conversion routines use __get_user() and __set_user()
    instead: this automatically picks up the signedness of the
    field type and does the correct kind of sign or zero extension.
    It also handles the possibility that the target struct is not
    sufficiently aligned for the host's requirements.
    In particular, this fixes a hang when running the Linux Test Project
    mq_timedsend01 and mq_timedreceive01 tests: one of the test cases
    sets the timeout to -1 and expects an EINVAL failure, but we were
    setting a very long timeout instead.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [99874f6] linux-user: Handle msgrcv error case correctly.
    The msgrcv ABI is a bit odd -- the msgsz argument is a size_t, which is
    unsigned, but it must fail EINVAL if the value is negative when cast
    to a long. We were incorrectly passing the value through an
    "unsigned int", which meant that if the guest was 32-bit longs and
    the host was 64-bit longs an input of 0xffffffff (which should trigger
    EINVAL) would simply be passed to the host msgrcv() as 0xffffffff,
    where it does not cause the host kernel to reject it.
    Follow the same approach as do_msgsnd() in using a ssize_t and
    doing the check for negative values by hand, so we correctly fail
    in this corner case.
    This fixes the msgrcv03 Linux Test Project test case, which otherwise
    hangs.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [415d847] linux-user: Use g_try_malloc() in do_msgrcv()
    In do_msgrcv() we want to allocate a message buffer, whose size
    is passed to us by the guest. That means we could legitimately
    fail, so use g_try_malloc() and handle the error case, in the same
    way that do_msgsnd() does.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [716f3fb] linux-user: x86_64: Don't use 16-bit UIDs.
    The 64-bit x86 syscall ABI uses 32-bit UIDs; only define
    USE_UID16 for 32-bit x86.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [fd6f779] linux-user: Use direct syscalls for setuid(), etc.
    On Linux the setuid(), setgid(), etc system calls have different semantics
    from the libc functions. The libc functions follow POSIX and update the
    credentials for all threads in the process; the system calls update only
    the thread which makes the call. (This impedance mismatch is worked around
    in libc by signalling all threads to tell them to do a syscall, in a
    byzantine and fragile way; see http://ewontfix.com/17/.)
    Since in linux-user we are trying to emulate the system call semantics,
    we must implement all these syscalls to directly call the underlying
    host syscall, rather than calling the host libc function.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [167e4cd] linux-user: arm: Remove ARM_cpsr and similar #defines.
    The #defines of ARM_cpsr and friends in linux-user/arm/target-syscall.h
    can clash with versions in the system headers if building on an
    ARM or AArch64 build (though this seems to be dependent on the version
    of the system headers). The QEMU defines are not very useful (it's
    not clear that they're intended for use with the target_pt_regs struct
    rather than (say) the CPUARMState structure) and we only use them in one
    function in elfload.c anyway. So just remove the #defines and directly
    access regs->uregs[].
    Reported-by: Christopher Covington <cov@codeaurora.org>
    Tested-by: Christopher Covington <cov@codeaurora.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Chen Gang ]
  * [f1d9d10] linux-user/signal.c: Generate opcode data for restorer in setup_rt_frame.
    Original implementation uses do_rt_sigreturn directly in host space,
    when a guest program is in unwind procedure in guest space, it will get
    an incorrect restore address, then causes unwind failure.
    Also cleanup the original incorrect indentation.
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Chen Gang <gang.chen.5i5j@gmail.com>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [166c97e] linux-user/signal.c: Use target address instead of host address for microblaze restorer.
    The return address is in target space, so the restorer address needs to
    be target space, too.
    Signed-off-by: Chen Gang <gang.chen.5i5j@gmail.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [5b1d59d] linux-user/signal.c: Use s390 target space address instead of host space.
    The return address is in target space, so the restorer address needs to
    be target space, too.
    Signed-off-by: Chen Gang <gang.chen.5i5j@gmail.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>

  [ Laurent Vivier ]
  * [49e55cb] linux-user,target-ppc: fix use of MSR_LE
    setup_frame()/setup_rt_frame()/restore_user_regs() are using
    MSR_LE as the similar kernel functions do: as a bitmask.
    But in QEMU, MSR_LE is a bit position, so change this
    accordingly.
    The previous code was doing nothing as MSR_LE is 0,
    and "env->msr &= ~MSR_LE" doesn't change the value of msr.
    And yes, a user process can change its endianness,
    see linux kernel commit:
        fab5db9 [PATCH] powerpc: Implement support for setting little-endian mode via prctl
    and prctl(2): PR_SET_ENDIAN, PR_GET_ENDIAN
    Reviewed-by: Thomas Huth <huth@tuxfamily.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Paolo Bonzini ]
  * [b138e65] Revert "memory: Drop FlatRange.romd_mode"
    This reverts commit 5b5660adf1fdb61db14ec681b10463b8cba633f1,
    as it breaks the UEFI guest firmware (known as ArmVirtPkg or AAVMF)
    running in the "virt" machine type of "qemu-system-aarch64":
    Contrary to the commit message, (a->mr == b->mr) does *not* imply
    that (a->romd_mode == b->romd_mode): the pflash device model calls
    memory_region_rom_device_set_romd() -- for switching between the above
    modes --, and that function changes mr->romd_mode but the current
    AddressSpaceDispatch's FlatRange keeps the old value.  Therefore
    region_del/region_add are not called on the KVM MemoryListener.
    Reported-by: Drew Jones <drjones@redhat.com>
    Tested-by: Drew Jones <drjones@redhat.com>
    Analyzed-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ xiaoqiang zhao ]
  * [e7c9136] hw/char: QOM'ify escc.c
    * Drop the old SysBus init function and use instance_init
    * Call qemu_chr_add_handlers in the realize callback
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-Id: <1464158344-12266-2-git-send-email-zxq_yx_007@163.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8290de9] hw/char: QOM'ify etraxfs_ser.c
    * Drop the old SysBus init function and use instance_init
    * Call qemu_chr_add_handlers in the realize callback
    * Use qdev chardev prop instead of qemu_char_get_next_serial
    * Add etraxfs_ser_create function to create etraxfs serial device
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-Id: <1464158344-12266-3-git-send-email-zxq_yx_007@163.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [c2ddaa6] hw/char: QOM'ify lm32_juart.c
    * Drop the old SysBus init function
    * Call qemu_chr_add_handlers in the realize callback
    * Use qdev chardev prop instead of qemu_char_get_next_serial
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-Id: <1464158344-12266-4-git-send-email-zxq_yx_007@163.com>
    Tested-by: Michael Walle <michael@walle.cc>
    Acked-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [7aaefca] hw/char: QOM'ify lm32_uart.c
    * Drop the old SysBus init function and use instance_init
    * Call qemu_chr_add_handlers in the realize callback
    * Use qdev chardev prop instead of qemu_char_get_next_serial
    * Add lm32_uart_create function to create lm32 uart device
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-Id: <1464158344-12266-5-git-send-email-zxq_yx_007@163.com>
    Tested-by: Michael Walle <michael@walle.cc>
    Acked-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [e269fbe] hw/char: QOM'ify milkymist-uart.c
    drop the qemu_char_get_next_serial and use chardev prop instead
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-Id: <1464158344-12266-6-git-send-email-zxq_yx_007@163.com>
    Tested-by: Michael Walle <michael@walle.cc>
    Acked-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Eric Blake ]
  * [353ab96] nbd: Don't trim unrequested bytes.
    Similar to commit df7b97ff, we are mishandling clients that
    give an unaligned NBD_CMD_TRIM request, and potentially
    trimming bytes that occur before their request; which in turn
    can cause potential unintended data loss (unlikely in
    practice, since most clients are sane and issue aligned trim
    requests).  However, while we fixed read and write by switching
    to the byte interfaces of blk_, we don't yet have a byte
    interface for discard.  On the other hand, trim is advisory, so
    rounding the user's request to simply ignore the first and last
    unaligned sectors (or the entire request, if it is sub-sector
    in length) is just fine.
    CC: qemu-stable@nongnu.org
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1464173965-9694-1-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [60b412d] kvm_stat: Remove.
    The source has moved to the Linux kernel tree.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Prasad J Pandit ]
  * [3e831b4] scsi: pvscsi: check command descriptor ring buffer size (CVE-2016-4952)
    Vmware Paravirtual SCSI emulation uses command descriptors to
    process SCSI commands. These descriptors come with their ring
    buffers. A guest could set the ring buffer size to an arbitrary
    value leading to OOB access issue. Add check to avoid it.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Cc: qemu-stable@nongnu.org
    Message-Id: <1464000485-27041-1-git-send-email-ppandit@redhat.com>
    Reviewed-by: Shmulik Ladkani <shmulik.ladkani@ravellosystems.com>
    Reviewed-by: Dmitry Fleytman <dmitry@daynix.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [0663055] scsi: mptsas: infinite loop while fetching requests.
    The LSI SAS1068 Host Bus Adapter emulator in Qemu, periodically
    looks for requests and fetches them. A loop doing that in
    mptsas_fetch_requests() could run infinitely if 's->state' was
    not operational. Move check to avoid such a loop.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Cc: qemu-stable@nongnu.org
    Message-Id: <1464077264-25473-1-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1b85898] scsi: megasas: use appropriate property buffer size.
    When setting MegaRAID SAS controller properties via MegaRAID
    Firmware Interface(MFI) commands, a user supplied size parameter
    is used to set property value. Use appropriate size value to avoid
    OOB access issues.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1464172291-2856-2-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [d37af74] scsi: megasas: initialise local configuration data buffer.
    When reading MegaRAID SAS controller configuration via MegaRAID
    Firmware Interface(MFI) commands, routine megasas_dcmd_cfg_read
    uses an uninitialised local data buffer. Initialise this buffer
    to avoid stack information leakage.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1464178304-12831-1-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [b60bdd1] scsi: megasas: check 'read_queue_head' index value.
    While doing MegaRAID SAS controller command frame lookup, routine
    'megasas_lookup_frame' uses 'read_queue_head' value as an index
    into 'frames[MEGASAS_MAX_FRAMES=2048]' array. Limit its value
    within array bounds to avoid any OOB access.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1464179110-18593-1-git-send-email-ppandit@redhat.com>
    Reviewed-by: Alexander Graf <agraf@suse.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Lieven ]
  * [a6b3167] block/iscsi: avoid potential overflow of acb->task->cdb
    at least in the path via virtio-blk the maximum size is not
    restricted.
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Message-Id: <1464080368-29584-1-git-send-email-pl@kamp.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [141af03] bt: rewrite csrhci_write to avoid out-of-bounds writes.
    The usage of INT_MAX in this function confuses Coverity.  I think
    the defect is bogus, however there is no protection against
    getting more than sizeof(s->inpkt) bytes from the character device
    backend.
    Rewrite the function to only fill in as much data as needed from
    buf into s->inpkt.  The plen variable is replaced by a simple
    state machine and there is no need anymore to shift contents to
    the beginning of s->inpkt.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Emilio G. Cota ]
  * [56ebe02] docs/atomics: update atomic_read/set comparison with Linux.
    Recently Linux did a mass conversion of its atomic_read/set calls
    so that they at least are READ/WRITE_ONCE. See Linux's commit
    62e8a325 ("atomic, arch: Audit atomic_{read,set}()"). It seems though
    that their documentation hasn't been updated to reflect this.
    The appended updates our documentation to reflect the change, which
    means there is effectively no difference between our atomic_read/set
    and the current Linux implementation.
    While at it, fix the statement that a barrier is implied by
    atomic_read/set, which is incorrect. Volatile/atomic semantics prevent
    transformations pertaining the variable they apply to; this, however,
    has no effect on surrounding statements like barriers do. For more
    details on this, see:
      https://gcc.gnu.org/onlinedocs/gcc/Volatiles.html
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1464120374-8950-2-git-send-email-cota@braap.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [c983895] atomics: emit an smp_read_barrier_depends() barrier only for Alpha and Thread Sanitizer.
    For correctness, smp_read_barrier_depends() is only required to
    emit a barrier on Alpha hosts. However, we are currently emitting
    a consume fence unconditionally, and most compilers currently treat
    consume and acquire fences as equivalent.
    Fix it by keeping the consume fence if we're compiling with Thread
    Sanitizer, since this might help prevent false warnings. Otherwise,
    only emit the barrier for Alpha hosts. Note that we still guarantee
    that smp_read_barrier_depends() is a compiler barrier.
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1464120374-8950-3-git-send-email-cota@braap.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [15487aa] atomics: do not emit consume barrier for atomic_rcu_read.
    Currently we emit a consume-load in atomic_rcu_read.  Because of
    limitations in current compilers, this is overkill for non-Alpha hosts
    and it is only useful to make Thread Sanitizer work.
    This patch leaves the consume-load in atomic_rcu_read when
    compiling with Thread Sanitizer enabled, and resorts to a
    relaxed load + smp_read_barrier_depends otherwise.
    On an RMO host architecture, such as aarch64, the performance
    improvement of this change is easily measurable. For instance,
    qht-bench performs an atomic_rcu_read on every lookup. Performance
    before and after applying this patch:
    $ tests/qht-bench -d 5 -n 1
    Before: 9.78 MT/s
    After:  10.96 MT/s
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1464120374-8950-4-git-send-email-cota@braap.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [a4a0e4b] docs/atomics: update comparison with Linux.
    Over time, some differences between QEMU and Linux atomics are getting
    smoothed.  In particular, Linux grew atomic_fetch_or (and in general
    the differences regarding RMW operations were not described accurately)
    and smp_load_acquire/smp_store_release.  Also, set_mb was renamed to
    smp_store_mb().  Include these changes in the documentation.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paul Durrant ]
  * [a8ff431] xen-hvm: ignore background I/O sections.
    Since Xen will correctly handle accesses to unimplemented I/O ports (by
    returning all 1's for reads and ignoring writes) there is no need for
    QEMU to register backgroud I/O sections.
    This patch therefore adds checks to xen_io_add/del so that sections with
    memory-region ops pointing at 'unassigned_io_ops' are ignored.
    Signed-off-by: Paul Durrant <paul.durrant@citrix.com>
    Cc: Stefano Stabellini <sstabellini@kernel.org>
    Cc: Anthony Perard <anthony.perard@citrix.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <1462811480-16295-1-git-send-email-paul.durrant@citrix.com>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [993935f] scsi-disk: introduce a common base class.
    This will be the place to add DMAIOFuncs in the next patch.  There
    are also a couple DeviceClass members that can be moved to the
    abstract class's initialization function.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [fcaafb1] scsi-disk: introduce dma_readv and dma_writev.
    These are replacements for blk_aio_readv and blk_aio_writev that allow
    customization of the data path.  They reuse the DMA helpers' DMAIOFunc
    callback type, so that the same function can be used in either the
    QEMUSGList or the bounce-buffered case.
    This customization will be needed in the next patch to do zero-copy
    SG_IO on scsi-block.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [94f8ba1] scsi-disk: add need_fua_emulation to SCSIDiskClass
    scsi-block will be able to do FUA just by passing the request through
    to the LUN (which is also more efficient); there is no need to emulate
    it like we do for scsi-disk.
    Add a new method to distinguish this.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [5b956f4] scsi-disk: introduce scsi_disk_req_check_error.
    Commonize all the checks for canceled requests and errors.  The next patch
    will add another case to check for, in order to handle passthrough commands.
    There is no semantic change here; the only nontrivial modification is in
    scsi_write_do_fua, where cancellation has been checked earlier by both
    callers.  Thus, the check is replaced with an assertion.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8fdc783] scsi-block: always use SG_IO.
    Using pread/pwrite or io_submit has the advantage of eliminating the
    bounce buffer, but drops the SCSI status.  This keeps the guest from
    seeing unit attention codes, as well as statuses such as RESERVATION
    CONFLICT.  Because we know scsi-block operates on an SBC device we can
    still use the DMA helpers with SG_IO; just remember to patch the CDBs
    if the transfer is split into multiple segments.
    This means that scsi-block will always use the thread-pool unfortunately,
    instead of respecting aio=native.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Fam Zheng ]
  * [063143d] scsi-generic: Merge block max xfer len in INQUIRY response.
    The rationale is similar to the above mode sense response interception:
    this is practically the only channel to communicate restraints from
    elsewhere such as host and block driver.
    The scsi bus we attach onto can have a larger max xfer len than what is
    accepted by the host file system (guarding between the host scsi LUN and
    QEMU), in which case the SG_IO we generate would get -EINVAL.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1464243305-10661-3-git-send-email-famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [4ff8757] memory: remove qemu_get_ram_fd, qemu_set_ram_fd, qemu_ram_block_host_ptr.
    Remove direct uses of ram_addr_t and optimize memory_region_{get,set}_fd
    now that a MemoryRegion knows its RAMBlock directly.
    Reviewed-by: Marc-André Lureau <marcandre.lureau@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f615f39] exec: remove ram_addr argument from qemu_ram_block_from_host.
    Of the two callers, one does not use it, and the other can compute
    it itself based on the other output argument (offset) and the RAMBlock.
    Reviewed-by: Marc-André Lureau <marcandre.lureau@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [07bdaa4] memory: split memory_region_from_host from qemu_ram_addr_from_host.
    Move the old qemu_ram_addr_from_host to memory_region_from_host and
    make it return an offset within the region.  For qemu_ram_addr_from_host
    return the ram_addr_t directly, similar to what it was before
    commit 1b5ec23 ("memory: return MemoryRegion from qemu_ram_addr_from_host",
    2013-07-04).
    Reviewed-by: Marc-André Lureau <marcandre.lureau@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [0878d0e] exec: hide mr->ram_addr from qemu_get_ram_ptr users.
    Let users of qemu_get_ram_ptr and qemu_ram_ptr_length pass in an
    address that is relative to the MemoryRegion.  This basically means
    what address_space_translate returns.
    Because the semantics of the second parameter change, rename the
    function to qemu_map_ram_ptr.
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Benjamin Herrenschmidt ]
  * [5fd1111] ppc: Remove MMU_MODEn_SUFFIX definitions.
    We don't use the resulting accessors and this gets in the way of
    the split I/D TLB work.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [9fb0449] ppc: Use split I/D mmu modes to avoid flushes on interrupts.
    We rework the way the MMU indices are calculated, providing separate
    indices for I and D side based on MSR:IR and MSR:DR respectively,
    and thus no longer need to flush the TLB on context changes. This also
    adds correct support for HV as a separate address space.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [cd0c6f4] ppc: Do some batching of TCG tlb flushes.
    On ppc64 especially, we flush the tlb on any slbie or tlbie instruction.
    However, those instructions often come in bursts of 3 or more (context
    switch will favor a series of slbie's for example to an slbia if the
    SLB has less than a certain number of entries in it, and tlbie's can
    happen in a series, with PAPR, H_BULK_REMOVE can remove up to 4 entries
    at a time.
    Doing a tlb_flush() each time is a waste of time. We end up doing a memset
    of the whole TLB, reloading it for the next instruction, memset'ing again,
    etc...
    Those instructions don't have to take effect immediately. For slbie, they
    can wait for the next context synchronizing event. For tlbie, the next
    tlbsync.
    This implements batching by keeping a flag that indicates that we have a
    TLB in need of flushing. We check it on interrupts, rfi's, isync's and
    tlbsync and flush the TLB if needed.
    This reduces the number of tlb_flush() on a boot to a ubuntu installer
    first dialog screen from roughly 360K down to 36K.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: added a 'CPUPPCState *' variable in h_remove() and
          h_bulk_remove() ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    [dwg: removed spurious whitespace change, use 0/1 not true/false
          consistently, since tlb_need_flush has int type]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [74693da] ppc: tlbie, tlbia and tlbisync are HV only.
    Not that anything remotely recent supports tlbia but ...
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [f9ef052] ppc: Change 'invalid' bit mask of tlbiel and tlbie.
    Otherwise it will trip on the forms used in recent architecture.
    Ideally, we should have different handlers for different architecture
    levels but our current implementation of TLB flushing is dumb enough
    that this will do for now.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Michael Neuling ]
  * [c409bc5] ppc: Fix sign extension issue in mtmsr(d) emulation.
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [b68e60e] ppc: Get out of emulation on SMT "OR" ops.
    Otherwise tight loops at smt_low for example, which OPAL does,
    eat so much CPU that we can't boot a kernel anymore. With that,
    I can boot 8 CPUs just fine with powernv.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [4e08061] ppc: Add PPC_64H instruction flag to POWER7 and POWER8.
    This will enable decoding of hrfid
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [1c59eb3] exec: Remove cpu from cpus list during cpu_exec_exit()
    CPUState *cpu gets added to the cpus list during cpu_exec_init(). It
    should be removed from cpu_exec_exit().
    cpu_exec_exit() is called from generic CPU::instance_finalize and some
    archs like PowerPC call it from CPU unrealizefn. So ensure that we
    dequeue the cpu only once.
    Now -1 value for cpu->cpu_index indicates that we have already dequeued
    the cpu for CONFIG_USER_ONLY case also.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [9dfeca7] exec: Do vmstate unregistration from cpu_exec_exit()
    cpu_exec_init() does vmstate_register for the CPU device. This needs to be
    undone from cpu_exec_exit(). This change is needed to support CPU hot
    removal.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    [dwg: added missing include to fix compile on some archs]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Gu Zheng ]
  * [4c055ab] cpu: Reclaim vCPU objects.
    In order to deal well with the kvm vcpus (which can not be removed without any
    protection), we do not close KVM vcpu fd, just record and mark it as stopped
    into a list, so that we can reuse it for the appending cpu hot-add request if
    possible. It is also the approach that kvm guys suggested:
    https://www.mail-archive.com/kvm@vger.kernel.org/msg102839.html
    Signed-off-by: Chen Fan <chen.fan.fnst@cn.fujitsu.com>
    Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Signed-off-by: Zhu Guihua <zhugh.fnst@cn.fujitsu.com>
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
                   [- Explicit CPU_REMOVE() from qemu_kvm/tcg_destroy_vcpu()
                      isn't needed as it is done from cpu_exec_exit()
                    - Use iothread mutex instead of global mutex during
                      destroy
                    - Don't cleanup vCPU object from vCPU thread context
                      but leave it to the callers (device_add/device_del)]
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [2c57904] cpu: Add a sync version of cpu_remove()
    This sync API will be used by the CPU hotplug code to wait for the CPU to
    completely get removed before flagging the failure to the device_add
    command.
    Sync version of this call is needed to correctly recover from CPU
    realization failures when ->plug() handler fails.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Eduardo Habkost ]
  * [d30300f] net: vl: Move default_net to vl.c.
    All handling of defaults (default_* variables) is inside vl.c,
    move default_net there too, so we can more easily refactor that
    code later.
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Zhang Chen ]
  * [16a3df4] net/net: Add SocketReadState for reuse codes.
    This function is from net/socket.c, move it to net.c and net.h.
    Add SocketReadState to make others reuse net_fill_rstate().
    suggestion from jason.
    v4:
     - move 'rs->finalize = finalize' to rs_init()
    v3:
     - remove SocketReadState init callback
     - put finalize callback to net_fill_rstate()
    v2:
     - rename ReadState to SocketReadState
     - add SocketReadState init and finalize callback
    v1:
     - init patch
    Signed-off-by: Zhang Chen <zhangchen.fnst@cn.fujitsu.com>
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Signed-off-by: Wen Congyang <wency@cn.fujitsu.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Fam Zheng ]
  * [4485b04] tests: Add utilities for docker testing
    docker.py is added with a number of useful subcommands to manager docker
    images and instances for QEMU docker testing. Subcommands are:
    run: A wrapper of "docker run" (or "sudo -n docker run" if necessary),
    which takes care of killing and removing the running container at
    SIGINT.
    clean: Tear down all the containers including inactive ones that are
    started by docker_run.
    build: Compare an image from given dockerfile and rebuild it if they're
    different.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-2-git-send-email-famz@redhat.com
  * [2f4e4dc] rules.mak: Add "COMMA" constant.
    Using "," literal in $(call quiet-command, ...) arguments is awkward.
    Add this constant to make it at least doable.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-3-git-send-email-famz@redhat.com
  * [fb57c88] Makefile: Always include rules.mak.
    When config-host.mak is not found it is safe to assume SRC_PATH is ".".
    So, it is okay to move inclusion of ruls.mak out of the ifeq condition.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-4-git-send-email-famz@redhat.com
  * [324027c] Makefile: Rules for docker testing.
    This adds a group of make targets to run docker tests, all are available
    in source tree without running ./configure.
    The usage is shown with "make docker".
    Besides the fixed ones, dynamic targets for building each image and
    running each test in each image are generated automatically by make,
    scanning $(SRC_PATH)/tests/docker/ files with specific patterns.
    Alternative to manually list particular targets (docker-TEST@IMAGE)
    set, you can control which tests/images to run by filtering variables,
    TESTS= and IMAGES=, which are expressed in Makefile pattern syntax,
    "foo% %bar ...". For example:
        $ make docker-test IMAGES="ubuntu fedora"
    Unfortunately, it's impossible to propagate "-j $JOBS" into make in
    containers, however since each combination is made a first class target
    in the top Makefile, "make -j$N docker-test" still parallels the tests
    coarsely.
    Still, $J is made a magic variable to let all make invocations in
    containers to use -j$J.
    Instead of providing a live version of the source tree to the docker
    container we snapshot it with git-archive. This ensures the tree is in a
    pristine state for whatever operations the container is going to run on
    them.
    Uncommitted changes known to files known by the git index will be
    included in the snapshot if there are any.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1464755128-32490-5-git-send-email-famz@redhat.com
  * [ca853f0] docker: Add images.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-6-git-send-email-famz@redhat.com
  * [b344aa9] docker: Add test runner.
    It's better to have a launcher for all tests, to make it easier to
    initialize and manage the environment.
    If "DEBUG=1"  a shell prompt will show up before the test runs.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-7-git-send-email-famz@redhat.com
  * [3568f98] docker: Add common.rc
    "requires" checks the "FEATURE" environment for specified prerequisits,
    and skip the execution of test if not found.
    "build_qemu" is the central routine to compile QEMU for tests to call.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-8-git-send-email-famz@redhat.com
  * [b7899d6] docker: Add quick test.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-9-git-send-email-famz@redhat.com
  * [d710ac8] docker: Add full test.
    This builds all available targets.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1464755128-32490-10-git-send-email-famz@redhat.com
  * [c890857] docker: Add clang test.
    The (currently partially commented out) configure options are suggested
    by John Snow <jsnow@redhat.com>.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1464755128-32490-11-git-send-email-famz@redhat.com
  * [c4f0eed] docker: Add mingw test.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-12-git-send-email-famz@redhat.com
  * [d5bd789] docker: Add travis tool.
    The script is not prefixed with test- so it won't run with "make docker-test",
    because it can take too long.
    Run it with "make docker-travis@ubuntu".
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-13-git-send-email-famz@redhat.com
  * [dc2e7ee] docs: Add text for tests/docker in build-system.txt.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-14-git-send-email-famz@redhat.com
  * [35e0f95] docker: Add EXTRA_CONFIGURE_OPTS.
    Whatever passed in this variable will be appended to all
    configure commands.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1464755128-32490-15-git-send-email-famz@redhat.com
  * [8a49e97] MAINTAINERS: Add tests/docker.
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464755128-32490-16-git-send-email-famz@redhat.com
  * [0bc7a6f] .gitignore: Ignore docker source copy.
    Signed-off-by: Fam Zheng <famz@redhat.com>

  [ Dmitry Fleytman ]
  * [059a65f] pci: fix unaligned access in pci_xxx_quad()
    Replace legacy cpu_to_le64w()/le64_to_cpup()
    calls with stq_le_p()/ldq_le_p().
    Motivation for this modification is that
    follow up patches add utility function
    pcie_dev_ser_num_init() for PCIe DSN
    capability creation which uses
    pci_set_quad() with a misaligned offset.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [3bdfaab] msix: make msix_clr_pending() visible for clients.
    This function will be used by e1000e device code.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [83f17ed] pci: Introduce define for PM capability version 1.1.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [6383292] pcie: Add support for PCIe CAP v1.
    Added support for PCIe CAP v1, while reusing some of the existing v2
    infrastructure.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [b56b928] pcie: Introduce function for DSN capability creation.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [a4b387e] vmxnet3: Use generic function for DSN capability definition.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [0478d1d] net: Introduce Toeplitz hash calculator.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [6d1d493] net: Add macros for MAC address tracing.
    These macros will be used by future commits introducing
    e1000e device emulation and by vmxnet3 tracing code.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [ab64787] vmxnet3: Use common MAC address tracing macros.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [605d52e] net_pkt: Name vmxnet3 packet abstractions more generic.
    This patch drops "vmx" prefix from packet abstractions names
    to emphasize the fact they are generic and not tied to any
    specific network device.
    These abstractions will be reused by e1000e emulation implementation
    introduced by following patches so their names need generalization.
    This patch (except renamed files, adjusted comments and changes in MAINTAINTERS)
    was produced by:
    git grep -lz 'vmxnet_tx_pkt' | xargs -0 perl -i'' -pE "s/vmxnet_tx_pkt/net_tx_pkt/g"
    git grep -lz 'vmxnet_rx_pkt' | xargs -0 perl -i'' -pE "s/vmxnet_rx_pkt/net_rx_pkt/g"
    git grep -lz 'VmxnetTxPkt' | xargs -0 perl -i'' -pE "s/VmxnetTxPkt/NetTxPkt/g"
    git grep -lz 'VMXNET_TX_PKT' | xargs -0 perl -i'' -pE "s/VMXNET_TX_PKT/NET_TX_PKT/g"
    git grep -lz 'VmxnetRxPkt' | xargs -0 perl -i'' -pE "s/VmxnetRxPkt/NetRxPkt/g"
    git grep -lz 'VMXNET_RX_PKT' | xargs -0 perl -i'' -pE "s/VMXNET_RX_PKT/NET_RX_PKT/g"
    sed -ie 's/VMXNET_/NET_/g' hw/net/vmxnet_rx_pkt.c
    sed -ie 's/VMXNET_/NET_/g' hw/net/vmxnet_tx_pkt.c
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [66409b7] rtl8139: Move more TCP definitions to common header.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [eb70002] net_pkt: Extend packet abstraction as required by e1000e functionality.
    This patch extends the TX/RX packet abstractions with features that will
    be used by the e1000e device implementation.
    Changes are:
      1. Support iovec lists for RX buffers
      2. Deeper RX packets parsing
      3. Loopback option for TX packets
      4. Extended VLAN headers handling
      5. RSS processing for RX packets
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [1117101] vmxnet3: Use pci_dma_* API instead of cpu_physical_memory_*
    To make this device and network packets
    abstractions ready for IOMMU.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [06e7fa0] e1000_regs: Add definitions for Intel 82574-specific bits.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [093454e] e1000: Move out code that will be reused in e1000e.
    Code that will be shared moved to a separate files.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [6f3fbe4] net: Introduce e1000e device emulation.
    This patch introduces emulation for the Intel 82574 adapter, AKA e1000e.
    This implementation is derived from the e1000 emulation code, and
    utilizes the TX/RX packet abstractions that were initially developed for
    the vmxnet3 device. Although some parts of the introduced code may be
    shared with e1000, the differences are substantial enough so that the
    only shared resources for the two devices are the definitions in
    hw/net/e1000_regs.h.
    Similarly to vmxnet3, the new device uses virtio headers for task
    offloads (for backends that support virtio extensions). Usage of
    virtio headers may be forcibly disabled via a boolean device property
    "vnet" (which is enabled by default). In such case task offloads
    will be performed in software, in the same way it is done on
    backends that do not support virtio headers.
    The device code is split into two parts:
      1. hw/net/e1000e.c: QEMU-specific code for a network device;
      2. hw/net/e1000e_core.[hc]: Device emulation according to the spec.
    The new device name is e1000e.
    Intel specifications for the 82574 controller are available at:
    http://www.intel.com/content/dam/doc/datasheet/82574l-gbe-controller-datasheet.pdf
    Throughput measurement results (iperf2):
                    Fedora 22 guest, TCP, RX
        4 ++------------------------------------------+
          |                                           |
          |                           X   X   X   X   X
      3.5 ++          X   X   X   X                   |
          |       X                                   |
          |                                           |
        3 ++                                          |
    G     |   X                                       |
    b     |                                           |
    / 2.5 ++                                          |
    s     |                                           |
          |                                           |
        2 ++                                          |
          |                                           |
          |                                           |
      1.5 X+                                          |
          |                                           |
          +   +   +   +   +   +   +   +   +   +   +   +
        1 ++--+---+---+---+---+---+---+---+---+---+---+
         32  64  128 256 512  1   2   4   8  16  32  64
          B   B   B   B   B   KB  KB  KB  KB KB  KB  KB
                           Buffer size
                   Fedora 22 guest, TCP, TX
      18 ++-------------------------------------------+
         |                        X                   |
      16 ++                           X   X   X   X   X
         |                   X                        |
      14 ++                                           |
         |                                            |
      12 ++                                           |
    G    |               X                            |
    b 10 ++                                           |
    /    |                                            |
    s  8 ++                                           |
         |                                            |
       6 ++          X                                |
         |                                            |
       4 ++                                           |
         |       X                                    |
       2 ++  X                                        |
         X   +   +   +   +   +    +   +   +   +   +   +
       0 ++--+---+---+---+---+----+---+---+---+---+---+
        32  64  128 256 512  1    2   4   8  16  32  64
         B   B   B   B   B   KB   KB  KB  KB KB  KB  KB
                           Buffer size
                    Fedora 22 guest, UDP, RX
        3 ++------------------------------------------+
          |                                           X
          |                                           |
      2.5 ++                                          |
          |                                           |
          |                                           |
        2 ++                                 X        |
    G     |                                           |
    b     |                                           |
    / 1.5 ++                                          |
    s     |                         X                 |
          |                                           |
        1 ++                                          |
          |                                           |
          |                 X                         |
      0.5 ++                                          |
          |        X                                  |
          X        +        +       +        +        +
        0 ++-------+--------+-------+--------+--------+
         32       64       128     256      512       1
          B        B         B       B        B      KB
                           Datagram size
                    Fedora 22 guest, UDP, TX
        1 ++------------------------------------------+
          |                                           X
      0.9 ++                                          |
          |                                           |
      0.8 ++                                          |
      0.7 ++                                          |
          |                                           |
    G 0.6 ++                                          |
    b     |                                           |
    / 0.5 ++                                          |
    s     |                                  X        |
      0.4 ++                                          |
          |                                           |
      0.3 ++                                          |
      0.2 ++                        X                 |
          |                                           |
      0.1 ++                X                         |
          X        X        +       +        +        +
        0 ++-------+--------+-------+--------+--------+
         32       64       128     256      512       1
          B        B         B       B        B      KB
                           Datagram size
                  Windows 2012R2 guest, TCP, RX
      3.2 ++------------------------------------------+
          |                                   X       |
        3 ++                                          |
          |                                           |
      2.8 ++                                          |
          |                                           |
      2.6 ++                              X           |
    G     |   X                   X   X           X   X
    b 2.4 ++      X       X                           |
    /     |                                           |
    s 2.2 ++                                          |
          |                                           |
        2 ++                                          |
          |           X       X                       |
      1.8 ++                                          |
          |                                           |
      1.6 X+                                          |
          +   +   +   +   +   +   +   +   +   +   +   +
      1.4 ++--+---+---+---+---+---+---+---+---+---+---+
         32  64  128 256 512  1   2   4   8  16  32  64
          B   B   B   B   B   KB  KB  KB  KB KB  KB  KB
                           Buffer size
                 Windows 2012R2 guest, TCP, TX
      14 ++-------------------------------------------+
         |                                            |
         |                                        X   X
      12 ++                                           |
         |                                            |
      10 ++                                           |
         |                                            |
    G    |                                            |
    b  8 ++                                           |
    /    |                                    X       |
    s  6 ++                                           |
         |                                            |
         |                                            |
       4 ++                               X           |
         |                                            |
       2 ++                                           |
         |           X   X            X               |
         +   X   X   +   +   X    X   +   +   +   +   +
       0 X+--+---+---+---+---+----+---+---+---+---+---+
        32  64  128 256 512  1    2   4   8  16  32  64
         B   B   B   B   B   KB   KB  KB  KB KB  KB  KB
                           Buffer size
                  Windows 2012R2 guest, UDP, RX
      1.6 ++------------------------------------------X
          |                                           |
      1.4 ++                                          |
          |                                           |
      1.2 ++                                          |
          |                                  X        |
          |                                           |
    G   1 ++                                          |
    b     |                                           |
    / 0.8 ++                                          |
    s     |                                           |
      0.6 ++                        X                 |
          |                                           |
      0.4 ++                                          |
          |                 X                         |
          |                                           |
      0.2 ++       X                                  |
          X        +        +       +        +        +
        0 ++-------+--------+-------+--------+--------+
         32       64       128     256      512       1
          B        B         B       B        B      KB
                           Datagram size
                  Windows 2012R2 guest, UDP, TX
      0.6 ++------------------------------------------+
          |                                           X
          |                                           |
      0.5 ++                                          |
          |                                           |
          |                                           |
      0.4 ++                                          |
    G     |                                           |
    b     |                                           |
    / 0.3 ++                                 X        |
    s     |                                           |
          |                                           |
      0.2 ++                                          |
          |                                           |
          |                         X                 |
      0.1 ++                                          |
          |                 X                         |
          X        X        +       +        +        +
        0 ++-------+--------+-------+--------+--------+
         32       64       128     256      512       1
          B        B         B       B        B      KB
                           Datagram size
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [7c375e2] e1000e: Introduce qtest for e1000e device.
    Signed-off-by: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Signed-off-by: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Jean-Christophe Dubois ]
  * [50dbce6] net: improve UDP/TCP checksum computation.
     * based on Eth, UDP, TCP struct present in eth.h instead of hardcoded
       indexes and sizes.
     * based on various macros present in eth.h.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [ade6bad] net: handle optional VLAN header in checksum computation.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [4816dc1] i.MX: Fix FEC code for MDIO operation selection.
    According to the FEC chapter of i.MX25 reference manual
    When writing the MMFR register, bit 29 and 28 select the requested operation.
     * 10 means read operation with valid MII mgmt frame
     * 11 means read operation with non compliant MII mgmt frame
     * 01 means write operation with valid MII mgmt frame
     * 00 means write operation with non compliant MII mgmt frame
    So while bit 28 does change beween read/write for valid MII mgmt frame, the
    mening is inverted for non compliant MII mgmt frame.
    Bit 29 on the other hand means read/write whatever the type of mgmt frame
    involved.
    So this patch change the operation selection from bit 28 to bit 29 as it is
    more generic.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [b413643] i.MX: Fix FEC code for MDIO address selection.
    According to the FEC chapter of i.MX25 reference manual
    When writing to MMFR register, the MDIO device and adress are selected by
    bit 27 to 23 and bit 22 to 18 respectively. This is a total of 10 bits
    that need to be used by the Phy chip/address decoding function.
    This patch fixes the number of bits used from 9 to 10.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [ccdb81d] i.MX: Fix FEC code for ECR register reset value.
    According to the FEC chapter of i.MX25 reference manual ECR register is
    initialized at 0xf0000000 at reset time.
    We fix the value.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [ff4b325] i.MX: reset TX/RX descriptors when FEC is disabled.
    According to the FEC chapter of i.MX25 reference manual
    RX adn TX descriptors are reseted when the FEC device is disabled through ECR.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [1bb3c37] i.MX: Rename i.MX FEC defines to ENET_XXX.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [db0de35] i.MX: move FEC device to a register array structure.
    This is to prepare for the ENET Gb device of the i.MX6.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [a699b41] Add ENET/Gbps Ethernet support to FEC device.
    The ENET device (present in i.MX6) is "derived" from FEC and backward
    compatible with it.
    This patch adds the necessary support of the added feature in the ENET
    device to allow Linux to use it (on supported processors).
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [517b5e9] Add ENET device to i.MX6 SOC.
    This adds the ENET device to the i.MX6 SOC.
    This was tested by booting Linux on an Qemu i.MX6 instance and accessing
    the internet from the linux guest.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Cole Robinson ]
  * [38a55bd] ui: egl: Replace fprintf with error_report.
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: c880920f6e40a506394d89dbbe1f67c63d359c17.1463588606.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [daafc66] ui: spice: Exit if gl=on EGL init fails.
    The user explicitly requested spice GL, so if we know it isn't
    going to work we should exit
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: e3789e35b16f9e3cc6f2652f91c52d88ba6d6936.1463588606.git.crobinso@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [41cc523] gtk: fix unchecked vc dereference.
    Spotted by Coverity.
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1463737748-1062-1-git-send-email-kraxel@redhat.com

  [ Pavel Dovgalyuk ]
  * [435deff] SDL2: add bgrx pixel format.
    This patch adds support of b8g8r8x8 pixel format for SDL2.
    Signed-off-by: Pavel Dovgalyuk <pavel.dovgaluk@ispras.ru>
    Message-id: 20160517072848.4540.34695.stgit@PASHA-ISP
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Alexander Graf ]
  * [0c426e4] vnc: Add support for color map.
    Our current VNC code does not handle color maps (aka non-true-color) at all
    and aborts if a client requests them. There are 2 major issues with this:
     1) A VNC viewer on an 8-bit X11 system may request color maps
     2) RealVNC _always_ starts requesting color maps, then moves on to full color
    In order to support these 2 use cases, let's just create a fake color map
    that covers exactly our normal true color 8 bit color space. That way we don't
    lose anything over a client that wants true color.
    Reported-by: Sascha Wehnert <swehnert@suse.com>
    Signed-off-by: Alexander Graf <agraf@suse.de>
    Signed-off-by: Pavel Butsykin <pbutsykin@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Message-id: 1464099559-20789-1-git-send-email-den@openvz.org
    Actually this is a very old patch originally submitted in 2013 by
    Alexander. The situation is still the same with RealVNC, it does not
    connect by default to QEMU VNC. The problem is that this client is
    really popular. This is better to be kludged.
    Signed-off-by: Pavel Butsykin <pbutsykin@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Gerd Hoffmann <kraxel@redhat.com>
    CC: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [8efa5f2] sdl2: skip init without outputs.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Cole Robinson <crobinso@redhat.com>
    Message-id: 1464790116-32405-1-git-send-email-kraxel@redhat.com
  * [c5ce833] vnc: add configurable keyboard delay.
    Limits the rate kbd events from the vnc server are forwarded to the
    guest, so input devices which are typically low-bandwidth can keep
    up even on bulky input.
    v2: update documentation too.
    v3: spell fixes.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Tested-by: Yang Hongyang <hongyang.yang@easystack.cn>
    Message-id: 1464762150-25817-1-git-send-email-kraxel@redhat.com
  * [fa06e5c] virtio-gpu: fix scanout rectangles.
    Commit "ca58b45 ui/virtio-gpu: add and use qemu_create_displaysurface_pixman"
    breaks scanouts which use a region of the underlying resource only.
    So, we need another way to handle the underlying issue.  Lets create a
    new pixman image, grab a reference on the pixman providing the
    underlying storage, hook up a destroy callback which releases the
    reference.  That way regions work again and releasing the backing
    storage should still be impossible thanks to the extra reference we are
    holding.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1464597655-26341-1-git-send-email-kraxel@redhat.com

  [ Peter Krempa ]
  * [e58ff62] audio: pa: Set volume of recording stream instead of recording device.
    Since pulseaudio 1.0 it's possible to set the individual stream volume
    rather than setting the device volume. With this, setting hardware mixer
    of a emulated sound card doesn't mess up the volume configuration of the
    host.
    A side effect is that this limits compatible pulseaudio version to 1.0
    which was released on 2011-09-27.
    Signed-off-by: Peter Krempa <pkrempa@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 78853815be2069971b89b3a2e3181837064dd8f3.1462962512.git.pkrempa@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ xiaoqiang zhao ]
  * [ff2df54] hw/audio: QOM'ify cs4231.c.
    Drop the old SysBus init function and use instance_init
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1463111220-30335-2-git-send-email-zxq_yx_007@163.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [e19202a] hw/audio: QOM cleanup for intel-hda
    drop the DO_UPCAST macro
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1463111220-30335-3-git-send-email-zxq_yx_007@163.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [bda8d9b] hw/audio: QOM'ify intel-hda
    * use DeviceClass::realize instead of DeviceClass::init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1463111220-30335-4-git-send-email-zxq_yx_007@163.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [07b9098] hw/audio: QOM'ify milkymist-ac97.c
    * Drop the old SysBus init function and use instance_init
    * Move AUD_open_in / AUD_open_out function into realize stage
    Acked-by: Michael Walle <michael@walle.cc>
    Tested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1463111220-30335-5-git-send-email-zxq_yx_007@163.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Dmitry Fleytman ]
  * [defbaec] e1000e: Fix build with ust trace backend
    ust trace backend has limitation of maximum 10
    arguments per event. Traces with more arguments
    cannot be compiled for this backend.
    Trace e1000e_rx_rss_ip6 introduced by previous
    commits has 11 arguments and fails to compile with
    ust trace backend.
    This patch fixes the problem by splitting this
    tracepoint into two successive tracepoints with
    smaller number of arguments.
    For more information see comment regarding TP_ARGS
    in lttng/tracepoint.h:
    /*
    * TP_ARGS takes tuples of type, argument separated by a comma.
    * It can take up to 10 tuples (which means that less than 10 tuples is
    * fine too).
    * Each tuple is also separated by a comma.
    */
    Build log generated by this problem:
    In file included from ./trace/generated-tracers.h:9:0,
                     from /home/travis/build/qemu/qemu/include/trace.h:4,
                     from util/oslib-posix.c:36:
    ./trace/generated-ust-provider.h:16556:3: error: unknown type name ‘_TP_EXPROTO_Bool’
    In file included from /home/travis/build/qemu/qemu/include/trace.h:4:0,
                     from util/oslib-posix.c:36:
    ./trace/generated-tracers.h: In function ‘trace_e1000e_rx_rss_ip6’:
    ./trace/generated-tracers.h:8379:431: error: expected string literal before ‘_SDT_ASM_OPERANDS_ipv6_enabled’
    ./trace/generated-tracers.h:8379:431: error: implicit declaration of function ‘__tracepoint_cb_qemu___e1000e_rx_rss_ip6’ [-Werror=implicit-function-declaration]
    ./trace/generated-tracers.h:8379:431: error: nested extern declaration of ‘__tracepoint_cb_qemu___e1000e_rx_rss_ip6’ [-Werror=nested-externs]
    cc1: all warnings being treated as errors
    make: *** [util/oslib-posix.o] Error 1
    make: *** Waiting for unfinished jobs....
    In file included from ./trace/generated-tracers.h:9:0,
                     from /home/travis/build/qemu/qemu/include/trace.h:4,
                     from util/hbitmap.c:16:
    ./trace/generated-ust-provider.h:16556:3: error: unknown type name ‘_TP_EXPROTO_Bool’
    In file included from /home/travis/build/qemu/qemu/include/trace.h:4:0,
                     from util/hbitmap.c:16:
    ./trace/generated-tracers.h: In function ‘trace_e1000e_rx_rss_ip6’:
    ./trace/generated-tracers.h:8379:431: error: expected string literal before ‘_SDT_ASM_OPERANDS_ipv6_enabled’
    ./trace/generated-tracers.h:8379:431: error: implicit declaration of function ‘__tracepoint_cb_qemu___e1000e_rx_rss_ip6’ [-Werror=implicit-function-declaration]
    ./trace/generated-tracers.h:8379:431: error: nested extern declaration of ‘__tracepoint_cb_qemu___e1000e_rx_rss_ip6’ [-Werror=nested-externs]
    cc1: all warnings being treated as errors
    make: *** [util/hbitmap.o] Error 1
    Signed-off-by: Dmitry Fleytman <dmitry@daynix.com>
    Message-id: 1464894748-27803-1-git-send-email-dmitry@daynix.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Richard Henderson ]
  * [4910e6e] target-*: dfilter support for in_asm.
    The arm target was handled by 06486077, but other targets
    were ignored.  This handles all the rest which actually support
    disassembly (that is, skipping moxie and tilegx).
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Gerd Hoffmann ]
  * [5213602] vmsvga: move fifo sanity checks to vmsvga_fifo_length.
    Sanity checks are applied when the fifo is enabled by the guest
    (SVGA_REG_CONFIG_DONE write).  Which doesn't help much if the guest
    changes the fifo registers afterwards.  Move the checks to
    vmsvga_fifo_length so they are done each time qemu is about to read
    from the fifo.
    Fixes: CVE-2016-4454
    Cc: qemu-stable@nongnu.org
    Cc: P J P <ppandit@redhat.com>
    Reported-by: 李强 <liqiang6-s@360.cn>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1464592161-18348-2-git-send-email-kraxel@redhat.com
  * [c2e3c54] vmsvga: add more fifo checks.
    Make sure all fifo ptrs are within range.
    Fixes: CVE-2016-4454
    Cc: qemu-stable@nongnu.org
    Cc: P J P <ppandit@redhat.com>
    Reported-by: 李强 <liqiang6-s@360.cn>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1464592161-18348-3-git-send-email-kraxel@redhat.com
  * [7e486f7] vmsvga: shadow fifo registers.
    The fifo is normal ram.  So kvm vcpu threads and qemu iothread can
    access the fifo in parallel without syncronization.  Which in turn
    implies we can't use the fifo pointers in-place because the guest
    can try changing them underneath us.  So add shadows for them, to
    make sure the guest can't modify them after we've applied sanity
    checks.
    Fixes: CVE-2016-4454
    Cc: qemu-stable@nongnu.org
    Cc: P J P <ppandit@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1464592161-18348-4-git-send-email-kraxel@redhat.com
  * [4e68a0e] vmsvga: don't process more than 1024 fifo commands at once
    vmsvga_fifo_run is called in regular intervals (on each display update)
    and will resume where it left off.  So we can simply exit the loop,
    without having to worry about how processing will continue.
    Fixes: CVE-2016-4453
    Cc: qemu-stable@nongnu.org
    Cc: P J P <ppandit@redhat.com>
    Reported-by: 李强 <liqiang6-s@360.cn>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1464592161-18348-5-git-send-email-kraxel@redhat.com
  * [0c244e5] virtio-gpu: add live migration support.
    Store some additional state for cursor and resource backing storage,
    so we can write out and reload things.  Implement vmsave+vmload for
    2d mode.  Continue blocking live migration in 3d/virgl mode.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1464009727-7753-1-git-send-email-kraxel@redhat.com

  [ Dmitry Fleytman ]
  * [de5dca1] e1000e: Fix build with gcc 4.6.3 and ust tracing.
    This patch fixes used-uninitialized false
    positive while compiling with ust tracing
    backend plus gcc 4.6.3:
    hw/net/e1000e.c: In function ‘e1000e_io_write’:
    hw/net/e1000e.c:170:39: error: ‘idx’ may be used uninitialized in this function [-Werror=uninitialized]
    hw/net/e1000e.c: In function ‘e1000e_io_read’:
    hw/net/e1000e.c:145:35: error: ‘idx’ may be used uninitialized in this function [-Werror=uninitialized]
    cc1: all warnings being treated as errors
    make: *** [hw/net/e1000e.o] Error 1
    Signed-off-by: Dmitry Fleytman <dmitry@daynix.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Message-id: 1465023763-10773-1-git-send-email-dmitry@daynix.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Greg Kurz ]
  * [aae91ad] 9p: some more cleanup in #include directives.
    The "9p-attr.h" header isn't needed by 9p synth and virtio 9p.
    While here, also drop last references to virtio from 9p synth since it is
    now transport agnostic code.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
  * [af8b38b] 9p/fsdev: remove obsolete references to virtio.
    Most of the 9p code is now virtio agnostic. This patch does a final cleanup:
    - drop references to Virtio from the header comments
    - fix includes
    Also drop a couple of leading empty lines while here.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
  * [beff62e] 9p: drop useless inclusion of hw/i386/pc.h.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
  * [8762a46] 9p: drop useless out: label.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
  * [f314ea4] 9p: introduce the V9fsDir type.
    If we are to switch back to readdir(), we need a more complex type than
    DIR * to be able to serialize concurrent accesses to the directory stream.
    This patch introduces a placeholder type and fixes all users.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
  * [7cde47d] 9p: add locking to V9fsDir.
    If several threads concurrently call readdir() with the same directory
    stream pointer, it is possible that they all get a pointer to the same
    dirent structure, whose content is overwritten each time readdir() is
    called.
    We must thus serialize accesses to the dirent structure.
    This may be achieved with a mutex like below:
    lock_mutex();
    readdir();
    // work with the dirent
    unlock_mutex();
    This patch adds all the locking, to prepare the switch to readdir().
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
  * [635324e] 9p: switch back to readdir()
    This patch changes the 9p code to use readdir() again instead of
    readdir_r(), which is deprecated in glibc 2.24.
    All the locking was put in place by a previous patch.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>

  [ Peter Wu ]
  * [5819e3e] gdbstub: avoid busy loop while waiting for gdb.
    While waiting for a gdb response, or while sending an acknowledgement
    there is not much to do, so do not mark the socket as non-blocking to
    avoid a busy loop while paused at gdb. This only affects the user-mode
    emulation (qemu-arm -g 1234 ./a.out).
    Note that this issue was reported before at
    https://lists.nongnu.org/archive/html/qemu-devel/2013-02/msg02277.html.
    While at it, close the gdb client fd on EOF or error while reading.
    Signed-off-by: Peter Wu <peter@lekensteyn.nl>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Mark Cave-Ayland ]
  * [890e48d] scsi-disk: fix reads from scsi-disk devices.
    Commit fcaafb1001b9c42817714dd3b2aadcfdb997b53d accidentally broke reads from
    scsi-disk devices when being updated from its original form to use the new
    byte-based block functions. Add the extra missing sector to offset conversion
    in order to restore read functionality.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Tested-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1464931021-25117-1-git-send-email-mark.cave-ayland@ilande.co.uk
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Alistair Francis ]
  * [2a5a9ab] target-arm: Add the HSTR_EL2 register.
    Add the Hypervisor System Trap Register for EL2.
    This register is used early in the Linux boot and without it the kernel
    aborts with a "Synchronous Abort" error.
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: ea5aae4b10283de4705b864fe9d4bd2eaddaacae.1463174342.git.alistair.francis@xilinx.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Edgar E. Iglesias ]
  * [aaa1f95] target-arm: A64: Create Instruction Syndromes for Data Aborts.
    Add support for generating the ISS (Instruction Specific Syndrome) for
    Data Abort exceptions taken from AArch64.
    These syndromes are used by hypervisors for example to trap and emulate
    memory accesses.
    We save the decoded data out-of-band with the TBs at translation time.
    When exceptions hit, the extra data attached to the TB is used to
    recreate the state needed to encode instruction syndromes.
    This avoids the need to emit moves with every load/store.
    Based on a suggestion from Peter Maydell.
    Suggested-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1462464601-10888-2-git-send-email-edgar.iglesias@gmail.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [04ce861] target-arm: Set IL bit in syndromes for insn abort, watchpoint, swstep.
    For some exception syndrome types, the IL bit should always be set.
    This includes the instruction abort, watchpoint and software step
    syndrome types; add the missing ARM_EL_IL bit to the syndrome
    values returned by syn_insn_abort(), syn_swstep() and syn_watchpoint().
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1463487258-27468-2-git-send-email-peter.maydell@linaro.org
  * [78f1edb] target-arm: Don't try to set ESR IL bit in arm_cpu_do_interrupt_aarch64()
    Remove some incorrect code from arm_cpu_do_interrupt_aarch64()
    which attempts to set the IL bit in the syndrome register based
    on the value of env->thumb. This is wrong in several ways:
     * IL doesn't indicate Thumb-vs-ARM, it indicates instruction
       length (which may be 16 or 32 for Thumb and is always 32 for ARM)
     * not every syndrome format uses IL like this -- for some IL is
       always set, and for some it is always clear
     * the code is changing esr_el[new_el] even for interrupt entry,
       which is not supposed to modify ESR_ELx at all
    Delete the code, and instead rely on the syndrome value in
    env->exception.syndrome having already been set up with the
    correct value of IL.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Tested-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: 1463487258-27468-3-git-send-email-peter.maydell@linaro.org

  [ Ard Biesheuvel ]
  * [e40c3d2] hw/arm/virt: fix limit of 64-bit ACPI/ECAM PCI MMIO range.
    Set the MMIO range limit field to 'base + size - 1' as required.
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1463856217-17969-1-git-send-email-ard.biesheuvel@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Jens Wiklander ]
  * [fea8a08] hw/intc/gic: RAZ/WI non-sec access to sec interrupts.
    Treat non-secure accesses to registers and bits in registers of secure
    interrupts as RAZ/WI.
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Message-id: 1464273945-2055-1-git-send-email-jens.wiklander@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cédric Le Goater ]
  * [1602001] i2c: add aspeed i2c controller.
    The Aspeed AST2400 integrates a set of 14 I2C/SMBus bus controllers
    directly connected to the APB bus. They can be programmed as master or
    slave but the propopsed model only supports the master mode.
    On the TODO list, we also have :
     - improve and harden the state machine.
     - bus recovery support (used by the Linux driver).
     - transfer mode state machine bits. this is not strictly necessary as
       it is mostly used for debug. The bus busy bit is deducted from the
       I2C core engine of qemu.
     - support of the pool buffer: 2048 bytes of internal SRAM (not used
       by the Linux driver).
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Message-id: 1464704307-25178-1-git-send-email-clg@kaod.org
    [PMM: removed unused functions aspeed_i2c_bus_get_state() and
     aspeed_i2c_bus_set_state()]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cole Robinson ]
  * [0bf8039] hw/arm/virt: Reject gic-version=host for non-KVM.
    If you try to gic-version=host with TCG on a KVM aarch64 host,
    qemu segfaults, since host requires KVM APIs.
    Explicitly reject gic-version=host if KVM is not enabled
    https://bugzilla.redhat.com/show_bug.cgi?id=1339977
    Signed-off-by: Cole Robinson <crobinso@redhat.com>
    Message-id: b1b3b0dd143b7995a7f4062966b80a2cf3e3c71e.1464273085.git.crobinso@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Edgar E. Iglesias ]
  * [37d4247] xlnx-zynqmp: Add a secure prop to en/disable ARM Security Extensions.
    Add a secure prop to en/disable ARM Security Extensions.
    This is particularly useful for KVM runs.
    Default to disabled to match the behavior of KVM.
    This changes the default setup from having the ARM Security
    Extensions to not longer having them.
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: 1464173555-12800-2-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [6ed92b1] xlnx-zynqmp: Make the RPU subsystem optional.
    The way we currently model the RPU subsystem is of quite
    limited use. In addition to that, it causes problems for
    KVM and for GDB debugging.
    Make the RPU optional by adding a has_rpu property and
    default to having it disabled.
    This changes the default setup from having the RPU to not
    longer having it.
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: 1464173555-12800-3-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [0776d96] xlnx-zynqmp: Delay realization of GIC until post CPU realization.
    Delay the realization of the GIC until after CPUs are
    realized. This is needed for KVM as the in-kernel GIC
    model will fail if it is realized with no available CPUs.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: 1464173555-12800-4-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [2a0ee67] xlnx-zynqmp: Use the in kernel GIC model for KVM runs.
    Use the in kernel GIC model when running with KVM enabled.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: 1464173555-12800-5-git-send-email-edgar.iglesias@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Dmitry Osipenko ]
  * [e91171e] hw/ptimer: Fix issues caused by the adjusted timer limit value.
    Multiple issues here related to the timer with a adjusted .limit value:
    1) ptimer_get_count() returns incorrect counter value for the disabled
    timer after loading the counter with a small value, because adjusted limit
    value is used instead of the original.
    For instance:
        1) ptimer_stop(t)
        2) ptimer_set_period(t, 1)
        3) ptimer_set_limit(t, 0, 1)
        4) ptimer_get_count(t) <-- would return 10000 instead of 0
    2) ptimer_get_count() might return incorrect value for the timer running
    with a adjusted limit value.
    For instance:
        1) ptimer_stop(t)
        2) ptimer_set_period(t, 1)
        3) ptimer_set_limit(t, 10, 1)
        4) ptimer_run(t)
        5) ptimer_get_count(t) <-- might return value > 10
    3) Neither ptimer_set_period() nor ptimer_set_freq() are adjusting the
    limit value, so it is still possible to make timer timeout value
    arbitrary small.
    For instance:
        1) ptimer_set_period(t, 10000)
        2) ptimer_set_limit(t, 1, 0)
        3) ptimer_set_period(t, 1) <-- bypass limit correction
    Fix all of the above issues by adjusting timer period instead of the limit.
    Perform the adjustment for periodic timer only. Use the delta value instead
    of the limit to make decision whether adjustment is required, as limit could
    be altered while timer is running, resulting in incorrect value returned by
    ptimer_get_count.
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Message-id: cd141f74f5737480ec586b9c7d18cce1d69884e2.1464367869.git.digetx@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [5a50307] hw/ptimer: Perform counter wrap around if timer already expired
    ptimer_get_count() might be called while QEMU timer already been expired.
    In that case ptimer would return counter = 0, which might be undesirable
    in case of polled timer. Do counter wrap around for periodic timer to keep
    it distributed. In order to achieve more accurate emulation behaviour of
    certain hardware, don't perform wrap around when in icount mode and return
    counter = 0 in that case (that doesn't affect polled counter distribution).
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Message-id: 4ce381c7d24d85d165ff251d2875d16a4b6a5c04.1464367869.git.digetx@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [7ef6e3c] hw/ptimer: Update .delta on period/freq change.
    Delta value must be updated on period/freq change, otherwise running timer
    would be restarted (counter reloaded with old delta). Only m68k/mcf520x
    and arm/arm_timer devices are currently doing freq change correctly, i.e.
    stopping the timer. Perform delta update to fix affected devices and
    eliminate potential further mistakes.
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Message-id: 4987ef5fdc128bb9a744fd794d3f609135c6a39c.1464367869.git.digetx@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [869e92b] hw/ptimer: Support "on the fly" timer mode switch.
    Allow switching between periodic <-> oneshot modes while timer is running.
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Message-id: f030be6e28fbd219e1e8d22297aee367bd9af5bb.1464367869.git.digetx@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [578c4b2] hw/ptimer: Introduce ptimer_get_limit.
    Currently ptimer users are used to store copy of the limit value, because
    ptimer doesn't provide facility to retrieve the limit. Let's provide it.
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Message-id: 8f1fa9f90d8dbf8086fb02f3b4835eaeb4089cf6.1464367869.git.digetx@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ xiaoqiang zhao ]
  * [f0d1d2c] hw/char: QOM'ify pl011 model
    * drop qemu_char_get_next_serial and use chardev prop
    * add pl011_create wrapper function to create pl011 uart device
    * change affected board code to use the new way
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465028065-5855-2-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [4be12ea] hw/char: QOM'ify cadence_uart model
    * drop qemu_char_get_next_serial and use chardev prop
    * create cadence_uart_create wrapper function to create
      cadence_uart_device
    * change affected board code to use the new way
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465028065-5855-3-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [746c3b3] hw/char: QOM'ify digic-uart model
    * drop qemu_char_get_next_serial and use chardev prop
    * change affected board code to use the new way
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465028065-5855-4-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [7bd4351] hw/char: QOM'ify stm32f2xx_usart model
    * drop qemu_char_get_next_serial and use chardev prop
    * change affected board code to use the new way
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465028065-5855-5-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [1b6d078] hw/char: QOM'ify xilinx_uartlite model
    * drop qemu_char_get_next_serial and use chardev prop
    * create xilinx_uartlite_create wrapper function to create
      xilinx_uartlite device
    * change affected board code to use the new way
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465028065-5855-6-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e5fabad] char: get rid of qemu_char_get_next_serial
    since there is no user of qemu_char_get_next_serial any more,
    it's time to let it go away.
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465028065-5855-7-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Sergey Sorokin ]
  * [6e99f76] target-arm: Fix TTBR selecting logic on AArch32 Stage 2 translation.
    Address size is 40-bit for the AArch32 stage 2 translation,
    and t0sz can be negative (from -8 to 7),
    so we need to adjust it to use the existing TTBR selecting logic.
    Signed-off-by: Sergey Sorokin <afarallax@yandex.ru>
    Message-id: 1464974151-1231644-1-git-send-email-afarallax@yandex.ru
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Alistair Francis ]
  * [0c18c6c] zynqmp: Add the ZCU102 board.
    Most Zynq UltraScale+ users will be targetting and using the ZCU102
    board instead of the development focused EP108. To make our QEMU machine
    names clearer add a ZCU102 machine model.
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: cc82eec026b2febfca252d73362bb7084616c1ad.1464213234.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Fam Zheng ]
  * [46e7b70] tests: Rename tests/Makefile to tests/Makefile.include.
    The file is only included from the top Makefile. Rename it to reflect
    this more obviously.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1464747811-26917-1-git-send-email-famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Gerd Hoffmann ]
  * [8156d48] pc: allow raising low memory via max-ram-below-4g option.
    This patch extends the functionality of the max-ram-below-4g option
    to also allow increasing lowmem.  Use case: Give as much memory as
    possible to legacy non-PAE guests.
    While being at it also rework the lowmem calculation logic and add a
    longish comment describing how it works and what the compatibility
    constrains are.
    Note:  This is a incompatible change.  When setting max-ram-below-4g to
    a value larger than 3.5G (or 3G with gigabyte alignment) it has no
    effect on older qemu versions: qemu silently ignores it.  With the patch
    applied it actually has an effect and changes the ram layout.  Highly
    unlikely to hit in practive though as there is no reason start old qemu
    versions that way.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <1464857305-26675-1-git-send-email-kraxel@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ xiaoqiang zhao ]
  * [4b3eec9] hw/char: QOM'ify escc.c (fix)
    The previous commit e7c9136977cb99c6eb52c9139f7b8d8b5fa87db9
    (hw/char: QOM'ify escc.c) cause qemu-system-ppc/ppc64
    OpenBIOS to freeze on startup, this commit fix it.
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Message-Id: <1464767898-30526-1-git-send-email-zxq_yx_007@163.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Prasad J Pandit ]
  * [ff58955] scsi: esp: check TI buffer index before read/write.
    The 53C9X Fast SCSI Controller(FSC) comes with internal 16-byte
    FIFO buffers. One is used to handle commands and other is for
    information transfer. Three control variables 'ti_rptr',
    'ti_wptr' and 'ti_size' are used to control r/w access to the
    information transfer buffer ti_buf[TI_BUFSZ=16]. In that,
    'ti_rptr' is used as read index, where read occurs.
    'ti_wptr' is a write index, where write would occur.
    'ti_size' indicates total bytes to be read from the buffer.
    While reading/writing to this buffer, index could exceed its
    size. Add check to avoid OOB r/w access.
    Reported-by: Huawei PSIRT <psirt@huawei.com>
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1465230883-22303-1-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [6214a11] scsi: mark TYPE_SCSI_DISK_BASE as abstract.
    Suggested-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Talha Imran ]
  * [a575d9a] target-ppc/fpu_helper: Fix efscmp* instructions handling.
    With specification at hand from the reference manual from Freescale
    http://cache.nxp.com/files/32bit/doc/ref_manual/SPEPEM.pdf , I have found a fix
    to efscmp* instructions handling in QEMU.
    efscmp* instructions in QEMU set crD (Condition Register nibble) values as
    (0b0100 << 2) = 0b10000 (consider the HELPER_SINGLE_SPE_CMP macro which left
    shifts the value returned by efscmp* handler by 2 bits). A value of 0b10000 is
    not correct according the to the reference manual.
    The reference manual expects efscmp* instructions to return a value of 0bx1xx.
    Please find attached a patch which disables left shifting in
    HELPER_SINGLE_SPE_CMP macro. This macro is used by efscmp* and efstst*
    instructions only. efstst* instruction handlers, in turn, call efscmp* handlers
    too.
    *Explanation:*
    Traditionally, each crD (condition register nibble) consist of 4 bits, which is
    set by comparisons as follows:
    crD = W X Y Z
    where
    W = Less than
    X = Greater than
    Y = Equal to
    However, efscmp* instructions being a special case return a binary result.
    (efscmpeq will set the crD = 0bx1xx iff when op1 == op2 and 0bx0xx otherwise;
    i.e. there is no notion of different crD values based on Less than, Greater
    than and Equal to).
    This effectively means that crD will store a "Greater than" comparison result
    iff efscmp* instruction comparison is TRUE. Compiler exploits this feature by
    checking for "Branch if Less than or Equal to" (ble instruction) OR "Branch if
    Greater than" (bgt instruction) for Branch if FALSE OR Branch if TRUE
    respectively after an efscmp* instruction. This can be seen in a assembly code
    snippet below:
    27          if (__real__ x != 3.0f || __imag__ x != 4.0f)
    10000498:   lwz r10,8(r31)
    1000049c:   lis r9,16448
    100004a0:   efscmpeq cr7,r10,r9
    100004a4:   ble- cr7,0x100004b8 <bar+60>  //jump to abort() call
    100004a8:   lwz r10,12(r31)
    100004ac:   lis r9,16512
    100004b0:   efscmpeq cr7,r10,r9
    100004b4:   bgt- cr7,0x100004bc <bar+64>  //skip abort() call
    28            abort ();
    100004b8:   bl 0x10000808 <abort>
    Signed-off-by: Talha Imran <talha_imran@mentor.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [44f2e6c] kvm: API to obtain max supported mem slots.
    Introduce kvm_get_max_memslots() API that can be used to obtain the
    maximum number of memslots supported by KVM.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Alexey Kardashevskiy ]
  * [705124e] vmstate: Define VARRAY with VMS_ALLOC.
    This allows dynamic allocation for migrating arrays.
    Already existing VMSTATE_VARRAY_UINT32 requires an array to be
    pre-allocated, however there are cases when the size is not known in
    advance and there is no real need to enforce it.
    This defines another variant of VMSTATE_VARRAY_UINT32 with WMS_ALLOC
    flag which tells the receiving side to allocate memory for the array
    before receiving the data.
    The first user of it is a dynamic DMA window which existence and size
    are totally dynamic.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [df7625d] spapr_iommu: Introduce "enabled" state for TCE table.
    Currently TCE tables are created once at start and their sizes never
    change. We are going to change that by introducing a Dynamic DMA windows
    support where DMA configuration may change during the guest execution.
    This changes spapr_tce_new_table() to create an empty zero-size IOMMU
    memory region (IOMMU MR). Only LIOBN is assigned by the time of creation.
    It still will be called once at the owner object (VIO or PHB) creation.
    This introduces an "enabled" state for TCE table objects, some
    helper functions are added:
    - spapr_tce_table_enable() receives TCE table parameters, stores in
    sPAPRTCETable and allocates a guest view of the TCE table
    (in the user space or KVM) and sets the correct size on the IOMMU MR;
    - spapr_tce_table_disable() disposes the table and resets the IOMMU MR
    size; it is made public as the following DDW code will be using it.
    This changes the PHB reset handler to do the default DMA initialization
    instead of spapr_phb_realize(). This does not make differenct now but
    later with more than just one DMA window, we will have to remove them all
    and create the default one on a system reset.
    No visible change in behaviour is expected except the actual table
    will be reallocated every reset. We might optimize this later.
    The other way to implement this would be dynamically create/remove
    the TCE table QOM objects but this would make migration impossible
    as the migration code expects all QOM objects to exist at the receiver
    so we have to have TCE table objects created when migration begins.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [a26fdf3] spapr_iommu: Migrate full state.
    The source guest could have reallocated the default TCE table and
    migrate bigger/smaller table. This adds reallocation in post_load()
    if the default table size is different on source and destination.
    This adds @bus_offset, @page_shift to the migration stream as
    a subsection so when DDW is added, migration to older machines will
    still be possible. As @bus_offset and @page_shift are not used yet,
    this makes no change in behavior.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [b4b6eb7] spapr_iommu: Add root memory region.
    We are going to have multiple DMA windows at different offsets on
    a PCI bus. For the sake of migration, we will have as many TCE table
    objects pre-created as many windows supported.
    So we need a way to map windows dynamically onto a PCI bus
    when migration of a table is completed but at this stage a TCE table
    object does not have access to a PHB to ask it to map a DMA window
    backed by just migrated TCE table.
    This adds a "root" memory region (UINT64_MAX long) to the TCE object.
    This new region is mapped on a PCI bus with enabled overlapping as
    there will be one root MR per TCE table, each of them mapped at 0.
    The actual IOMMU memory region is a subregion of the root region and
    a TCE table enables/disables this subregion and maps it at
    the specific offset inside the root MR which is 1:1 mapping of
    a PCI address space.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [acf1b6d] spapr_pci: Reset DMA config on PHB reset.
    LoPAPR dictates that during system reset all DMA windows must be removed
    and the default DMA32 window must be created so does the patch.
    At the moment there is just one window supported so no change in
    behaviour is expected.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [b3162f2] spapr_pci: Add and export DMA resetting helper.
    This will be later used by the "ibm,reset-pe-dma-window" RTAS handler
    which resets the DMA configuration to the defaults.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [71c9a3d] spapr: Increase hotpluggable memory slots to 256.
    KVM now supports 512 memslots on PowerPC (earlier it was 32). Allow half
    of it (256) to be used as hotpluggable memory slots.
    Instead of hard coding the max value, use the KVM supplied value if KVM
    is enabled. Otherwise resort to the default value of 32.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [1ea1eef] spapr: Introduce pseries-2.7 machine type.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [932ccbd] ppc: Better figure out if processor has HV mode.
    We use an env. flag which is set to the initial value of MSR_HVB in
    the msr_mask. We also adjust the POWER8 mask to set SHV.
    Also use this to adjust ctx.hv so that it is *set* when the processor
    doesn't have an HV mode (970 with Apple mode for example), thus enabling
    hypervisor instructions/SPRs.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [clg: ctx.hv used to be defined only for the hypervisor kernel
          (HV=1|PR=0). It is now defined also when PR=1 and conditions are
          fixed accordingly.
          stripped unwanted tabs.]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [1c953ba] ppc: Fix hreg_store_msr() so that non-HV mode cannot alter MSR:HV.
    This helper is only used by the various instructions that can alter
    MSR and not interrupts. Add a comment to that effect to the interrupt
    code as well in case somebody wants to change this
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Cédric Le Goater ]
  * [1c7336c] ppc: fix hrfid, tlbia and slbia privilege
    commit 74693da98894 ('ppc: tlbie, tlbia and tlbisync are HV only')
    introduced some extra checks on the instruction privilege. slbia was
    changed wrongly and hrfid, tlbia were forgotten.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Markus Armbruster ]
  * [679dd41] spapr_pci: Drop cannot_instantiate_with_device_add_yet=false.
    It's become redundant since it was added in commit 09aa9a5 "spapr-pci:
    enable adding PHB via -device".
    Cc: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Mark Cave-Ayland ]
  * [9207113] target-ppc: fixup bitrot in mmu_helper.c debug statements.
    This fixes compilation of mmu_helper.c when all of the debug #defines at
    the start of the file are enabled.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [ddd495e] macio: use DMA memory interface for non-block ATAPI transfers.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [8865588] dbdma: use DMA memory interface for memory accesses.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [f5d9c10] ppc: Properly tag the translation cache based on MMU mode.
    We used to always flush the TLB when changing relocation mode in
    MSR:IR and MSR:DR (ie. MMU on/off for Instructions and Data).
    We don't anymore since we have split mmu_idx for instruction and data.
    However, since we hard code the mmu_idx in the translated code, we
    now need to also make sure MSR:IR and MSR:DR are part of the hflags
    used to tag translated code, so that we use different translated
    code for different MMU settings.
    Darwin gets hurt by this problem.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [3dcfb74] ppc: Fix tlb invalidations on 6xx/7xx/7xxx 32-bit processors.
    The processor only uses some bits of the address and invalidates an
    entire congruence class. Some OSes such as Darwin and HelenOS take
    advantage of this and occasionally invalidate the entire TLB by just
    doing a series of 64 consecutive tlbie for example.
    Our code tries to be too smart here only invalidating a segment
    congruence class (ie, allowing more address bits to be relevant
    in the invalidation), this fails miserably on those OSes.
    Instead don't bother, do like ppc64 and blow the whole tlb when tlbie
    is executed.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [c5a8d8f] ppc: Batch TLB flushes on 32-bit 6xx/7xx/7xxx in hash mode.
    This ports the existing 64-bit mechanism to 32-bit, thus series
    of 64 tlbie's followed by a sync like some versions of Darwin
    (ab)use will result in a single flush.
    We apply a pending flush on any sync instruction though, as Darwin
    doesn't use tlbsync on non-SMP systems.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [8eb0f56] ppc: POWER7 had ACOP and PID registers.
    We only had them on POWER8, add them to POWER7 as well
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [dfdd3e4] ppc: POWER7 has lq/stq instructions and stq need to check ISA.
    The PPC_64BX instruction flag is used for a couple of newer
    instructions currently on POWER8 but our implementation for
    them works for POWER7 too (and already does the proper checking
    of what is permitted) with one exception: stq needs to check
    the ISA version.
    This fixes the latter and add the instructions to POWER7
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [5e31867] ppc: Fix mtmsr decoding.
    We had code to handle the L bit in the opcode but we didn't
    allow it in the decode mask.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [2f9254d] ppc: Fix slbia decode.
    Since at least the 2.05 architecture, the slbia instruction takes an
    IH field in the opcode to provide some control on the effect of the
    slbia on the ERATs (level-1 TLB).
    We can safely ignore it as we always flush the whole qemu TLB but
    we should allow the bits in the decode.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [c76c22d] ppc: Add missing slbfee. instruction on ppc64 BookS processors.
    Used to lookup SLB entries by address, for some reason it was missing.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [4d6a068] ppc: Do not take exceptions on unknown SPRs in privileged mode.
    The architecture specifies that mtspr/mfspr on an unknown SPR number
    should act as a nop in privileged mode.
    I haven't removed the warning however as it can be useful for
    diagnosing.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Laurent Vivier ]
  * [3bef045] linux-user: Fix qemu-binfmt-conf.sh to store config across reboot.
    Original qemu-binfmt-conf.sh is only able to write configuration
    into /proc/sys/fs/binfmt_misc, and the configuration is lost on reboot.
    This script can configure debian and systemd services to restore
    configuration on reboot. Moreover, it is able to manage binfmt
    credential and to configure the path of the interpreter.
    List of supported CPU is:
    i386 i486 alpha arm sparc32plus ppc ppc64 ppc64le
    m68k mips mipsel mipsn32 mipsn32el mips64 mips64el
    sh4 sh4eb s390x aarch64
    Usage: qemu-binfmt-conf.sh [--qemu-path PATH][--debian][--systemd CPU]
                               [--help][--credential yes|no][--exportdir PATH]
           Configure binfmt_misc to use qemu interpreter
           --help:       display this usage
           --qemu-path:  set path to qemu interpreter (/usr/local/bin)
           --debian:     don't write into /proc,
                         instead generate update-binfmts templates
           --systemd:    don't write into /proc,
                         instead generate file for systemd-binfmt.service
                         for the given CPU
           --exportdir:  define where to write configuration files
                         (default: /etc/binfmt.d or /usr/share/binfmts)
           --credential: if yes, credential an security tokens are
                         calculated according to the binary to interpret
        To import templates with update-binfmts, use :
            sudo update-binfmts --importdir /usr/share/binfmts --import qemu-CPU
        To remove interpreter, use :
            sudo update-binfmts --package qemu-CPU --remove qemu-CPU /usr/local/bin
        With systemd, binfmt files are loaded by systemd-binfmt.service
        The environment variable HOST_ARCH allows to override 'uname' to generate
        configuration files for a different architecture than the current one.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Alexander Graf <agraf@suse.de>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [6c5b564] linux-user: add rtnetlink(7) support
    rtnetlink is needed to use iproute package (ip addr, ip route)
    and dhcp client.
    Examples:
    Without this patch:
        # ip link
        Cannot open netlink socket: Address family not supported by protocol
        # ip addr
        Cannot open netlink socket: Address family not supported by protocol
        # ip route
        Cannot open netlink socket: Address family not supported by protocol
        # dhclient eth0
        Cannot open netlink socket: Address family not supported by protocol
        Cannot open netlink socket: Address family not supported by protocol
    With this patch:
        # ip link
        1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT
            link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        51: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT qlen 1000
            link/ether 00:16:3e:89:6b:d7 brd ff:ff:ff:ff:ff:ff
        # ip addr show eth0
        51: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP qlen 1000
            link/ether 00:16:3e:89:6b:d7 brd ff:ff:ff:ff:ff:ff
            inet 192.168.122.197/24 brd 192.168.122.255 scope global eth0
               valid_lft forever preferred_lft forever
            inet6 fe80::216:3eff:fe89:6bd7/64 scope link
               valid_lft forever preferred_lft forever
        # ip route
        default via 192.168.122.1 dev eth0
        192.168.122.0/24 dev eth0  proto kernel  scope link  src 192.168.122.197
        # ip addr flush eth0
        # ip addr add 192.168.122.10 dev eth0
        # ip addr show eth0
        51: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP qlen 1000
            link/ether 00:16:3e:89:6b:d7 brd ff:ff:ff:ff:ff:ff
            inet 192.168.122.10/32 scope global eth0
               valid_lft forever preferred_lft forever
        # ip route add 192.168.122.0/24 via 192.168.122.10
        # ip route
            192.168.122.0/24 via 192.168.122.10 dev eth0
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [b265620] linux-user: support netlink protocol NETLINK_KOBJECT_UEVENT.
    This is the protocol used by udevd to manage kernel events.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [5ce9bb5] linux-user: add netlink audit.
    This is, for instance, needed to log in a container.
    Without this, the user cannot be identified and the console login
    fails with "Login incorrect".
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [575b22b] linux-user: check if NETLINK_ROUTE is available.
    Some IFLA_* symbols can be missing in the host linux/if_link.h,
    but as they are enums and not "#defines", check in "configure" if
    last known  (IFLA_PROTO_DOWN) is available and if not, disable
    management of NETLINK_ROUTE protocol.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Prasad J Pandit ]
  * [844864f] scsi: megasas: null terminate bios version buffer.
    While reading information via 'megasas_ctrl_get_info' routine,
    a local bios version buffer isn't null terminated. Add the
    terminating null byte to avoid any OOB access.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Fam Zheng ]
  * [d41d4da] Makefile: Add a "FORCE" target.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1464774261-648-2-git-send-email-famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [5533501] Makefile: add dependency on scripts/create_config.
    Make sure that config-host.h and config-target.h are rebuilt whenever
    there is a change in the scripts that generates them; add the dependency
    to the pattern rule as suggested by Peter.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [0ab0c99] Makefile: add dependency on scripts/make_device_config.sh.
    Make sure that config-devices.mak is rebuilt whenever
    there is a change in the scripts that generates it.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [077de81] Makefile: add dependency on scripts/hxtool.
    Make sure that the various documentation and C code files are rebuilt
    whenever there is a change in the script that splits them out of
    .hx files.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Fam Zheng ]
  * [67a1de0] Makefile: Derive "PKGVERSION" from "git describe" by default.
    Currently, if not specified in "./configure", QEMU_PKGVERSION will be
    empty. Write a rule in Makefile to generate a value from "git describe"
    combined with a possible git tree cleanness suffix, and write into a new
    header.
        $ cat qemu-version.h
        #define QEMU_PKGVERSION "-v2.6.0-557-gd6550e9-dirty"
    Include the header in .c files where the macro is referenced. It's not
    necessary to include it in all files, otherwise each time the content of
    the file changes, all sources have to be recompiled.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1464774261-648-3-git-send-email-famz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [ed45cae] scsi-disk: add missing break.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Robert Ho ]
  * [99a9a52] vnc: list the 'to' parameter of '-vnc' in the qemu man page.
    Signed-off-by: Robert Ho <robert.hu@intel.com>
    Message-Id: <1464678190-9290-2-git-send-email-robert.hu@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Igor Mammedov ]
  * [d19587d] tests: acpi: report names of expected files in verbose mode
    print expected file name if it doesn't exists if
    verbose mode is enabled*. It helps to avoid running
    bios-tables-test under debugger to figure out missing
    file name.
    *)
    verbose mode is enabled if "V" env. variable is set
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [e897741] acpi: add aml_debug()
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [7bc6fd2] acpi: add aml_refof()
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [86958d2] pc: acpi: remove AML for empty/not used GPE handlers.
    ACPI spec requires GPE handlers only for GPE events
    that hardware implements.
    So remove AML for not supported by QEMU device model
    events.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [7c2991f] pc: acpi: consolidate CPU hotplug AML
    move the former SSDT part of CPU hoplug close to DSDT part.
    AML is only moved but there isn't any functional change.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [8edf77e] pc: acpi: consolidate \GPE._E02 with the rest of CPU hotplug AML.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [a630bb3] pc: acpi: cpu-hotplug: make AML CPU_foo defines local to cpu_hotplug_acpi_table.c
    now as those defines are used only locally inside of
    cpu_hotplug_acpi_table.c, move them out of header file.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [96e3e12] pc: acpi: mark current CPU hotplug functions as legacy.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [672a287] pc: acpi: consolidate legacy CPU hotplug in one file.
    Since AML part of CPU hotplug is tightly coupled with
    its hardware part (IO port layout/protocol), move
    build_legacy_cpu_hotplug_aml() to cpu_hotplug.c
    and remove empty cpu_hotplug_acpi_table.c
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [ebd8ea8] pc: acpi: simplify build_legacy_cpu_hotplug_aml() signature
    since IO block used by CPU hotplug is fixed size and
    initialized it the same file as build_legacy_cpu_hotplug_aml()
    just use ACPI_GPE_PROC_LEN directly instead of passing
    it around in several files.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [76bdd24] pc: acpi: cpuhp-legacy: switch ProcessorID to possible_cpus idx.
    In legacy cpu-hotplug ProcessorID == APIC ID is used
    in MADT and cpu-hotplug AML. It was fine as both
    are 8bit and unique. Spec depricated Processor()
    with corresponding ProcessorID and advises to use
    Device() and UID instead of it.
    However UID is just 32bit and it can't fit ARM's
    arch_id(MPIDR) which is 64bit. Also in case of
    sparse arch_id() distribution, managment/lookup
    of maps by arch_id(APIC ID/MPIDR) becomes complex
    and expensive.
    In preparation to common CPU hotplug with ARM
    and to simplify lookup in possible_cpus[] map
    switch ProcessorID to possible_cpus index in
    MADT.
    Legacy cpu-hotplug considerations:
    HW interface of it is APIC ID based bitmask so
    it's impossible to change, also CPON package in
    AML also APIC ID based as well all the methods.
    To avoid massive rewrite of AML keep is so and
    just break assumption that ProcessorID == APIC ID,
    ammending CPU_MAT_METHOD to accept APIC ID and
    possible_cpus index, it needs them both to patch
    MADT entry template. Also switch to possible_cpus
    index Processor(ProcessorID) AML.
    That way changes to MADT/AML are minimal and kept
    inside AML/MADT not affecting external interfaces.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [53c400a] tests: acpi: update tables with consolidated legacy cpu-hotplug AML.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Corey Minyard ]
  * [15139b8] ipmi: rework the fwinfo to be fetched from the interface.
    Instead of scanning IPMI devices from a fwinfo list, allow
    the fwinfo to be fetched from the IPMI interface class.
    Then the code looking for IPMI fwinfo can scan devices on a
    bus and look for ones that implement the IPMI class.
    This will let the ACPI scope be defined by the calling
    code so the IPMI code doesn't have to know the scope.
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [6d42eef] pc: Postpone SMBIOS table installation to post machine init.
    This is the same place that the ACPI SSDT table gets added, so that
    devices can add themselves to the SMBIOS table.
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Igor Mammedov ]
  * [eaf23bf] acpi: extend ACPI interface to provide send_event hook
    send_event() hook will allow to send ACPI event in
    a target specific way (GPE or GPIO based impl.)
    it will also simplify proxy wrappers in piix4pm/ich9
    that access ACPI regs and SCI which are part of
    piix4pm/lcp_ich9 devices and call acpi_foo() API directly.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [0058c08] pc: use AcpiDeviceIfClass.send_event to issue GPE events
    it reduces number of args passed in handlers by 1 and
    a number of used proxy wrappers saving ~20LOC.
    Also it allows to make cpu/mem hotplug code more
    universal as it would allow ARM to reuse it without
    rewrite by providing its own send_event callback
    to trigger events usiong GPIO instead of GPE
    as fixed hadrware ACPI model doen't have GPE at all.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [0e9b9ed] acpi: convert linker from GArray to BIOSLinker structure.
    Patch just changes type of of linker variables to
    a structure, there aren't any functional changes.
    Converting linker to a structure will allow to extend
    it functionality in follow up patch adding sanity blob
    checks.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [ad9671b] acpi: simplify bios_linker API by removing redundant 'table' argument
    'table' argument in bios_linker_add_foo() commands is
    a data blob of one of files also passed to the same API.
    So instead of passing blob in every API call, add and keep
    file name association with related blob at bios_linker_loader_alloc()
    time.
    And find blob by name looking up allocated file entries
    inside of bios_linker_add_foo() commands.
    It will:
     - make API less confusing,
     - enforce calling bios_linker_loader_alloc() before
       calling any bios_linker_add_foo()
     - make sure that blob is the correct one, i.e.
       associated with the right file name
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [8cc87c3] acpi: cleanup bios_linker_loader_cleanup()
    bios_linker_loader_cleanup() is called only from one place
    and returned value is immediately freed wich makes returning
    pointer from bios_linker_loader_cleanup() useless.
    Cleanup bios_linker_loader_cleanup() by freeing
    data there so that caller won't have to free it.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [9774ccf] tpm: apci: cleanup TCPA table initialization.
    At the time build_tpm_tcpa() is called the tcpalog size is
    always 0, so log_area_start_address which is actually offset
    from the start of ACPI_BUILD_TPMLOG_FILE is always 0.
    Also as 'TCPA' is allocated 0 filled, there is no point
    in calculating always 0 log_area_start_address and set
    tcpa->log_area_start_address to it since the field should
    always point to start of ACPI_BUILD_TPMLOG_FILE.
    Make code easier to read dropping not needed offset
    calculations.
    While at that move tcpalog allocation closer to the code
    that defines its size.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [4678124] acpi: make bios_linker_loader_add_pointer() API offset based
    cleanup bios_linker_loader_add_pointer() API by switching
    arguments to taking offsets relative to corresponding files
    instead of doing pointer arithmetic on behalf of user which
    were confusing.
    Also make offset inside of source file explicit in API
    so that user won't have to manually set it in
    destination file blob and while at it add additional
    boundary checks.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [28213cb] acpi: make bios_linker_loader_add_checksum() API offset based.
    It should help to make clear that bios_linker works in terms
    of offsets within a file. Also it should prevent mistakes
    where user passes as arguments pointers to unrelated to file blobs.
    While at it, considering that it's a ACPI checksum and
    it's initial value must be 0, move checksum field zeroing
    into bios_linker_loader_add_checksum() instead of doing it
    at every call site manually before bios_linker_loader_add_checksum()
    is called.
    In addition add extra boundary checks.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Xiao Guangrong ]
  * [3c3e88a] pc-dimm: get memory region from ->get_memory_region()
    Curretly, the memory region of backed memory is all directly
    mapped to guest's address space, however, it will be not true
    for nvdimm device if we introduce nvdimm label which only can
    be indirectly accessed by ACPI DSM method
    Also it improves the comments a bit to reflect this fact
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [9f318f8] pc-dimm: introduce realize callback
    nvdimm needs to  check if the backend memory is large enough to contain
    label data and init its memory region when the device is realized, so
    introduce realize callback which is called after common dimm has been
    realize
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Greg Kurz ]
  * [c02d703] virtio: move bi-endian target support to a single location.
    Paolo's recent cpu.h cleanups broke legacy virtio for ppc64 LE guests (and
    arm BE guests as well, even if I have not verified that). Especially, commit
    "33c11879fd42 qemu-common: push cpu.h inclusion out of qemu-common.h" has
    the side-effect of silently hiding the TARGET_IS_BIENDIAN macro from the
    virtio memory accessors, and thus fully disabling support of endian changing
    targets.
    To be sure this cannot happen again, let's gather all the bi-endian bits
    where they belong in include/hw/virtio/virtio-access.h.
    The changes in hw/virtio/vhost.c are safe because vhost_needs_vring_endian()
    is not called on a hot path and non bi-endian targets will return false
    anyway.
    While here, also rename TARGET_IS_BIENDIAN to be more precise: it is only for
    legacy virtio and bi-endian guests.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Maydell ]
  * [eb55250] linux-user: Factor out handle_signal code from process_pending_signals()
    Factor out the code to handle a single signal from the
    process_pending_signals() function. The use of goto for flow control
    is OK currently, but would get significantly uglier if extended to
    allow running the handle_signal code multiple times.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [e902d58] linux-user: Move handle_pending_signal() to avoid need for declaration.
    Move the handle_pending_signal() function above process_pending_signals()
    to avoid the need for a forward declaration. (Whitespace only change.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [7ec87e0] linux-user: Fix stray tab-indent.
    Fix a stray tab-indented linux in linux-user/signal.c.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [9eede5b] linux-user: Factor out uses of do_sigprocmask() from sigreturn code.
    All the architecture specific handlers for sigreturn include calls
    to do_sigprocmask(SIGSETMASK, &set, NULL) to set the signal mask
    from the uc_sigmask in the context being restored. Factor these
    out into calls to a set_sigmask() function. The next patch will
    want to add code which is not run when setting the signal mask
    via do_sigreturn, and this change allows us to separate the two
    cases.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [b28a1f3] linux-user: Define macro for size of host kernel sigset_t.
    Some host syscalls take an argument specifying the size of a
    host kernel's sigset_t (which isn't necessarily the same as
    that of the host libc's type of that name). Instead of hardcoding
    _NSIG / 8 where we do this, define and use a SIGSET_T_SIZE macro.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [2fe4fba] linux-user: Use safe_syscall for sigsuspend syscalls.
    Use the safe_syscall wrapper for sigsuspend syscalls. This
    means that we will definitely deliver a signal that arrives
    before we do the sigsuspend call, rather than blocking first
    and delivering afterwards.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [3d3efba] linux-user: Fix race between multiple signals.
    If multiple host signals are received in quick succession they would
    be queued in TaskState then delivered to the guest in spite of
    signals being supposed to be blocked by the guest signal handler's
    sa_mask. Fix this by decoupling the guest signal mask from the
    host signal mask, so we can have protected sections where all
    host signals are blocked. In particular we block signals from
    when host_signal_handler() queues a signal from the guest until
    process_pending_signals() has unqueued it. We also block signals
    while we are manipulating the guest signal mask in emulation of
    sigprocmask and similar syscalls.
    Blocking host signals also ensures the correct behaviour with respect
    to multiple threads and the overrun count of timer related signals.
    Alas blocking and queuing in qemu is still needed because of virtual
    processor exceptions, SIGSEGV and SIGBUS.
    Blocking signals inside process_pending_signals() protects against
    concurrency problems that would otherwise happen if host_signal_handler()
    ran and accessed the signal data structures while process_pending_signals()
    was manipulating them.
    Since we now track the guest signal mask separately from that
    of the host, the sigsuspend system calls must track the signal
    mask passed to them, because when we process signals as we leave
    the sigsuspend the guest signal mask in force is that passed to
    sigsuspend.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-19-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: make signal_pending a simple flag rather than a word with two flag bits;
     ensure we don't call block_signals() twice in sigreturn codepaths;
     document and assert() the guarantee that using do_sigprocmask() to
     get the current mask never fails;  use the qemu atomics.h functions
     rather than raw volatile variable access; add extra commentary and
     documentation; block SIGSEGV/SIGBUS in block_signals() and in
     process_pending_signals() because they can't occur synchronously here;
     check the right do_sigprocmask() call for errors in ssetmask syscall;
     expand commit message; fixed sigsuspend() hanging]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Timothy E Baldwin ]
  * [c19c157] linux-user: Remove redundant default action check in queue_signal()
    Both queue_signal() and process_pending_signals() did check for default
    actions of signals, this is redundant and also causes fatal and stopping
    signals to incorrectly cause guest system calls to be interrupted.
    The code in queue_signal() is removed.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-21-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [8fdb9fe] linux-user: Remove redundant gdb_queuesig()
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-22-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [907f5fd] linux-user: Remove real-time signal queuing.
    As host signals are now blocked whenever guest signals are blocked, the
    queue of realtime signals is now in Linux. The QEMU queue is now
    redundant and can be removed. (We already did not queue non-RT signals, and
    none of the calls to queue_signal() except the one in host_signal_handler()
    pass an RT signal number.)
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-23-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: minor commit message tweak]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [655ed67] linux-user: Queue synchronous signals separately.
    If a synchronous signal and an asynchronous signal arrive near simultaneously,
    and the signal number of the asynchronous signal is lower than that of the
    synchronous signal the the handler for the asynchronous would be called first,
    and then the handler for the synchronous signal would be called within or
    after the first handler with an incorrect context.
    This is fixed by queuing synchronous signals separately. Note that this does
    risk delaying a asynchronous signal until the synchronous signal handler
    returns rather than handling the signal on another thread, but this seems
    unlikely to cause problems for real guest programs and is unavoidable unless
    we could guarantee to roll back and reexecute whatever guest instruction
    caused the synchronous signal (which would be a bit odd if we've already
    logged its execution, for instance, and would require careful analysis of
    all guest CPUs to check it was possible in all cases).
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-24-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: added a comment]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [ef6a778] linux-user: Block signals during sigaction() handling.
    Block signals while emulating sigaction. This is a non-interruptible
    syscall, and using block_signals() avoids races where the host
    signal handler is invoked and tries to examine the signal handler
    data structures while we are updating them.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-29-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: expanded commit message]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [f59ec60] linux-user: pause() should not pause if signal pending.
    Fix races between signal handling and the pause syscall by
    reimplementing it using block_signals() and sigsuspend().
    (Using safe_syscall(pause) would also work, except that the
    pause syscall doesn't exist on all architectures.)
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-28-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    [PMM: tweaked commit message]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [a099588] linux-user: Restart exit() if signal pending.
    Without this a signal could vanish on thread exit.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-26-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Peter Maydell ]
  * [bef653d] linux-user: Use safe_syscall for kill, tkill and tgkill syscalls.
    Use the safe_syscall wrapper for the kill, tkill and tgkill syscalls.
    Without this, if a thread sent a SIGKILL to itself it could kill the
    thread before we had a chance to process a signal that arrived just
    before the SIGKILL, and that signal would get lost.
    We drop all the ifdeffery for tkill and tgkill, because every guest
    architecture we support implements them, and they've been in Linux
    since 2003 so we can assume the host headers define the __NR_tkill
    and __NR_tgkill constants.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Timothy E Baldwin ]
  * [7d92d34] linux-user: Restart fork() if signals pending.
    If there is a signal pending during fork() the signal handler will
    erroneously be called in both the parent and child, so handle any
    pending signals first.
    Signed-off-by: Timothy Edward Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
    Message-id: 1441497448-32489-20-git-send-email-T.E.Baldwin99@members.leeds.ac.uk
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Peter Maydell ]
  * [a70dadc] linux-user: Use both si_code and si_signo when converting siginfo_t.
    The siginfo_t struct includes a union. The correct way to identify
    which fields of the union are relevant is complicated, because we
    have to use a combination of the si_code and si_signo to figure out
    which of the union's members are valid.  (Within the host kernel it
    is always possible to tell, but the kernel carefully avoids giving
    userspace the high 16 bits of si_code, so we don't have the
    information to do this the easy way...) We therefore make our best
    guess, bearing in mind that a guest can spoof most of the si_codes
    via rt_sigqueueinfo() if it likes.  Once we have made our guess, we
    record it in the top 16 bits of the si_code, so that tswap_siginfo()
    later can use it.  tswap_siginfo() then strips these top bits out
    before writing si_code to the guest (sign-extending the lower bits).
    This fixes a bug where fields were sometimes wrong; in particular
    the LTP kill10 test went into an infinite loop because its signal
    handler got a si_pid value of 0 rather than the pid of the sending
    process.
    As part of this change, we switch to using __put_user() in the
    tswap_siginfo code which writes out the byteswapped values to
    the target memory, in case the target memory pointer is not
    sufficiently aligned for the host CPU's requirements.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Stefan Hajnoczi ]
  * [271b385] tests: avoid coroutine pool test crash.
    Skip the test_co_queue test case if the coroutine pool is not enabled.
    The test case does not work without the pool because it touches memory
    belonging to a freed coroutine (on purpose).
    Reported-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1463767231-13379-1-git-send-email-stefanha@redhat.com

  [ Fam Zheng ]
  * [0d97891] blockdev-backup: Use bdrv_lookup_bs on target.
    This allows backing up to a BDS that has not been attached to any BB.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1463969978-24970-2-git-send-email-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [efd7556] blockdev-backup: Don't move target AioContext if it's attached.
    If the BDS is attached, it will want to stay on the AioContext where its
    BlockBackend is. Don't call bdrv_set_aio_context in this case.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1463969978-24970-3-git-send-email-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [3482958] virtio-blk: Remove op blocker for dataplane.
    Block layer is prepared to unspecialize dataplane, an evidence is this
    almost complete list of unblocked operations. It has all types except
    two (actually three if DATAPLANE itself counts but blockdev.c makes sure
    attaching twice is not possible): MIRROR_TARGET and BACKUP_TARGET.
    blockdev-mirror refuses to start if target is attached, so the first is
    not a problem.
    By removing BACKUP_TARGET, blockdev-backup will become permissive to
    write to a virtio-blk dataplane disk, but that is not worse than
    non-dataplane given the latter is already possible. In either case,
    blockdev.c always checks the target and source are on the same
    AioContext, or bring them together if possible.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Message-id: 1463969978-24970-4-git-send-email-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [ef8875b] virtio-scsi: Remove op blocker for dataplane.
    The previous patch dropped all op blockers from virtio-blk data plane.
    The situation of virtio-scsi is exactly the same it can drop them too.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Message-id: 1463969978-24970-5-git-send-email-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Stefan Hajnoczi ]
  * [3a90c4a] virtio: drop duplicate virtio_queue_get_id() function.
    The virtio_queue_get_id() function is the lesser used duplicate of
    virtio_get_queue_index().  Use the latter instead.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1463767461-17922-1-git-send-email-stefanha@redhat.com

  [ Kevin Wolf ]
  * [a7944df] block/io: Remove unused bdrv_aio_write_zeroes()
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Message-id: 1464599852-15392-1-git-send-email-kwolf@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Changlong Xie ]
  * [e3a4f91] iostatus: fix comments for block_job_iostatus_reset.
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Message-id: 1464600491-23340-1-git-send-email-xiecl.fnst@cn.fujitsu.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Peter Lieven ]
  * [117bc3f] block/io: optimize bdrv_co_pwritev for small requests
    in a read-modify-write cycle a small request might cause
    head and tail to fall into the same aligned block. Currently
    QEMU reads the same block twice in this case which is
    not necessary.
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Message-id: 1464607873-28206-1-git-send-email-pl@kamp.de
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Eric Blake ]
  * [4157426] block: Move BlockRequest type to io.c.
    I was thrown by the fact that the public type BlockRequest had
    an anonymous union, but no obvious discriminator.  Turns out
    that the only client of the second branch of the union was code
    internal to io.c, now that commit 91c6e4b killed public
    multiwrite, so move it into io.c and improve the comments.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463699150-19445-1-git-send-email-eblake@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>

  [ Fam Zheng ]
  * [c8a9fd8] block: Drop bdrv_ioctl_bh_cb.
    Similar to the "!drv || !drv->bdrv_aio_ioctl" case above, here it is
    okay to set co.ret and return. As pointed out by Paolo, a BH will be
    created as necessary by the caller (bdrv_co_maybe_schedule_bh).
    Besides, as pointed out by Kevin, "data" was leaked before.
    Reported-by: Kevin Wolf <kwolf@redhat.com>
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 20160601015223.19277-1-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Stefan Hajnoczi ]
  * [8860eab] throttle: refuse iops-size without iops-total/read/write.
    In a similar vein to commit ee2bdc33c913b7d765baa5aa338c29fb30a05c9a
    ("throttle: refuse bps_max/iops_max without bps/iops") it is likely that
    the user made a configuration error if iops-size has been set but no
    iops limit has been set.
    Print an error message so the user can check their throttling
    configuration.  They should either remove iops-size if they don't want
    any throttling or specify one of iops-total, iops-read, or iops-write.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Message-id: 1464828031-25601-1-git-send-email-stefanha@redhat.com

  [ Eduardo Habkost ]
  * [d5aebef] docker: Don't use eval trick on Makefile.
    The eval trick for defining DOCKER_SRC_COPY doesn't do anything
    useful, as DOCKER_SRC_COPY is immediately expanded just after it
    is defined, and CUR_TIME is already defined using ":=". Simply
    define it using ":=" so it is evaluated only once.
    The eval trick was also triggering an weird error on Travis builds:
      qemu/tests/docker/Makefile.include:34: *** unterminated variable reference.  Stop.
    The issue is not easily reproducible (maybe it's a bug in some
    versions of Make), but it is avoided if removing the eval trick.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Michael Tokarev ]
  * [b34aee5] s390x/virtio-ccw: fix spelling.
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [a6210f5] hw/ipmi: fix spelling.
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
    Acked-by: Corey Minyard <cminyard@mvista.com>
  * [d33c8a7] docs: "specify" spell fix.
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [e35916a] qga: spelling fix.
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [395fe5f] fsdev: spelling fix.
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Stefan Weil ]
  * [a5cbe92] target-moxie: Remove unused struct elements.
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Jan Vesely ]
  * [891f8dc] po/Makefile: call rm -f directly.
    Default variables are undefined in rules.mak and this is what the rest
    of the build system uses.
    Fixes make clean in ./po/
    Signed-off-by: Jan Vesely <jano.vesely@gmail.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Peter Wu ]
  * [96165b9] gdbstub: set listen backlog to 1.
    Avoid possible connection drops on Linux (when tcp_syncookies is
    disabled) or fallbacks to SYN cookies with the following kernel warning:
        TCP: request_sock_TCP: Possible SYN flooding on port 1234. Sending cookies.  Check SNMP counters.
    Since Linux 4.4 (ef547f2ac16b "tcp: remove max_qlen_log"), a backlog of
    zero is really treated as the "queue length for completely established
    sockets waiting to be accepted" (listen(2)). This is apparently a valid
    interpretation of an "implementation-defined minimum value" for a
    backlog value of 0 (listen(3p)). Previous kernels would use 8 as
    minimum value, but that is no longer the case.
    Signed-off-by: Peter Wu <peter@lekensteyn.nl>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Laurent Vivier ]
  * [e9d5150] scripts: add muldiv64() checking coccinelle scripts.
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [3498686] The only 64bit parameter of muldiv64() is the first one.
    muldiv64() is "uint64_t muldiv64(uint64_t a, uint32_t b, uint32_t c)"
    Some time it is used as muldiv64(uint32_t a, uint64_t b, uint32_t c)"
    This patch is the result of coccinelle script
    scripts/coccinelle/swap_muldiv64.cocci to reorder arguments.
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [cd1f16f] remove useless muldiv64()
    muldiv64(a, 1, b) is like "a / b".
    This patch is the result of coccinelle script
    scripts/coccinelle/remove_muldiv64.cocci.
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [c00dc67] replace muldiv64(a, b, c) by (uint64_t)a * b / c.
    When "a" and "b" are 32bit values, we don't have to cast
    them to 128bit, 64bit is enough.
    This patch is the result of coccinelle script
    scripts/coccinelle/simplify_muldiv64.cocci
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    For xtensa PIC:
    Acked-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [a2c5eaf] ppc: Remove a potential overflow in muldiv64()
    The coccinelle script:
    scripts/coccinelle/overflow_muldiv64.cocci
    gives us a list of potential overflows in muldiv64()
    (the two first parameters are 64bit values).
    This patch fixes one, as the fix seems obvious:
    replace muldiv64(a, b, c) by muldiv64(b, a, c)
    as "a" and "b" are 64bit values but a <= NANOSECONDS_PER_SECOND.
    (10^9 -> 30bit value).
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ James Clarke ]
  * [6969ec6] Fix linking relocatable objects on Sparc.
    On Sparc, gcc implicitly passes --relax to the linker, but -r is
    incompatible with this. Therefore, if --no-relax is supported, it should
    be passed to the linker.
    Signed-off-by: James Clarke <jrtc27@jrtc27.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Peter Maydell ]
  * [9640401] qemu-options.hx: Specify the units for -machine kvm_shadow_mem.
    The -machine kvm_shadow_mem option takes a size in bytes; say
    so explicitly in its documentation.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reported-by: Tobi (github.com/tobimensch)
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Stefan Weil ]
  * [8913885] configure: Use $(..) instead of deprecated `..`
    This fixes these warnings from shellcheck:
        ^-- SC2006: Use $(..) instead of deprecated `..`
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [bbd9080] scripts: Use $(..) instead of deprecated `..`
    This fixes these warnings from shellcheck:
        ^-- SC2006: Use $(..) instead of deprecated `..`
    Update also a comment using the same pattern.
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Cao jin ]
  * [0668a06] ICH9: fix typo.
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Eric Blake ]
  * [3b7c78c] monitor: Typo fix
    s/partinal/partial/
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Cao jin ]
  * [d9d8d45] qdev: Clean up around properties
    include:
    1. remove unnecessary declaration of static function
    2. fix inconsistency between comment and function name, and typo OOM->QOM
    2. update comments of functions, use uniform format(GTK-Doc style)
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [a8d38f3] fw_cfg: follow CODING_STYLE.
    Replace tab with 4 spaces; brace the indented statement.
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Acked-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Peter Maydell ]
  * [2d7fede] replay: Clean up includes.
    Clean up includes so that osdep.h is included first and headers
    which it implies are not included manually.
    This commit was created with scripts/clean-includes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [24a6e06] hw: Clean up includes.
    Clean up includes so that osdep.h is included first and headers
    which it implies are not included manually.
    This commit was created with scripts/clean-includes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Alberto Garcia ]
  * [0bab0eb] docs: Fix a couple of typos in throttle.txt.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Steven Luo ]
  * [9e87a69] Fix configure test for PBKDF2 in nettle.
    On my Debian jessie system, including nettle/pbkdf2.h does not cause
    NULL to be defined, which causes the test to fail to compile.  Include
    stddef.h to bring in a definition of NULL.
    Cc: qemu-trivial@nongnu.org
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Steven Luo <steven+qemu@steven676.net>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Sameeh Jubran ]
  * [b92233b] e1000: Removing unnecessary if statement.
    Since mit_delay can never be 0 this if statement is
    superfluous.
    Signed-off-by: Sameeh Jubran <sameeh@daynix.com>
    Reviewed-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Igor Mammedov ]
  * [2087533] pc: cleanup unused struct PcRomPciInfo.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Peter Maydell ]
  * [df891b9] clean-includes: Add glib.h to list of unneeded includes
    osdep.h pulls in glib.h via glib-compat.h, so add it to the list of
    includes that we remove. (This then means we must avoid running
    clean-includes on glib-compat.h or it will delete the glib.h include.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Tested-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [79ffb27] tests: Remove unnecessary glib.h includes.
    Remove glib.h includes, as it is provided by osdep.h.
    This commit was created with scripts/clean-includes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Tested-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [36a2c2d] qga: Remove unnecessary glib.h includes.
    Remove glib.h includes, as it is provided by osdep.h.
    This commit was created with scripts/clean-includes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Tested-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [030c98a] all: Remove unnecessary glib.h includes.
    Remove glib.h includes, as it is provided by osdep.h.
    This commit was created with scripts/clean-includes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Tested-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Wei Jiangang ]
  * [aa5982e] docs/multi-thread-compression: Fix wrong command string
    s/info_migrate_capabilities/info migrate_capabilities
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Liang Li <liang.z.li@intel.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Eric Blake ]
  * [e52eeb4] host-utils: Prefer 'false' for bool type.
    Mixing '0' and 'bool' looks stupid.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Peter Maydell ]
  * [0d5c21f] qemu-common.h: Drop WORDS_ALIGNED define.
    The WORDS_ALIGNED #define is not used anywhere, and hasn't been since
    2013 when commit 612d590ebc6cef rewrote the various ld<type>_<endian>_p
    functions to not use it. Remove the #define and the comment describing it.
    Also remove the line in the comment about TARGET_WORDS_ALIGNED, since
    it has never actually existed.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [7a00217] thunk: Drop unused NO_THUNK_TYPE_SIZE guards.
    The thunk_type_size_array() and thunk_type_align_array() functions
    are only provided if NO_THUNK_TYPE_SIZE is not defined. However
    nothing in the codebase defines that, and so in fact these functions
    are always present. Drop the unnecessary #ifdefs.
    (Over a decade ago thunk.h used to be included by some softmmu
    files, which defined NO_THUNK_TYPE_SIZE, but these includes are
    long gone; see for instance commit f193c7979c2f7.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [e0ca2ed] thunk: Rename args and fields in host-target bitmask conversion code.
    The target_to_host_bitmask() and host_to_target_bitmask() functions
    and the associated struct bitmask_transtbl are completely generic,
    but for historical reasons the target related fields and parameters
    are named 'x86' and the host related fields are named 'alpha'.
    Rename them to 'target' and 'host'.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Laurent Vivier ]
  * [db718b4] coccinelle: use macro DIV_ROUND_UP instead of (((n) + (d) - 1) /(d))
    sample from http://coccinellery.org/
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [969401f] parallels: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: qemu-block@nongnu.org
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [d737b78] qcow/qcow2: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: qemu-block@nongnu.org
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [c41a73f] qed: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: qemu-block@nongnu.org
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [13385ae] block: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: qemu-block@nongnu.org
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [207ba7c] crypto: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Daniel P. Berrange <berrange@redhat.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Daniel P. Berrange <berrange@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [d0448de] xen: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [b988a65] audio: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [5d61caf] SPICE: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [df5d1c1] rocker: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Scott Feldman <sfeldma@gmail.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [66c68a1] usb: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [8069568] slirp: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Acked-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [b1b2db2] linux-user: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Riku Voipio <riku.voipio@iki.fi>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [5029b96] qemu-timer: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>
  * [30f549c] hbitmap: Use DIV_ROUND_UP.
    Replace (((n) + (d) - 1) /(d)) by DIV_ROUND_UP(n,d).
    This patch is the result of coccinelle script
    scripts/coccinelle/round.cocci
    CC: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Michael Tokarev <mjt@tls.msk.ru>

  [ Marc-André Lureau ]
  * [3dab9fa] tests: start a /qga/guest-exec test.
    Test a few guest-exec guest agent commands, added in qemu 2.5.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>

  [ Peter Maydell ]
  * [90c0f08] linux-user: Avoid possible misalignment in target_to_host_siginfo()
    Reimplement target_to_host_siginfo() to use __get_user(), which
    handles possibly misaligned source guest structures correctly.
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [9e02473] linux-user: provide frame information in x86-64 safe_syscall.
    Use cfi directives in the x86-64 safe_syscall to allow gdb to get
    backtraces right from within it. (In particular this will be
    quite a common situation if the user interrupts QEMU while it's
    in a blocked safe-syscall: at the point of the syscall insn RBP
    is in use for something else, and so gdb can't find the frame then
    without assistance.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [e0156a9] linux-user: Fix handling of arm_fadvise64_64 syscall.
    32-bit ARM has an odd variant of the fadvise syscall which has
    rearranged arguments, which we try to implement. Unfortunately we got
    the rearrangement wrong.
    This is a six-argument syscall whose arguments are:
     * fd
     * advise parameter
     * offset high half
     * offset low half
     * len high half
     * len low half
    Stop trying to share code with the standard fadvise syscalls,
    and just implement the syscall with the correct argument order.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [badd3cd] linux-user: Fix NR_fadvise64 and NR_fadvise64_64 for 32-bit guests.
    Fix errors in the implementation of NR_fadvise64 and NR_fadvise64_64
    for 32-bit guests, which pass their off_t values in register pairs.
    We can't use the 64-bit code path for this, so split out the 32-bit
    cases, so that we can correctly handle the "only offset is 64-bit"
    and "both offset and length are 64-bit" syscall flavours, and
    "uses aligned register pairs" and "does not" flavours of target.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [977d824] linux-user: Fix error conversion in 64-bit fadvise syscall.
    Fix a missing host-to-target errno conversion in the 64-bit
    fadvise syscall emulation.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [918c03e] linux-user: Use safe_syscall wrapper for readv and writev syscalls.
    Use the safe_syscall wrapper for readv and writev syscalls.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [2a3c761] linux-user: Use safe_syscall wrapper for connect syscall.
    Use the safe_syscall wrapper for the connect syscall.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [6668753] linux-user: Use safe_syscall wrapper for send* and recv* syscalls.
    Use the safe_syscall wrapper for the send, sendto, sendmsg, recv,
    recvfrom and recvmsg syscalls.
    RV: adjusted to apply
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [89f9fe4] linux-user: Use safe_syscall wrapper for msgsnd and msgrcv.
    Use the safe_syscall wrapper for msgsnd and msgrcv syscalls.
    This is made slightly awkward by some host architectures providing
    only a single 'ipc' syscall rather than separate syscalls per
    operation; we provide safe_msgsnd() and safe_msgrcv() as wrappers
    around safe_ipc() to handle this if needed.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [d40ecd6] linux-user: Use safe_syscall wrapper for mq_timedsend and mq_timedreceive.
    Use the safe_syscall wrapper for mq_timedsend and mq_timedreceive syscalls.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [2a84598] linux-user: Use safe_syscall wrapper for flock.
    Use the safe_syscall wrapper for the flock syscall.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [b3f8233] linux-user: Use safe_syscall wrapper for rt_sigtimedwait syscall.
    Use the safe_syscall wrapper for the rt_sigtimedwait syscall.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [9e51822] linux-user: Use safe_syscall wrapper for sleep syscalls.
    Use the safe_syscall wrapper for the clock_nanosleep and nanosleep
    syscalls.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [a613023] linux-user: Use safe_syscall wrapper for poll and ppoll syscalls.
    Use the safe_syscall wrapper for the poll and ppoll syscalls.
    Since not all host architectures will have a poll syscall, we
    have to rewrite the TARGET_NR_poll handling to use ppoll instead
    (we can assume everywhere has ppoll by now).
    We take the opportunity to switch to the code structure
    already used in the implementation of epoll_wait and epoll_pwait,
    which uses a switch() to avoid interleaving #if and if (),
    and to stop using a variable with a leading '_' which is in
    the implementation's namespace.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [227f021] linux-user: Use safe_syscall wrapper for epoll_wait syscalls.
    Use the safe_syscall wrapper for epoll_wait and epoll_pwait syscalls.
    Since we now directly use the host epoll_pwait syscall for both
    epoll_wait and epoll_pwait, we don't need the configure machinery
    to check whether glibc supports epoll_pwait(). (The kernel has
    supported the syscall since 2.6.19 so we can assume it's always there.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [ffb7ee7] linux-user: Use safe_syscall wrapper for semop.
    Use the safe_syscall wrapper for the semop syscall or IPC operation.
    (We implement via the semtimedop syscall to make it easier to
    implement the guest semtimedop syscall later.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [ff6dc13] linux-user: Use safe_syscall wrapper for accept and accept4 syscalls.
    Use the safe_syscall wrapper for the accept and accept4 syscalls.
    accept4 has been in the kernel since 2.6.28 so we can assume it
    is always present.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [49ca6f3] linux-user: Use safe_syscall wrapper for ioctl.
    Use the safe_syscall wrapper to implement the ioctl syscall.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Paolo Bonzini ]
  * [34c98c5] tests/docker: fix make-archive-maybe
    make-archive-maybe expects an archive path relative
    to $1, but receives a path relative to the current directory.  Redirect
    the output outside the subshell to bypass the "cd $1".
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1465224417-141321-2-git-send-email-pbonzini@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [53735f0] tests/docker: make test-full build all targets, not none.
    Fix common.rc to avoid passing an empty --target-list= option to configure.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1465224417-141321-3-git-send-email-pbonzini@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [2346b12] tests/docker: fix test-mingw.
    Add flex and bison for use in test-mingw, because test-mingw
    uses the in-tree libdtc.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1465224417-141321-4-git-send-email-pbonzini@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [8080214] tests/docker: remove unused feature "ccache"
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1465224417-141321-5-git-send-email-pbonzini@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [78465d7] tests/docker: support travis test with fedora image.
    Install sparse and PyYAML.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1465224417-141321-6-git-send-email-pbonzini@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [d3a49cb] tests/docker: build all targets in test-clang.
    Warnings specific to clang may affect devices that are not build by
    x86_64-softmmu and aarch64-softmmu.  Build all targets since that
    is also what Peter does.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1465224417-141321-7-git-send-email-pbonzini@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>

  [ Denis V. Lunev ]
  * [443668c] block: split write_zeroes always.
    We should split requests even if they are less than write_zeroes_alignment.
    For example we can have the following request:
      offset 62k
      size   4k
      write_zeroes_alignment 64k
    The original code sent 1 request covering 2 qcow2 clusters, and resulted
    in both clusters being allocated. But by splitting the request, we can
    cater to the case where one of the two clusters can be zeroed as a
    whole, for only 1 cluster allocated after the operation.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Eric Blake <eblake@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Message-Id: <1463476543-3087-2-git-send-email-den@openvz.org>
    [eblake: Avoid exceeding nb_sectors, hoist alignment checks out of
    loop, and update testsuite to show that patch works]
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [ba14284] qcow2: simplify logic in qcow2_co_write_zeroes.
    Unaligned requests will occupy only one cluster. This is true since the
    previous commit. Simplify the code taking this consideration into
    account.
    In other words, the caller is now buggy if it ever passes us an unaligned
    request that crosses cluster boundaries (the only requests that can cross
    boundaries will be aligned).
    There are no other changes so far.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    CC: Eric Blake <eblake@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Message-Id: <1463476543-3087-3-git-send-email-den@openvz.org>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [5a64e94] qcow2: add tracepoints for qcow2_co_write_zeroes.
    This patch follows guidelines of all other tracepoints in qcow2, like ones
    in qcow2_co_writev. I think that they should dump values in the same
    quantities or be changed all together.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Eric Blake <eblake@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Message-Id: <1463476543-3087-4-git-send-email-den@openvz.org>
    [eblake: typo fix in commit message]
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Eric Blake ]
  * [31ad4fd] qemu-iotests: Test one more spot for optimizing write_zeroes.
    Add another test to 154, showing that we currently allocate a
    data cluster in the top layer if any sector of the backing file
    was allocated.  The next patch will optimize this case.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [ebb718a] qcow2: Catch more unaligned write_zero into zero cluster
    is_zero_cluster() and is_zero_cluster_top_locked() are used only
    by qcow2_co_write_zeroes().  The former is too broad (we don't
    care if the sectors we are about to overwrite are non-zero, only
    that all other sectors in the cluster are zero), so it needs to
    be called up to twice but with smaller limits - rename it along
    with adding the neeeded parameter.  The latter can be inlined for
    more compact code.
    The testsuite change shows that we now have a sparser top file
    when an unaligned write_zeroes overwrites the only portion of
    the backing file with data.
    Based on a patch proposal by Denis V. Lunev.
    CC: Denis V. Lunev <den@openvz.org>
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [8b18474] iscsi: Use block size as minimum zero/discard alignment.
    If hardware does not advertise a minimum zero/discard
    alignment, we still want to guarantee that the block layer
    will align requests to our blocks, rather than the arbitrary
    512-byte BDRV sector size.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [cf081fc] block: Track write zero limits in bytes.
    Another step towards removing sector-based interfaces: convert
    the maximum write and minimum alignment values from sectors to
    bytes.  Rename the variables to let the compiler check that all
    users are converted to the new semantics.
    The maximum remains an int as long as BDRV_REQUEST_MAX_SECTORS
    is constrained by INT_MAX (this means that we can't even
    support a 2G write_zeroes, but just under it) - changing
    operation lengths to unsigned or to 64-bits is a much bigger
    audit, and debatable if we even want to do it (since at the
    core, a 32-bit platform will still have ssize_t as its
    underlying limit on write()).
    Meanwhile, alignment is changed to 'uint32_t', since it makes no
    sense to have an alignment larger than the maximum write, and
    less painful to use an unsigned type with well-defined behavior
    in bit operations than to have to worry about what happens if
    a driver mistakenly supplies a negative alignment.
    Add an assert that no one was trying to use sectors to get a
    write zeroes larger than 2G, and therefore that a later conversion
    to bytes won't be impacted by keeping the limit at 32 bits.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [d05aa8b] block: Add .bdrv_co_pwrite_zeroes()
    Update bdrv_co_do_write_zeroes() to be byte-based, and select
    between the new byte-based bdrv_co_pwrite_zeroes() or the old
    bdrv_co_write_zeroes().  The next patches will convert drivers,
    then remove the old interface.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [74021bc] block: Switch bdrv_write_zeroes() to byte interface.
    Rename to bdrv_pwrite_zeroes() to let the compiler ensure we
    cater to the updated semantics.  Do the same for bdrv_co_write_zeroes().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [94d047a] iscsi: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    As this is the first byte-based iscsi interface, convert
    is_request_lun_aligned() into two versions, one for sectors
    and one for bytes.  Also, change from outright -EINVAL failure
    on an unaligned request, to instead failing with -ENOTSUP to
    trigger a read-modify-write fallback, particularly since the
    block layer should be honoring bs->request_alignment to avoid
    -EINVAL on read/write requests.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [5544b59] qcow2: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [9c21a42] blkreplay: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [e88a36e] gluster: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [49a2e48] qed: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    Kill an abuse of the comma operator while at it (fortunately,
    the semantics were still right).  Also, the test for requests
    not aligned to clusters should be applied always, not just
    when a backing file is present.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [2ffa76c] raw-posix: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    [ kwolf: Fixed up trace_paio_submit_co() call for qiov == NULL ]
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Eric Blake ]
  * [39ad937] raw_bsd: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a620f2a] vmdk: Convert to bdrv_co_pwrite_zeroes()
    Another step on our continuing quest to switch to byte-based
    interfaces.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [c1499a5] block: Kill bdrv_co_write_zeroes()
    Now that all drivers have been converted to a byte interface,
    we no longer need a sector interface.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [ad2964b] migration/block: Convert load to BlockBackend.
    This converts the loading part of block migration to use BlockBackend
    interfaces rather than accessing the BlockDriverState directly.
    Note that this takes a lazy shortcut. We should really use a separate
    BlockBackend that is configured for the migration rather than for the
    guest (e.g. writethrough caching is unnecessary) and holds its own
    reference to the BlockDriverState, but the impact isn't that big and we
    didn't have a separate migration reference before either, so it must be
    good enough, I guess...
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [ebd2f9e] migration/block: Convert saving to BlockBackend.
    This creates a new BlockBackend for copying data from an images to the
    migration stream on the source host. All I/O for block migration goes
    through BlockBackend now.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Peter Lieven ]
  * [107d433] block: assert that bs->request_alignment is a power of 2
    at least bdrv_co_preadv/pwritev expect this.
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Fam Zheng ]
  * [6f60717] raw-posix: Fetch max sectors for host block device.
    This is sometimes a useful value we should count in.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Denis V. Lunev ]
  * [f3c3b87] qcow2: avoid extra flushes in qcow2.
    The problem with excessive flushing was found by a couple of performance
    tests:
      - parallel directory tree creation (from 2 processes)
      - 32 cached writes + fsync at the end in a loop
    For the first one results improved from 2.6 loops/sec to 3.5 loops/sec.
    Each loop creates 10^3 directories with 10 files in each.
    For the second one results improved from ~600 fsync/sec to ~1100
    fsync/sec. Though, it was run on SSD so it probably won't show such
    performance gain on rotational media.
    qcow2_cache_flush() calls bdrv_flush() unconditionally after writing
    cache entries of a particular cache. This can lead to as many as
    2 additional fdatasyncs inside bdrv_flush.
    We can simply skip all fdatasync calls inside qcow2_co_flush_to_os
    as bdrv_flush for sure will do the job. These flushes are necessary to
    keep the right order of writes to the different caches. Though this is
    not necessary in the current code base as this ordering is ensured through
    the flush in qcow2_cache_flush_dependency().
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Pavel Borzenkov <pborzenkov@virtuozzo.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [2a9170b] block: Fix bdrv_all_delete_snapshot() error handling.
    The code to exit the loop after bdrv_snapshot_delete_by_id_or_name()
    returned failure was duplicated. The first copy of it was too early so
    that the AioContext lock would not be freed. This patch removes it so
    that only the second, correct copy remains.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Colin Lord ]
  * [bf18bee] blockdev: clean up error handling in do_open_tray.
    Returns negative error codes and accompanying error messages in cases where
    the device has no tray or the tray is locked and isn't forced open. This
    extra information should result in better flexibility in functions that
    call do_open_tray.
    Suggested by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Colin Lord <clord@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [515c2f4] block: Don't emulate natively supported pwritev flags.
    Drivers that implement .bdrv_co_pwritev() get the flags passed as an
    argument to said function, but we also unconditionally emulate the flags
    anyway. We shouldn't do that.
    Fix this by clearing all flags that the driver supports natively after
    it returns from .bdrv_co_pwritev().
    Fixes: 4df863f3 ('block: Make supported_write_flags a per-bds property')
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [b6133b8] qemu-img bench.
    This adds a qemu-img command that allows doing some simple benchmarks
    for the block layer without involving guest devices and a real VM.
    For the start, this implements only a test of sequential reads.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [b6495fa] qemu-img bench: Sequential writes.
    This extends qemu-img bench with an option that makes it use sequential
    writes instead of reads for the test run.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [d3199a3] qemu-img bench: Make start offset configurable.
    This patch adds an option the specify the offset of the first request
    made by qemu-img bench. This allows to benchmark misaligned requests.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [83de9be] qemu-img bench: Implement -S (step size)
    With this new option, qemu-img bench can be told to advance the current
    offset after each request by a different value than the buffer size.
    This is useful for controlling the conditions for cluster allocation in
    image formats (e.g. qcow2 cluster allocation with COW in front of the
    request, or COW areas that aren't overwritten immediately).
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [55d539c] qemu-img bench: Add --flush-interval.
    This options allows to flush the image periodically during write tests.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Peter Maydell ]
  * [8efb2ed] linux-user: Correct signedness of target_flock l_start and l_len fields.
    The l_start and l_len fields in the various target_flock structures are
    supposed to be '__kernel_off_t' or '__kernel_loff_t', which means they
    should be signed, not unsigned. Correcting the structure definitions means
    that __get_user() and __put_user() will correctly sign extend them if
    the guest is using 32 bit offsets and the host is using 64 bit offsets.
    This fixes failures in the LTP 'fcntl14' tests where it checks that
    negative seek offsets work correctly.
    We reindent the structures to drop hard tabs since we're touching 40%
    of the fields anyway.
    RV: long long -> abi_llong as suggested by Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [7dcdaea] linux-user: Make target_strerror() return 'const char *'
    Make target_strerror() return 'const char *' rather than just 'char *';
    this will allow us to return constant strings from it for some special
    cases.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
  * [da2a34f] linux-user: Special-case ERESTARTSYS in target_strerror()
    Since TARGET_ERESTARTSYS and TARGET_ESIGRETURN are internal-to-QEMU
    error numbers, handle them specially in target_strerror(), to avoid
    confusing strace output like:
    9521 rt_sigreturn(14,8,274886297808,8,0,268435456) = -1 errno=513 (Unknown error 513)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [014628a] linux-user: In fork_end(), remove correct CPUs from CPU list.
    In fork_end(), we must fix the list of current CPUs to match the fact
    that the child of the fork has only one thread. Unfortunately we were
    removing the wrong CPUs from the list, which meant that if the child
    subsequently did an exclusive operation it would deadlock in
    start_exclusive() waiting for a sibling CPU which didn't exist.
    In particular this could cause hangs doing git submodule init
    operations, as reported in https://bugs.launchpad.net/qemu/+bug/955379
    comment #47.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Stefan Hajnoczi ]
  * [4ca9408] .travis.yml: add libnfs-dev for NFS block driver.
    Let's ensure that block/nfs.o is built in Travis.
    This patch depends on the following build fixes:
    1. block/nfs: add missing #include "qapi/error.h"
    2. block/nfs: add missing #include "qemu/cutils.h"
    This patch also depends on Travis adding libnfs-dev to the list of
    approved packages.  This patch can be safely committed but will not do
    anything until the Travis maintainers allow libnfs-dev to be installed.
    Please see the GitHub Issue I raised here:
    https://github.com/travis-ci/apt-package-whitelist/issues/2788
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>

  [ Alex Bennée ]
  * [4adb05d] .travis.yml: add trusty GCE target.
    If we want to run our docker based tests we'll need to do them on a
    normal VM with docker support. Lets just enable the build on trusty for
    now to check against a newer Ubuntu.
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>

  [ Paolo Bonzini ]
  * [23654d4] .travis.yml: disable Sparse testing.
    On travis-ci.org, all builds fail with
       /usr/include/features.h:324:11: error: unable to open bits/predefs.h
    With "make docker-travis@ubuntu", they fail with
       /usr/include/features.h:374:13: error: unable to open sys/cdefs.h
    With "make docker-travis@fedora", finally, they fail due to sparse
    not being able to parse some #pragmas in glib headers.  Just kill
    the thing from the CI builds.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [AJB: tweak title for my OCD]
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>

  [ xiaoqiang zhao ]
  * [9bbbf64] hw/arm: virt uart fix
    commit f0d1d2c115dffc1fbaf954d0b449db05c5eb79b1
    ("hw/char: QOM'ify pl011 model") break qemu-system-arm virt machine
    if option '-machine secure=on' is provided.
    The function create_uart is called twice. So make CharDriverState pointer
    a parameter to create_uart instead of hardcoded.
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Tested-by: Jerome Forissier <jerome.forissier@linaro.org>
    Message-id: 1465353045-26323-1-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [7580922] translate-all.c: Don't pass puc, locked to tb_invalidate_phys_page()
    The user-mode-only function tb_invalidate_phys_page() is only
    called from two places:
     * page_unprotect(), which passes in a non-zero pc, a puc pointer
       and the value 'true' for the locked argument
     * page_set_flags(), which passes in a zero pc, a NULL puc pointer
       and a 'false' locked argument
    If the pc is non-zero then we may call cpu_resume_from_signal(),
    which does a longjmp out of the calling code (and out of the
    signal handler); this is to cover the case of a target CPU with
    "precise self-modifying code" (currently only x86) executing
    a store instruction which modifies code in the same TB as the
    store itself. Rather than doing the longjump directly here,
    return a flag to the caller which indicates whether the current
    TB was modified, and move the longjump to page_unprotect.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Riku Voipio <riku.voipio@linaro.org>
    Message-id: 1463494687-25947-2-git-send-email-peter.maydell@linaro.org
  * [f213e72] user-exec: Push resume-from-signal code out to handle_cpu_signal()
    Since the only caller of page_unprotect() which might cause it to
    need to call cpu_resume_from_signal() is handle_cpu_signal() in
    the user-mode code, push the longjump handling out to that function.
    Since this is the only caller of cpu_resume_from_signal() which
    passes a non-NULL puc argument, split the non-NULL handling into
    a new cpu_exit_tb_from_sighandler() function. This allows us
    to merge the softmmu and usermode implementations of the
    cpu_resume_from_signal() function, which are now identical.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Riku Voipio <riku.voipio@linaro.org>
    Message-id: 1463494687-25947-3-git-send-email-peter.maydell@linaro.org
  * [6886b98] cpu-exec: Rename cpu_resume_from_signal() to cpu_loop_exit_noexc()
    The function cpu_resume_from_signal() is now always called with a
    NULL puc argument, and is rather misnamed since it is never called
    from a signal handler. It is essentially forcing an exit to the
    top level cpu loop but without raising any exception, so rename
    it to cpu_loop_exit_noexc() and drop the useless unused argument.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Riku Voipio <riku.voipio@linaro.org>
    Message-id: 1463494687-25947-4-git-send-email-peter.maydell@linaro.org
  * [a5852dc] user-exec: Don't reextract sigmask from usercontext pointer.
    Extracting the old signal mask from the usercontext pointer passed to
    a signal handler is a pain because it is OS and CPU dependent.
    Since we've already done it once and passed it to handle_cpu_signal(),
    there's no need to do it again in cpu_exit_tb_from_sighandler().
    This then means we don't need to pass a usercontext pointer in to
    handle_cpu_signal() at all.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Riku Voipio <riku.voipio@linaro.org>
    Message-id: 1463494687-25947-5-git-send-email-peter.maydell@linaro.org
  * [3327182] target-i386: Add comment about do_interrupt_user() next_eip argument.
    Add a comment to do_interrupt_user() along the same lines as the
    existing one for do_interrupt_all() noting that the next_eip
    argument is not used unless is_int is true or intno is EXCP_SYSCALL.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Riku Voipio <riku.voipio@linaro.org>
    Message-id: 1463494687-25947-6-git-send-email-peter.maydell@linaro.org
  * [0c33682] target-i386: Move user-mode exception actions out of user-exec.c.
    The exception_action() function in user-exec.c is just a call to
    cpu_loop_exit() for every target CPU except i386.  Since this
    function is only called if the target's handle_mmu_fault() hook has
    indicated an MMU fault, and that hook is only called from the
    handle_cpu_signal() code path, we can simply move the x86-specific
    setup into that hook, which allows us to remove the TARGET_I386
    ifdef from user-exec.c.
    Of the actions that were done by the call to raise_interrupt_err():
     * cpu_svm_check_intercept_param() is a no-op in user mode
     * check_exception() is a no-op since double faults are impossible
       for user-mode
     * assignments to cs->exception_index and env->error_code are no-ops
     * assigning to env->exception_next_eip is unnecessary because it
       is not used unless env->exception_is_int is true
     * cpu_loop_exit_restore() is equivalent to cpu_loop_exit() since
       pc is 0
    which leaves just setting env_>exception_is_int as the action that
    needs to be added to x86_cpu_handle_mmu_fault().
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Riku Voipio <riku.voipio@linaro.org>
    Message-id: 1463494687-25947-7-git-send-email-peter.maydell@linaro.org

  [ Gerd Hoffmann ]
  * [ec9fb41] vnc: drop unused depth arg for set_pixel_format.
    Spotted by Coverity.
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1465204725-31562-1-git-send-email-kraxel@redhat.com

  [ Daniel P. Berrange ]
  * [83cf07b] ui: fix regression in printing VNC host/port on startup.
    If VNC is chosen as the compile time default display backend,
    QEMU will print the host/port it listens on at startup.
    Previously this would look like
      VNC server running on '::1:5900'
    but in 04d2529da27db512dcbd5e99d0e26d333f16efcc the ':' was
    accidentally replaced with a ';'. This the ':' back.
    Reported-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1465382576-25552-1-git-send-email-berrange@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Olaf Hering ]
  * [4d59423] gtk: fix vte version check
    vte_terminal_set_encoding takes 3 args since 0.38.0.
    This fixes commit fba958c6 ("gtk: implement set_echo")
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Message-id: 20160608214352.32669-1-olaf@aepfle.de
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Thomas Huth ]
  * [2c2311c] ui/console-gl: Add support for big endian display surfaces.
    This is required for running QEMU on big endian hosts (like
    PowerPC machines) that use RGB instead of BGR byte ordering.
    Ticket: https://bugs.launchpad.net/qemu/+bug/1581796
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-id: 1465243261-26731-1-git-send-email-thuth@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [1185fde] console: ignore ui_info updates which don't actually update something.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1464597673-26464-1-git-send-email-kraxel@redhat.com

  [ Emilio G. Cota ]
  * [911a4d2] compiler.h: add QEMU_ALIGNED() to enforce struct alignment.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-2-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [ccdb3c1] seqlock: remove optional mutex.
    This option is unused; besides, it bloats the struct when not needed.
    Let's just let writers define their own locks elsewhere.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-3-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [03719e4] seqlock: rename write_lock/unlock to write_begin/end.
    It is a more appropriate name, now that the mutex embedded
    in the seqlock is gone.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-4-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [462cda5] include/processor.h: define cpu_relax()
    Taken from the linux kernel.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-5-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Guillaume Delbergue ]
  * [ac9a9eb] qemu-thread: add simple test-and-set spinlock.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Signed-off-by: Guillaume Delbergue <guillaume.delbergue@greensocs.com>
    [Rewritten. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [Emilio's additions: use TAS instead of atomic_xchg; emit acquire/release
     barriers; return bool from trylock; call cpu_relax() while spinning;
     optimize for uncontended locks by acquiring the lock with TAS instead
     of TATAS; add qemu_spin_locked().]
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-6-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Emilio G. Cota ]
  * [dc8b295] exec: add tb_hash_func5, derived from xxhash.
    This will be used by upcoming changes for hashing the tb hash.
    Add this into a separate file to include the copyright notice from
    xxhash.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-7-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [42bd322] tb hash: hash phys_pc, pc, and flags with xxhash.
    For some workloads such as arm bootup, tb_phys_hash is performance-critical.
    The is due to the high frequency of accesses to the hash table, originated
    by (frequent) TLB flushes that wipe out the cpu-private tb_jmp_cache's.
    More info:
      https://lists.nongnu.org/archive/html/qemu-devel/2016-03/msg05098.html
    To dig further into this I modified an arm image booting debian jessie to
    immediately shut down after boot. Analysis revealed that quite a bit of time
    is unnecessarily spent in tb_phys_hash: the cause is poor hashing that
    results in very uneven loading of chains in the hash table's buckets;
    the longest observed chain had ~550 elements.
    The appended addresses this with two changes:
    1) Use xxhash as the hash table's hash function. xxhash is a fast,
       high-quality hashing function.
    2) Feed the hashing function with not just tb_phys, but also pc and flags.
    This improves performance over using just tb_phys for hashing, since that
    resulted in some hash buckets having many TB's, while others getting very few;
    with these changes, the longest observed chain on a single hash bucket is
    brought down from ~550 to ~40.
    Tests show that the other element checked for in tb_find_physical,
    cs_base, is always a match when tb_phys+pc+flags are a match,
    so hashing cs_base is wasteful. It could be that this is an ARM-only
    thing, though. UPDATE:
    On Tue, Apr 05, 2016 at 08:41:43 -0700, Richard Henderson wrote:
    > The cs_base field is only used by i386 (in 16-bit modes), and sparc (for a TB
    > consisting of only a delay slot).
    > It may well still turn out to be reasonable to ignore cs_base for hashing.
    BTW, after this change the hash table should not be called "tb_hash_phys"
    anymore; this is addressed later in this series.
    This change gives consistent bootup time improvements. I tested two
    host machines:
    - Intel Xeon E5-2690: 11.6% less time
    - Intel i7-4790K: 19.2% less time
    Increasing the number of hash buckets yields further improvements. However,
    using a larger, fixed number of buckets can degrade performance for other
    workloads that do not translate as many blocks (600K+ for debian-jessie arm
    bootup). This is dealt with later in this series.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-8-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [bf3afd5] qdist: add module to represent frequency distributions of data.
    Sometimes it is useful to have a quick histogram to represent a certain
    distribution -- for example, when investigating a performance regression
    in a hash table due to inadequate hashing.
    The appended allows us to easily represent a distribution using Unicode
    characters. Further, the data structure keeping track of the distribution
    is so simple that obtaining its values for off-line processing is trivial.
    Example, taking the last 10 commits to QEMU:
     Characters in commit title  Count
    -----------------------------------
                             39      1
                             48      1
                             53      1
                             54      2
                             57      1
                             61      1
                             67      1
                             78      1
                             80      1
    qdist_init(&dist);
    qdist_inc(&dist, 39);
    [...]
    qdist_inc(&dist, 80);
    char *str = qdist_pr(&dist, 9, QDIST_PR_LABELS);
    // -> [39.0,43.6)▂▂ █▂ ▂ ▄[75.4,80.0]
    g_free(str);
    char *str = qdist_pr(&dist, 4, QDIST_PR_LABELS);
    // -> [39.0,49.2)▁█▁▁[69.8,80.0]
    g_free(str);
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-9-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [ff9249b] qdist: add test program.
    Acked-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-10-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [2e11264] qht: QEMU's fast, resizable and scalable Hash Table.
    This is a fast, scalable chained hash table with optional auto-resizing, allowing
    reads that are concurrent with reads, and reads/writes that are concurrent
    with writes to separate buckets.
    A hash table with these features will be necessary for the scalability
    of the ongoing MTTCG work; before those changes arrive we can already
    benefit from the single-threaded speedup that qht also provides.
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-11-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [1a95404] qht: add test program.
    Acked-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-12-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [515864a] qht: add qht-bench, a performance benchmark.
    This serves as a performance benchmark as well as a stress test
    for QHT. We can tweak quite a number of things, including the
    number of resize threads and how frequently resizes are triggered.
    A performance comparison of QHT vs CLHT[1] and ck_hs[2] using
    this same benchmark program can be found here:
      http://imgur.com/a/0Bms4
    The tests are run on a 64-core AMD Opteron 6376, pinning threads
    to cores favoring same-socket cores. For each run, qht-bench is
    invoked with:
      $ tests/qht-bench -d $duration -n $n -u $u -g $range
    , where $duration is in seconds, $n is the number of threads,
    $u is the update rate (0.0 to 100.0), and $range is the number
    of keys.
    Note that ck_hs's performance drops significantly as writes go
    up, since it requires an external lock (I used a ck_spinlock)
    around every write.
    Also, note that CLHT instead of using a seqlock, relies on an
    allocator that does not ever return the same address during the
    same read-critical section. This gives it a slight performance
    advantage over QHT on read-heavy workloads, since the seqlock
    writes aren't there.
    [1] CLHT: https://github.com/LPD-EPFL/CLHT
              https://infoscience.epfl.ch/record/207109/files/ascy_asplos15.pdf
    [2] ck_hs: http://concurrencykit.org/
               http://backtrace.io/blog/blog/2015/03/13/workload-specialization/
    A few of those plots are shown in text here, since that site
    might not be online forever. Throughput is on Mops/s on the Y axis.
                                 200K keys, 0 % updates
      450 ++--+------+------+-------+-------+-------+-------+------+-------+--++
          |   +      +      +       +       +       +       +      +      +N+  |
      400 ++                                                           ---+E+ ++
          |                                                       +++----      |
      350 ++          9 ++------+------++                       --+E+    -+H+ ++
          |             |      +H+-     |                 -+N+----   ---- +++  |
      300 ++          8 ++     +E+     ++             -----+E+  --+H+         ++
          |             |      +++      |         -+N+-----+H+--               |
      250 ++          7 ++------+------++  +++-----+E+----                    ++
      200 ++                    1         -+E+-----+H+                        ++
          |                           ----                     qht +-E--+      |
      150 ++                      -+E+                        clht +-H--+     ++
          |                   ----                              ck +-N--+      |
      100 ++               +E+                                                ++
          |            ----                                                    |
       50 ++       -+E+                                                       ++
          |   +E+E+  +      +       +       +       +       +      +       +   |
        0 ++--E------+------+-------+-------+-------+-------+------+-------+--++
              1      8      16      24      32      40      48     56      64
                                    Number of threads
                                 200K keys, 1 % updates
      350 ++--+------+------+-------+-------+-------+-------+------+-------+--++
          |   +      +      +       +       +       +       +      +     -+E+  |
      300 ++                                                         -----+H+ ++
          |                                                       +E+--        |
          |           9 ++------+------++                  +++----             |
      250 ++            |      +E+   -- |                 -+E+                ++
          |           8 ++         --  ++             ----                     |
      200 ++            |      +++-     |  +++  ---+E+                        ++
          |           7 ++------N------++ -+E+--               qht +-E--+      |
          |                     1  +++----                    clht +-H--+      |
      150 ++                      -+E+                          ck +-N--+     ++
          |                   ----                                             |
      100 ++               +E+                                                ++
          |            ----                                                    |
          |        -+E+                                                        |
       50 ++    +H+-+N+----+N+-----+N+------                                  ++
          |   +E+E+  +      +       +      +N+-----+N+-----+N+----+N+-----+N+  |
        0 ++--E------+------+-------+-------+-------+-------+------+-------+--++
              1      8      16      24      32      40      48     56      64
                                    Number of threads
                                 200K keys, 20 % updates
      300 ++--+------+------+-------+-------+-------+-------+------+-------+--++
          |   +      +      +       +       +       +       +      +       +   |
          |                                                              -+H+  |
      250 ++                                                         ----     ++
          |           9 ++------+------++                       --+H+  ---+E+  |
          |           8 ++     +H+--   ++                 -+H+----+E+--        |
      200 ++            |      +E+    --|             -----+E+--  +++         ++
          |           7 ++      + ---- ++       ---+H+---- +++ qht +-E--+      |
      150 ++          6 ++------N------++ -+H+-----+E+        clht +-H--+     ++
          |                     1     -----+E+--                ck +-N--+      |
          |                       -+H+----                                     |
      100 ++                  -----+E+                                        ++
          |                +E+--                                               |
          |            ----+++                                                 |
       50 ++       -+E+                                                       ++
          |     +E+ +++                                                        |
          |   +E+N+-+N+-----+       +       +       +       +      +       +   |
        0 ++--E------+------N-------N-------N-------N-------N------N-------N--++
              1      8      16      24      32      40      48     56      64
                                    Number of threads
                                200K keys, 100 % updates       qht +-E--+
                                                              clht +-H--+
      160 ++--+------+------+-------+-------+-------+-------+---ck-+-N-----+--++
          |   +      +      +       +       +       +       +      +   ----H   |
      140 ++                                                      +H+--  -+E+ ++
          |                                                +++----   ----      |
      120 ++          8 ++------+------++                 -+H+    +E+         ++
          |           7 ++     +H+---- ++             ---- +++----             |
      100 ++            |      +E+      |  +++  ---+H+    -+E+                ++
          |           6 ++     +++     ++ -+H+--   +++----                     |
       80 ++          5 ++------N----------+E+-----+E+                        ++
          |                     1 -+H+---- +++                                 |
          |                   -----+E+                                         |
       60 ++               +H+---- +++                                        ++
          |            ----+E+                                                 |
       40 ++        +H+----                                                   ++
          |       --+E+                                                        |
       20 ++    +E+                                                           ++
          |  +EE+    +      +       +       +       +       +      +       +   |
        0 ++--+N-N---N------N-------N-------N-------N-------N------N-------N--++
              1      8      16      24      32      40      48     56      64
                                    Number of threads
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-13-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [896a9ee] qht: add test-qht-par to invoke qht-bench from 'check' target.
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-14-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [909eaac] tb hash: track translated blocks with qht.
    Having a fixed-size hash table for keeping track of all translation blocks
    is suboptimal: some workloads are just too big or too small to get maximum
    performance from the hash table. The MRU promotion policy helps improve
    performance when the hash table is a little undersized, but it cannot
    make up for severely undersized hash tables.
    Furthermore, frequent MRU promotions result in writes that are a scalability
    bottleneck. For scalability, lookups should only perform reads, not writes.
    This is not a big deal for now, but it will become one once MTTCG matures.
    The appended fixes these issues by using qht as the implementation of
    the TB hash table. This solution is superior to other alternatives considered,
    namely:
    - master: implementation in QEMU before this patchset
    - xxhash: before this patch, i.e. fixed buckets + xxhash hashing + MRU.
    - xxhash-rcu: fixed buckets + xxhash + RCU list + MRU.
                  MRU is implemented here by adding an intermediate struct
                  that contains the u32 hash and a pointer to the TB; this
                  allows us, on an MRU promotion, to copy said struct (that is not
                  at the head), and put this new copy at the head. After a grace
                  period, the original non-head struct can be eliminated, and
                  after another grace period, freed.
    - qht-fixed-nomru: fixed buckets + xxhash + qht without auto-resize +
                       no MRU for lookups; MRU for inserts.
    The appended solution is the following:
    - qht-dyn-nomru: dynamic number of buckets + xxhash + qht w/ auto-resize +
                     no MRU for lookups; MRU for inserts.
    The plots below compare the considered solutions. The Y axis shows the
    boot time (in seconds) of a debian jessie image with arm-softmmu; the X axis
    sweeps the number of buckets (or initial number of buckets for qht-autoresize).
    The plots in PNG format (and with errorbars) can be seen here:
      http://imgur.com/a/Awgnq
    Each test runs 5 times, and the entire QEMU process is pinned to a
    single core for repeatability of results.
                                Host: Intel Xeon E5-2690
      28 ++------------+-------------+-------------+-------------+------------++
         A*****        +             +             +             master **A*** +
      27 ++    *                                                 xxhash ##B###++
         |      A******A******                               xxhash-rcu $$C$$$ |
      26 C$$                  A******A******            qht-fixed-nomru*%%D%%%++
         D%%$$                              A******A******A*qht-dyn-mru A*E****A
      25 ++ %%$$                                          qht-dyn-nomru &&F&&&++
         B#####%                                                               |
      24 ++    #C$$$$$                                                        ++
         |      B###  $                                                        |
         |          ## C$$$$$$                                                 |
      23 ++           #       C$$$$$$                                         ++
         |             B######       C$$$$$$                                %%%D
      22 ++                  %B######       C$$$$$$C$$$$$$C$$$$$$C$$$$$$C$$$$$$C
         |                    D%%%%%%B######      @E@@@@@@    %%%D%%%@@@E@@@@@@E
      21 E@@@@@@E@@@@@@F&&&@@@E@@@&&&D%%%%%%B######B######B######B######B######B
         +             E@@@   F&&&   +      E@     +      F&&&   +             +
      20 ++------------+-------------+-------------+-------------+------------++
         14            16            18            20            22            24
                                 log2 number of buckets
                                     Host: Intel i7-4790K
      14.5 ++------------+------------+-------------+------------+------------++
           A**           +            +             +            master **A*** +
        14 ++ **                                                 xxhash ##B###++
      13.5 ++   **                                           xxhash-rcu $$C$$$++
           |                                            qht-fixed-nomru %%D%%% |
        13 ++     A******                                   qht-dyn-mru @@E@@@++
           |             A*****A******A******             qht-dyn-nomru &&F&&& |
      12.5 C$$                               A******A******A*****A******    ***A
        12 ++ $$                                                        A***  ++
           D%%% $$                                                             |
      11.5 ++  %%                                                             ++
           B###  %C$$$$$$                                                      |
        11 ++  ## D%%%%% C$$$$$                                               ++
           |     #      %      C$$$$$$                                         |
      10.5 F&&&&&&B######D%%%%%       C$$$$$$C$$$$$$C$$$$$$C$$$$$C$$$$$$    $$$C
        10 E@@@@@@E@@@@@@B#####B######B######E@@@@@@E@@@%%%D%%%%%D%%%###B######B
           +             F&&          D%%%%%%B######B######B#####B###@@@D%%%   +
       9.5 ++------------+------------+-------------+------------+------------++
           14            16           18            20           22            24
                                  log2 number of buckets
    Note that the original point before this patch series is X=15 for "master";
    the little sensitivity to the increased number of buckets is due to the
    poor hashing function in master.
    xxhash-rcu has significant overhead due to the constant churn of allocating
    and deallocating intermediate structs for implementing MRU. An alternative
    would be do consider failed lookups as "maybe not there", and then
    acquire the external lock (tb_lock in this case) to really confirm that
    there was indeed a failed lookup. This, however, would not be enough
    to implement dynamic resizing--this is more complex: see
    "Resizable, Scalable, Concurrent Hash Tables via Relativistic
    Programming" by Triplett, McKenney and Walpole. This solution was
    discarded due to the very coarse RCU read critical sections that we have
    in MTTCG; resizing requires waiting for readers after every pointer update,
    and resizes require many pointer updates, so this would quickly become
    prohibitive.
    qht-fixed-nomru shows that MRU promotion is advisable for undersized
    hash tables.
    However, qht-dyn-mru shows that MRU promotion is not important if the
    hash table is properly sized: there is virtually no difference in
    performance between qht-dyn-nomru and qht-dyn-mru.
    Before this patch, we're at X=15 on "xxhash"; after this patch, we're at
    X=15 @ qht-dyn-nomru. This patch thus matches the best performance that we
    can achieve with optimum sizing of the hash table, while keeping the hash
    table scalable for readers.
    The improvement we get before and after this patch for booting debian jessie
    with arm-softmmu is:
    - Intel Xeon E5-2690: 10.5% less time
    - Intel i7-4790K: 5.2% less time
    We could get this same improvement _for this particular workload_ by
    statically increasing the size of the hash table. But this would hurt
    workloads that do not need a large hash table. The dynamic (upward)
    resizing allows us to start small and enlarge the hash table as needed.
    A quick note on downsizing: the table is resized back to 2**15 buckets
    on every tb_flush; this makes sense because it is not guaranteed that the
    table will reach the same number of TBs later on (e.g. most bootup code is
    thrown away after boot); it makes sense to grow the hash table as
    more code blocks are translated. This also avoids the complication of
    having to build downsizing hysteresis logic into qht.
    Reviewed-by: Sergey Fedorov <serge.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-15-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [329844d] translate-all: add tb hash bucket info to 'info jit' dump.
    Examples:
    - Good hashing, i.e. tb_hash_func5(phys_pc, pc, flags):
    TB count            715135/2684354
    [...]
    TB hash buckets     388775/524288 (74.15% head buckets used)
    TB hash occupancy   33.04% avg chain occ. Histogram: [0,10)%|▆ █  ▅▁▃▁▁|[90,100]%
    TB hash avg chain   1.017 buckets. Histogram: 1|█▁▁|3
    - Not-so-good hashing, i.e. tb_hash_func5(phys_pc, pc, 0):
    TB count            712636/2684354
    [...]
    TB hash buckets     344924/524288 (65.79% head buckets used)
    TB hash occupancy   31.64% avg chain occ. Histogram: [0,10)%|█ ▆  ▅▁▃▁▂|[90,100]%
    TB hash avg chain   1.047 buckets. Histogram: 1|█▁▁▁|4
    - Bad hashing, i.e. tb_hash_func5(phys_pc, 0, 0):
    TB count            702818/2684354
    [...]
    TB hash buckets     112741/524288 (21.50% head buckets used)
    TB hash occupancy   10.15% avg chain occ. Histogram: [0,10)%|█ ▁  ▁▁▁▁▁|[90,100]%
    TB hash avg chain   2.107 buckets. Histogram: [1.0,10.2)|█▁▁▁▁▁▁▁▁▁|[83.8,93.0]
    - Good hashing, but no auto-resize:
    TB count            715634/2684354
    TB hash buckets     8192/8192 (100.00% head buckets used)
    TB hash occupancy   98.30% avg chain occ. Histogram: [95.3,95.8)%|▁▁▃▄▃▄▁▇▁█|[99.5,100.0]%
    TB hash avg chain   22.070 buckets. Histogram: [15.0,16.7)|▁▂▅▄█▅▁▁▁▁|[30.3,32.0]
    Acked-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Suggested-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1465412133-3029-16-git-send-email-cota@braap.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Anthony PERARD ]
  * [d6b6aec] exec: Fix qemu_ram_block_from_host for Xen.
    Since f615f39 (exec: remove ram_addr argument from
    qemu_ram_block_from_host), migration under Xen is likely to fail, with a
    SEGV of QEMU. But the commit only reveal a bug with the calculation of
    the offset value in qemu_ram_block_from_host().
    This patch calculates the offset from the ram_addr as
    qemu_ram_addr_from_host() will later calculate the ram_addr from the
    offset.
    Signed-off-by: Anthony PERARD <anthony.perard@citrix.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>

  [ Wen Congyang ]
  * [88c1656] Introduce "xen-load-devices-state"
    Introduce a "xen-load-devices-state" QAPI command that can be used to
    load the state of all devices, but not the RAM or the block devices of
    the VM.
    We only have hmp commands savevm/loadvm, and qmp commands
    xen-save-devices-state.
    We use this new command for COLO:
    1. suspend both primary vm and secondary vm
    2. sync the state
    3. resume both primary vm and secondary vm
    In such case, we need to update all devices' state in any time.
    Signed-off-by: Wen Congyang <wency@cn.fujitsu.com>
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Reviewed-by: Anthony PERARD <anthony.perard@citrix.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>

  [ Gerd Hoffmann ]
  * [e058fa2] usb-host: add special case for bus+addr.
    This patch changes usb-host behavior in case we hostbus= and hostaddr=
    properties are used to identify the usb device in question.  Instead of
    adding the device to the hotplug watchlist we try to open directly using
    the given bus number and device address.
    Putting a device specified by hostaddr to the hotplug watchlist isn't
    a great idea as the address isn't a fixed property.  It changes every
    time the device is plugged in.  So considering this case as "use the
    device at bus:addr _now_" is more sane.  Also usb-host will throw errors
    in case it can't initialize the host device.
    Note: For devices on the hotplug watchlist (hostport or vendorid or
    productid specified) qemu continues to ignore errors and keeps
    monitoring the usb bus to see if the device eventually shows up.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1464945175-28939-1-git-send-email-kraxel@redhat.com

  [ Peter Maydell ]
  * [ec9125b] hw/usb/dev-network.c: Use ldl_le_p() and stl_le_p()
    Use stl_le_p() and ldl_le_p() to read and write data from
    buffers, rather than using pointer casts and cpu_to_le32()
    for writes and le32_to_cpup() for reads. This:
     * avoids lots of casts
     * works even if the buffer isn't as aligned as the host would like
     * avoids using the *_to_cpup() functions which we want to get rid of
    Note that there may still be some places where a pointer from the
    guest is cast to a pointer to a host structure; these would also
    have to be changed for the device to work on a host CPU which
    enforces alignment restrictions.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1465573077-29221-1-git-send-email-peter.maydell@linaro.org
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Eduardo Habkost ]
  * [c92cfba] pxa2xx: Unconditionally enable USB controller.
    Simplify initialization logic by removing the usb_enabled()
    check. The USB controller is part of the SoC, so it doesn't make
    sense to create a system where it is not present.
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Cc: Andrzej Zaborowski <balrogg@gmail.com>
    Cc: qemu-arm@nongnu.org,
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465419025-21519-2-git-send-email-ehabkost@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [4bcbe0b] vl: Eliminate usb_enabled()
    This wrapper for machine_usb(current_machine) is not necessary,
    replace all usages of usb_enabled() with machine_usb().
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Alexander Graf <agraf@suse.de>
    Cc: qemu-arm@nongnu.org
    Cc: qemu-ppc@nongnu.org
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-id: 1465419025-21519-3-git-send-email-ehabkost@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Alex Bligh ]
  * [b7b6816] TLS: provide slightly more information when TLS certificate loading fails.
    Give slightly more information when certification loading fails.
    Rather than have no information, you now get gnutls's only slightly
    less unhelpful error messages.
    Signed-off-by: Alex Bligh <alex@alex.org.uk>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Daniel P. Berrange ]
  * [e7ed11f] crypto: remove temp files on completion of secrets test.
    The secret object tests left some temporary files on disk
    when completing. Ensure they are unlink, and rename them
    to make it more obvious where they come from.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Paolo Bonzini ]
  * [b35c1f3] crypto: assert that qcrypto_hash_digest_len is in range.
    Otherwise unintended results could happen.  For example,
    Coverity reports a division by zero in qcrypto_afsplit_hash.
    While this cannot really happen, it shows that the contract
    of qcrypto_hash_digest_len can be improved.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Mike Frysinger ]
  * [c8d70e5] crypto: aes: always rename internal symbols.
    OpenSSL's libcrypto always defines AES symbols with the same names as
    qemu's local aes code.  This is problematic when enabling at least curl
    as that frequently also uses libcrypto.  It might not be noticed when
    running, but if you try to statically link, everything falls down.
    An example snippet:
      LINK  qemu-nbd
    .../libcrypto.a(aes-x86_64.o): In function 'AES_encrypt':
    (.text+0x460): multiple definition of 'AES_encrypt'
    crypto/aes.o:aes.c:(.text+0x670): first defined here
    .../libcrypto.a(aes-x86_64.o): In function 'AES_decrypt':
    (.text+0x9f0): multiple definition of 'AES_decrypt'
    crypto/aes.o:aes.c:(.text+0xb30): first defined here
    .../libcrypto.a(aes-x86_64.o): In function 'AES_cbc_encrypt':
    (.text+0xf90): multiple definition of 'AES_cbc_encrypt'
    crypto/aes.o:aes.c:(.text+0xff0): first defined here
    collect2: error: ld returned 1 exit status
    .../qemu-2.6.0/rules.mak:105: recipe for target 'qemu-nbd' failed
    make: *** [qemu-nbd] Error 1
    The aes.h header has redefines already for FreeBSD, but go ahead and
    enable that for everyone since there's no real good reason to not use
    a namespace all the time.
    Signed-off-by: Mike Frysinger <vapier@chromium.org>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Jan Beulich ]
  * [4837a1a] xen/blkif: avoid double access to any shared ring request fields.
    Commit f9e98e5d7a ("xen/blkif: Avoid double access to
    src->nr_segments") didn't go far enough: src->operation is also being
    used twice. And nothing was done to prevent the compiler from using the
    source side of the copy done by blk_get_request() (granted that's very
    unlikely).
    Move the barrier()s up, and add another one to blk_get_request().
    Note that for completing XSA-155, the barrier() getting added to
    blk_get_request() would suffice, and hence the changes to xen_blkif.h
    are more like just cleanup. And since, as said, the unpatched code
    getting compiled to something vulnerable is very unlikely (and not
    observed in practice), this isn't being viewed as a new security issue.
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>

  [ Thomas Huth ]
  * [7386ae6] ppc/spapr: Refactor h_client_architecture_support() CPU parsing code.
    The h_client_architecture_support() function has become quite big
    and nested already. So factor out the code that takes care of the
    sPAPR compatibility PVRs (which will be modified by the following
    patches).
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [8cd2ce7] ppc: Split pcr_mask settings into supported bits and the register mask.
    The current pcr_mask values are ambiguous: Should these be the mask
    that defines valid bits in the PCR register? Or should these rather
    indicate which compatibility levels are possible? Anyway, POWER6 and
    POWER7 should certainly not use the same values here. So let's
    introduce an additional variable "pcr_supported" here which is
    used to indicate the valid compatibility levels, and use pcr_mask
    to signal the valid bits in the PCR register.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [52b2519] ppc: Provide function to get CPU class of the host CPU.
    When running with KVM, we might be interested in some details
    of the host CPU class, too, so provide a function to get the
    corresponding CPU class.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [eac4fba] ppc: Improve PCR bit selection in ppc_set_compat()
    When using an olderr PowerISA level, all the upper compatibility
    bits have to be enabled, too. For example when we want to run
    something in PowerISA 2.05 compatibility mode on POWER8, the bit
    for 2.06 has to be set beside the bit for 2.05.
    Additionally, to make sure that we do not set bits that are not
    supported by the host, we apply a mask with the known-to-be-good
    bits here, too.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    [dwg: Added some #ifs to fix compile on 32-bit targets]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [b30ff22] ppc: Add PowerISA 2.07 compatibility mode.
    Make sure that guests can use the PowerISA 2.07 CPU sPAPR
    compatibility mode when they request it and the target CPU
    supports it.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Anton Blanchard ]
  * [42bff47] Add PowerPC AT_HWCAP2 definitions.
    We need the PPC_FEATURE2_HAS_HTM bit in a subsequent patch, so
    add the PowerPC AT_HWCAP2 definitions.
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Mark Cave-Ayland ]
  * [bc9ca59] macio: call dma_memory_unmap() at the end of each DMA transfer.
    This ensures that the underlying memory is marked dirty once the transfer
    is complete and resolves cache coherency problems under MacOS 9.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [d0e5a8f] spapr: Ensure all LMBs are represented in ibm,dynamic-memory.
    Memory hotplug can fail for some combinations of RAM and maxmem when
    DDW is enabled in the presence of devices like nec-usb-xhci. DDW depends
    on maximum addressable memory returned by guest and this value is currently
    being calculated wrongly by the guest kernel routine memory_hotplug_max().
    While there is an attempt to fix the guest kernel, this patch works
    around the problem within QEMU itself.
    memory_hotplug_max() routine in the guest kernel arrives at max
    addressable memory by multiplying lmb-size with the lmb-count obtained
    from ibm,dynamic-memory property. There are two assumptions here:
    - All LMBs are part of ibm,dynamic memory: This is not true for PowerKVM
      where only hot-pluggable LMBs are present in this property.
    - The memory area comprising of RAM and hotplug region is contiguous: This
      needn't be true always for PowerKVM as there can be gap between
      boot time RAM and hotplug region.
    To work around this guest kernel bug, ensure that ibm,dynamic-memory
    has information about all the LMBs (RMA, boot-time LMBs, future
    hotpluggable LMBs, and dummy LMBs to cover the gap between RAM and
    hotpluggable region).
    RMA is represented separately by memory@0 node. Hence mark RMA LMBs
    and also the LMBs for the gap b/n RAM and hotpluggable region as
    reserved and as having no valid DRC so that these LMBs are not considered
    by the guest.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Reviewed-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Cornelia Huck ]
  * [ff804f1] linux-headers: update.
    Update to 4.7-rc2.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Halil Pasic ]
  * [9eccb86] s390x/kvm: add interface for clearing IO irqs.
    According to the platform specification, under certain conditions,
    pending IO interruptions have to be cleared. Let's add an interface
    for that.
    Signed-off-by: Halil Pasic <pasic@linux.vnet.ibm.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [c1755b1] s390x/css: clear IO irqs when generating IPI CRW.
    According to the Principles of Operation (more precisely the subsection
    'Channel-Report Word'), a subchannel put into the installed parameters
    initialized state is in the same state as after an I/O system reset (just
    parameters possibly changed). This implies that any I/O interrupts for that
    subchannel are no longer pending (as I/O system resets clear I/O
    interrupts). Therefore, we need an interface to clear pending I/O
    interrupts. Make css_generate_sch_crws clear the pending IO interrupts for
    the subchannel.
    Signed-off-by: Halil Pasic <pasic@linux.vnet.ibm.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Cornelia Huck ]
  * [06e686e] s390x/css: introduce property type for device ids.
    Let's introduce a CssDevId to handle device ids of the xx.x.xxxx
    type used for channel devices. This has some benefits:
    - We can use them in virtio-ccw and split the validity checks for
      a channel device id in general from the constraint checking
      within the virtio-ccw scope.
    - We can reuse the device id type for future non-virtio channel
      devices.
    While we're at it, improve the validity checks and disallow e.g.
    trailing characters.
    Suggested-by: Dong Jia Shi <bjsdjshi@linux.vnet.ibm.com>
    Acked-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Reviewed-by: Dong Jia Shi <bjsdjshi@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Christian Borntraeger ]
  * [06409bd] virtio-ccw: Provide traces for indicator changes.
    This allows to trace changes in the summary and queue indicators
    for the non-irqfd case. For irqfd, kernel traces are needed instead.
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [dcddc75] s390x: Limit s390-ccw machines to 248 CPUs.
    The sclp scp read info call fills in a buffer with information about the
    system. With more than 248 CPUs we overflow the 4k buffer of the SCCB,
    leading to random data corruption. Basically ALL guest operating systems
    call scp read info, so let's limit the machines to 248 CPUs to make it
    obvious that >=249 does not work.
    As KVM also limits itself to 248 and TCG on s390 does not support
    SMP, this should cause no regression for any user as no VMs with more
    than 248 VCPUs were ever possible.
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Reviewed-by: Boris Fiuczynski <fiuczy@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [393ad2a] s390x/kvm: Fixup interrupt type for non-adapter I/O interrupts.
    The current algorithm for I/O interrupts would result in a wrong
    interrupt type for subchannel numbers fffe and ffff. In addition
    a non adapter interrupt might look like an adapter interrupt for
    any subchannel number that has the 0x0400 bit set.
    No kernel has ever used the type outside logging - and the logging
    was wrong all the time. For everything else the kernel used the
    interrupt parameters.
    Let's use the KVM_S390_INT_IO macro as for adapter interrupts.
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Peter Maydell ]
  * [7474f1b] qdev_try_create(): Assert that devices we put onto the system bus are SysBusDevices.
    If qdev_try_create() is passed NULL for the bus, it will automatically
    put the newly created device onto the default system bus. However
    if the device is not actually a SysBusDevice then this will result
    in later crashes (for instance when running the monitor "info qtree"
    command) because code reasonably assumes that all devices on the system
    bus are system bus devices.
    Generally the mistake is that the calling code should create the
    object with object_new(TYPE_FOO) rather than qdev_create(NULL, TYPE_FOO);
    see commit 6749695eaaf346c1 for an example of fixing this bug.
    Assert in qdev_try_create() if the device isn't suitable to put on
    the system bus, so that this mistake results in failure earlier
    and more reliably.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
  * [b1b23e5] xen: Clean up includes.
    Clean up includes so that osdep.h is included first and headers
    which it implies are not included manually.
    This commit was created with scripts/clean-includes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>

  [ Shannon Zhao ]
  * [5c0a381] target-arm: kvm64: set guest PMUv3 feature bit if supported.
    Check if kvm supports guest PMUv3. If so, set the corresponding feature
    bit for vcpu.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1465267577-1808-2-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [01fe6b6] hw/arm/virt: Add PMU node for virt machine.
    Add a virtual PMU device for virt machine while use PPI 7 for PMU
    overflow interrupt number.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1465267577-1808-3-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [8433dee] hw/arm/virt-acpi-build: Add PMU IRQ number in ACPI table.
    Add PMU IRQ number in ACPI table, then we can use PMU in guest through
    ACPI.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1465267577-1808-4-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [811595a] target-arm: Fix reset and migration of TTBCR(S)
    Commit 6459b94c26dd666badb3 broke reset and migration of the AArch32
    TTBCR(S) register if the guest used non-LPAE page tables. This is
    because the AArch32 TTBCR register definition is marked as ARM_CP_ALIAS,
    meaning that the AArch64 variant has to handle migration and reset.
    Although AArch64 TCR_EL3 doesn't need to care about the mask and
    base_mask fields, AArch32 may do so, and so we must use the special
    TTBCR reset and raw write functions to ensure they are set correctly.
    This doesn't affect TCR_EL2, because the AArch32 equivalent of that
    is HTCR, which never uses the non-LPAE page table variant.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reported-by: Pranith Kumar <bobby.prani+qemu@gmail.com>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-id: 1465488181-31977-1-git-send-email-peter.maydell@linaro.org

  [ Andrew Jones ]
  * [7a2ecd9] hw/arm/virt: separate versioned type-init code.
    Rename machvirt_info (which is specifically for 2.6 TypeInfo)
    to machvirt_2_6_info, and separate the type registration of the
    abstract machine type from the versioned type.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465746713-30414-2-git-send-email-drjones@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [ab093c3] hw/arm/virt: introduce DEFINE_VIRT_MACHINE.
    Use DEFINE_VIRT_MACHINE to generate versioned machine type info.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465746713-30414-3-git-send-email-drjones@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [3356ebc] hw/arm/virt: introduce DEFINE_VIRT_MACHINE_AS_LATEST.
    Create two variants of DEFINE_VIRT_MACHINE. One, just called
    DEFINE_VIRT_MACHINE, that does not set properties that only
    the latest machine type should have, and another that does.
    This will hopefully reduce potential for errors when adding
    new versions.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1465746713-30414-4-git-send-email-drjones@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [1287f2b] hw/arm/virt: create the 2.7 machine type.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1465746713-30414-5-git-send-email-drjones@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ xiaoqiang zhao ]
  * [00b2f75] hw/i2c: QOM'ify bitbang_i2c.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-2-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [93d6599] hw/i2c: QOM'ify exynos4210_i2c.c
    * Rename the exynos4210_i2c_realize to exynos4210_i2c_init
    * Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-3-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [758aba7] hw/i2c: QOM'ify omap_i2c.c
    * Split the omap_i2c_init into an instance_init and realize function
    * Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-4-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [8ce26fc] hw/i2c: QOM'ify versatile_i2c.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-5-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [ebc116f] hw/gpio: QOM'ify omap_gpio.c
    * Split the old SysBus init into an instance_init and
      DeviceClass::realize function
    * Drop the SysBus init function
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-6-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [09e6fb3] hw/gpio: QOM'ify pl061.c
    * Merge the pl061_initfn into pl061_init
    * Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-7-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [5367766] hw/gpio: QOM'ify zaurus.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-8-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [da8060b] hw/misc: QOM'ify arm_l2x0.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-9-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [b4ebbab] hw/misc: QOM'ify exynos4210_pmu.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-10-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e2d4f17] hw/misc: QOM'ify mst_fpga.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-11-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [c9796d7] hw/dma: QOM'ify pxa2xx_dma.c
    split the old SysBus init function into an instance_init
    and a Device realize function
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-12-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [0d554cb] hw/sd: QOM'ify pl181.c
    split the old SysBus init function into an instance_init
    and a Device realize function
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Message-id: 1465815255-21776-13-git-send-email-zxq_yx_007@163.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ KONRAD Frederic ]
  * [a9d2f1d] i2cbus: remove unused dev field.
    The dev field in i2cbus is not used.
    So just drop it.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    Message-id: 1465833014-21982-2-git-send-email-fred.konrad@greensocs.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [2293c27] i2c: implement broadcast write.
    This does a write to every slaves when the I2C bus get a write to address 0.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    Message-id: 1465833014-21982-3-git-send-email-fred.konrad@greensocs.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Crosthwaite ]
  * [056fca7] i2c: Factor our send() and recv() common logic.
    Most of the control flow logic between send and recv (error checking
    etc) is the same. Factor this out into a common send_recv() API.
    This is then usable by clients, where the control logic for send
    and receive differs only by a boolean. E.g.
    if (send)
       i2c_send(...):
    else
       i2c_recv(...);
    becomes:
    i2c_send_recv(... , send);
    Signed-off-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Message-id: 1465833014-21982-4-git-send-email-fred.konrad@greensocs.com
    Changes from FK:
      * Rebased on master.
      * Rebased on my i2c broadcast patch.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ KONRAD Frederic ]
  * [6fc7f77] introduce aux-bus.
    This introduces a new bus: aux-bus.
    It contains an address space for aux slaves devices and a bridge to an I2C bus
    for I2C through AUX transactions.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: 1465833014-21982-5-git-send-email-fred.konrad@greensocs.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e27ed1b] introduce dpcd module.
    This introduces dpcd module.
    It wires on a aux-bus and can be accessed by the driver to get lane-speed, etc.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    Message-id: 1465833014-21982-6-git-send-email-fred.konrad@greensocs.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [78c71af] hw/i2c-ddc.c: Implement DDC I2C slave.
    Implement an I2C slave which implements DDC and returns the
    EDID data for an attached monitor.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Tested-by: Hyun Kwon <hyun.kwon@xilinx.com>
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Message-id: 1465833014-21982-7-git-send-email-fred.konrad@greensocs.com
      - Rebased on the current master.
      - Modified for QOM.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    [PMM: actually wire up the vmstate to dc->vmsd]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ KONRAD Frederic ]
  * [d3c6369] introduce xlnx-dpdma.
    This is the implementation of the DPDMA.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    Message-id: 1465833014-21982-8-git-send-email-fred.konrad@greensocs.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [58ac482] introduce xlnx-dp.
    This is the implementation of the DisplayPort.
    It has an aux-bus to access dpcd and edid.
    Graphic plane is connected to the channel 3.
    Video plane is connected to the channel 0.
    Audio stream are connected to the channels 4 and 5.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: 1465833014-21982-9-git-send-email-fred.konrad@greensocs.com
    [PMM: fixed format strings]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [b93dbcd] arm: xlnx-zynqmp: Add xlnx-dp and xlnx-dpdma.
    This adds the DP and the DPDMA to the Zynq MP platform.
    Signed-off-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Reviewed-by: Alistair Francis <alistair.francis@xilinx.com>
    Tested-By: Hyun Kwon <hyun.kwon@xilinx.com>
    Message-id: 1465833014-21982-10-git-send-email-fred.konrad@greensocs.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [fe8fcf3] target-arm: Don't permit ARMv8-only Neon insns on ARMv7.
    The Neon instructions VCVTA, VCVTM, VCVTN, VCVTP, VRINTA, VRINTM,
    VRINTN, VRINTP, VRINTX, and VRINTZ were only introduced with ARMv8,
    so they need a guard to make them UNDEF if the CPU only supports ARMv7.
    (We got this right for all the other new-in-v8 insns, but forgot
    it for these Neon 2-reg-misc ops.)
    Reported-by: Christophe Lyon <christophe.lyon@linaro.org>
    Tested-by: Christophe Lyon <christophe.lyon@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465492511-9333-1-git-send-email-peter.maydell@linaro.org

  [ Eduardo Habkost ]
  * [f6f949e] target-i386: add Skylake-Client cpu model.
    Introduce Skylake-Client cpu mode which inherits the features from
    Broadwell and supports some additional features that are: MPX,
    XSAVEC, and XGETBV1.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [d86c145] pc: Add 2.7 machine.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Radim Krčmář ]
  * [5232d00] target-i386: Implement CPUID[0xB] (Extended Topology Enumeration)
    I looked at a dozen Intel CPU that have this CPUID and all of them
    always had Core offset as 1 (a wasted bit when hyperthreading is
    disabled) and Package offset at least 4 (wasted bits at <= 4 cores).
    QEMU uses more compact IDs and it doesn't make much sense to change it
    now.  I keep the SMT and Core sub-leaves even if there is just one
    thread/core;  it makes the code simpler and there should be no harm.
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Eduardo Habkost ]
  * [c19b852] target-i386: Remove xlevel & hv-spinlocks option fixups.
    The "fixup will be removed in future versions" warnings are
    present since QEMU 1.7.0, at least, so users should have fixed
    their scripts and configurations, already.
    In the case of libvirt users, libvirt doesn't use the "xlevel"
    option, and already rejects HyperV spinlock retry count < 0xFFF.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [dc15c05] target-i386: Move features logic that requires CPUState to realize time.
    Making x86_cpu_parse_featurestr() a pure convertor
    of legacy feature string into global properties, needs
    it to be called before a CPU instance is created so
    parser shouldn't modify CPUState directly or access
    it at all. Hence move current hack that directly pokes
    into CPUState, to set/unset +-feats, from parser to
    CPU's realize method.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Eduardo Habkost ]
  * [e435601] target-i386: Remove assert(kvm_enabled()) from host_x86_cpu_initfn()
    The code will be changed to allow creation of the CPU object and
    report kvm_required errors only at realizefn, so we need to make
    the instance_init function more flexible.
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [104494e] target-i386: Move xcc->kvm_required check to realize time.
    It will allow to drop custom cpu_x86_init() and use
    cpu_generic_init() instead, reducing cpu_x86_create()
    to a simple 3-liner.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [a57d016] target-i386: Use cpu_generic_init() in cpu_x86_init()
    Now cpu_x86_init() does nothing more or less
    than duplicating cpu_generic_init() logic.
    So simplify it by using cpu_generic_init().
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Eduardo Habkost ]
  * [f6750e9] target-i386: Consolidate calls of object_property_parse() in x86_cpu_parse_featurestr.
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Dr. David Alan Gilbert ]
  * [d688c62] Postcopy: Avoid 0 length discards.
    The discard code in migration/ram.c would send request for
    zero length discards in the case where no discards were needed.
    It doesn't appear to have had any bad effect.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Message-id: 1465816605-29488-2-git-send-email-dgilbert@redhat.com
    Message-Id: <1465816605-29488-2-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [a22463a] Migration: Split out ram part of qmp_query_migrate.
    The RAM section of qmp_query_migrate is reasonably complex
    and repeated 3 times.  Split it out into a helper.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1465816605-29488-3-git-send-email-dgilbert@redhat.com
    Reviwed-by: Denis V. Lunev <den@openvz.org>
    Message-Id: <1465816605-29488-3-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [d3bf541] Postcopy: Add stats on page requests.
    On the source, add a count of page requests received from the
    destination.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Message-id: 1465816605-29488-4-git-send-email-dgilbert@redhat.com
    Message-Id: <1465816605-29488-4-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [ea0c6d6] test: Postcopy.
    This is a postcopy test (x86 only) that actually runs the guest
    and checks the memory contents.
    The test runs from an x86 boot block with the hex embedded in the test;
    the source for this is:
    ...........
    .code16
    .org 0x7c00
    	.file	"fill.s"
    	.text
    	.globl	start
    	.type	start, @function
    start:             # at 0x7c00 ?
            cli
            lgdt gdtdesc
            mov $1,%eax
            mov %eax,%cr0  # Protected mode enable
            data32 ljmp $8,$0x7c20
    .org 0x7c20
    .code32
            # A20 enable - not sure I actually need this
            inb $0x92,%al
            or  $2,%al
            outb %al, $0x92
            # set up DS for the whole of RAM (needed on KVM)
            mov $16,%eax
            mov %eax,%ds
            mov $65,%ax
            mov $0x3f8,%dx
            outb %al,%dx
            # bl keeps a counter so we limit the output speed
            mov $0, %bl
    mainloop:
            # Start from 1MB
            mov $(1024*1024),%eax
    innerloop:
            incb (%eax)
            add $4096,%eax
            cmp $(100*1024*1024),%eax
            jl innerloop
            inc %bl
            jnz mainloop
            mov $66,%ax
            mov $0x3f8,%dx
            outb %al,%dx
    	jmp mainloop
            # GDT magic from old (GPLv2)  Grub startup.S
            .p2align        2       /* force 4-byte alignment */
    gdt:
            .word   0, 0
            .byte   0, 0, 0, 0
            /* -- code segment --
             * base = 0x00000000, limit = 0xFFFFF (4 KiB Granularity), present
             * type = 32bit code execute/read, DPL = 0
             */
            .word   0xFFFF, 0
            .byte   0, 0x9A, 0xCF, 0
            /* -- data segment --
             * base = 0x00000000, limit 0xFFFFF (4 KiB Granularity), present
             * type = 32 bit data read/write, DPL = 0
             */
            .word   0xFFFF, 0
            .byte   0, 0x92, 0xCF, 0
    gdtdesc:
            .word   0x27                    /* limit */
            .long   gdt                     /* addr */
    /* I'm a bootable disk */
    .org 0x7dfe
            .byte 0x55
            .byte 0xAA
    ...........
    and that can be assembled by the following magic:
        as --32 -march=i486 fill.s -o fill.o
        objcopy -O binary fill.o fill.boot
        dd if=fill.boot of=bootsect bs=256 count=2 skip=124
        xxd -i bootsect
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Message-id: 1465816605-29488-5-git-send-email-dgilbert@redhat.com
    Message-Id: <1465816605-29488-5-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Andrea Arcangeli ]
  * [f5d4579] tests: fix libqtest socket timeouts.
    I kept getting timeouts and unix socket accept failures under high
    load, the patch fixes it.
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Message-id: 1465816605-29488-6-git-send-email-dgilbert@redhat.com
    Message-Id: <1465816605-29488-6-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Dr. David Alan Gilbert ]
  * [096631b] Postcopy: Check for support when setting the capability.
    Knowing whether the destination host supports migration with
    postcopy can be tricky.
    The destination doesn't need the capability set, however
    if we set it then use the opportunity to do the test and
    tell the user/management layer early.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-id: 1465816605-29488-7-git-send-email-dgilbert@redhat.com
    Message-Id: <1465816605-29488-7-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Daniel P. Berrange ]
  * [bdbba12] migration: fix typos in qapi-schema from latest migration additions.
    Recent migration QAPI enhancements had a few spelling mistakes
    and also incorrect version number in a few places.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1464776234-9910-2-git-send-email-berrange@redhat.com
    Message-Id: <1464776234-9910-2-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [22724f4] migration: rename functions to starting migrations.
    Apply the following renames for starting incoming migration:
     process_incoming_migration -> migration_fd_process_incoming
     migration_set_incoming_channel -> migration_channel_process_incoming
     migration_tls_set_incoming_channel -> migration_tls_channel_process_incoming
    and for starting outgoing migration:
     migration_set_outgoing_channel -> migration_channel_connect
     migration_tls_set_outgoing_channel -> migration_tls_channel_connect
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1464776234-9910-3-git-send-email-berrange@redhat.com
    Message-Id: <1464776234-9910-3-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Kevin Wolf ]
  * [b2f65d6] qcow2: Work with bytes in qcow2_get_cluster_offset()
    This patch changes the units that qcow2_get_cluster_offset() uses
    internally, without touching the interface just yet. This will be done
    in another patch.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [ecfe186] qcow2: Implement .bdrv_co_preadv()
    Reading from qcow2 images is now byte granularity.
    Most of the affected code in qcow2 actually gets simpler with this
    change. The only exception is encryption, which is fixed on 512 bytes
    blocks; in order to keep this working, bs->request_alignment is set for
    encrypted images.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [aaa4d20] qcow2: Make copy_sectors() byte based.
    This will allow copy on write operations where the overwritten part of
    the cluster is not aligned to sector boundaries.
    Also rename the function because it has nothing to do with sectors any
    more.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [8556739] qcow2: Use bytes instead of sectors for QCowL2Meta.
    In preparation for implementing .bdrv_co_pwritev in qcow2.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [d46a0bb] qcow2: Implement .bdrv_co_pwritev()
    This changes qcow2 to implement the byte-based .bdrv_co_pwritev
    interface rather than the sector-based old one.
    As preallocation uses the same allocation function as normal writes, and
    the interface of that function needs to be changed, it is converted in
    the same patch.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>

  [ Colin Lord ]
  * [38a53d5] blockdev: clarify error on attempt to open locked tray.
    When opening a device with a locked tray, gives an error explaining the
    device tray is locked and that the user should wait and try again. This
    is less confusing than the previous error, which simply stated that the
    tray was locked.
    Signed-off-by: Colin Lord <clord@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Vladimir Sementsov-Ogievskiy ]
  * [479b599] hmp: acquire aio_context in hmp_qemu_io.
    Acquire aio context before run command, this is mandatory for unit tests.
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Cédric Le Goater ]
  * [9e19036] m25p80: fix test on blk_pread() return value
    commit 243e6f69c129 ("m25p80: Switch to byte-based block access")
    replaced blk_read() calls with blk_pread() but return values are
    different.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [604e861] qemu-img bench: Fix uninitialised writethrough mode.
    If no -t option is specified, bool writethrough stayed uninitialised.
    Initialise it as false, which makes cache=writeback the default cache
    mode.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Eric Blake ]
  * [73698c3] block: Avoid bogus flags during mirroring.
    Commit e253f4b8 converted mirroring from sector-based bdrv_aio_*
    to byte-based blk_aio_*, but failed to account for the subtle
    difference in signatures (the former takes a semi-redundant length,
    the latter takes a flags parameter).  Since all of our flags are
    currently smaller in size than BDRV_SECTOR_SIZE, it has no ill
    effects until we either perform sub-sector mirroring, or we start
    asserting that no unexpected flags are set.  I found it while
    testing new asserts when qemu-iotests 132 started warning about an
    unknown flag 0x200000.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [fa16653] block: Assert that flags are in range.
    Add a new BDRV_REQ_MASK constant, and use it to make sure that
    caller flags are always valid.
    Tested with 'make check' and with qemu-iotests on both '-raw'
    and '-qcow2'; the only failure turned up was fixed in the
    previous commit.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Daniel P. Berrange ]
  * [8c0dcbc] block: drop support for using qcow[2] encryption with system emulators.
    Back in the 2.3.0 release we declared qcow[2] encryption as
    deprecated, warning people that it would be removed in a future
    release.
      commit a1f688f4152e65260b94f37543521ceff8bfebe4
      Author: Markus Armbruster <armbru@redhat.com>
      Date:   Fri Mar 13 21:09:40 2015 +0100
        block: Deprecate QCOW/QCOW2 encryption
    The code still exists today, but by a (happy?) accident we entirely
    broke the ability to use qcow[2] encryption in the system emulators
    in the 2.4.0 release due to
      commit 8336aafae1451d54c81dd2b187b45f7c45d2428e
      Author: Daniel P. Berrange <berrange@redhat.com>
      Date:   Tue May 12 17:09:18 2015 +0100
        qcow2/qcow: protect against uninitialized encryption key
    This commit was designed to prevent future coding bugs which
    might cause QEMU to read/write data on an encrypted block
    device in plain text mode before a decryption key is set.
    It turns out this preventative measure was a little too good,
    because we already had a long standing bug where QEMU read
    encrypted data in plain text mode during system emulator
    startup, in order to guess disk geometry:
      Thread 10 (Thread 0x7fffd3fff700 (LWP 30373)):
      #0  0x00007fffe90b1a28 in raise () at /lib64/libc.so.6
      #1  0x00007fffe90b362a in abort () at /lib64/libc.so.6
      #2  0x00007fffe90aa227 in __assert_fail_base () at /lib64/libc.so.6
      #3  0x00007fffe90aa2d2 in  () at /lib64/libc.so.6
      #4  0x000055555587ae19 in qcow2_co_readv (bs=0x5555562accb0, sector_num=0, remaining_sectors=1, qiov=0x7fffffffd260) at block/qcow2.c:1229
      #5  0x000055555589b60d in bdrv_aligned_preadv (bs=bs@entry=0x5555562accb0, req=req@entry=0x7fffd3ffea50, offset=offset@entry=0, bytes=bytes@entry=512, align=align@entry=512, qiov=qiov@entry=0x7fffffffd260, flags=0) at block/io.c:908
      #6  0x000055555589b8bc in bdrv_co_do_preadv (bs=0x5555562accb0, offset=0, bytes=512, qiov=0x7fffffffd260, flags=<optimized out>) at block/io.c:999
      #7  0x000055555589c375 in bdrv_rw_co_entry (opaque=0x7fffffffd210) at block/io.c:544
      #8  0x000055555586933b in coroutine_thread (opaque=0x555557876310) at coroutine-gthread.c:134
      #9  0x00007ffff64e1835 in g_thread_proxy (data=0x5555562b5590) at gthread.c:778
      #10 0x00007ffff6bb760a in start_thread () at /lib64/libpthread.so.0
      #11 0x00007fffe917f59d in clone () at /lib64/libc.so.6
      Thread 1 (Thread 0x7ffff7ecab40 (LWP 30343)):
      #0  0x00007fffe91797a9 in syscall () at /lib64/libc.so.6
      #1  0x00007ffff64ff87f in g_cond_wait (cond=cond@entry=0x555555e085f0 <coroutine_cond>, mutex=mutex@entry=0x555555e08600 <coroutine_lock>) at gthread-posix.c:1397
      #2  0x00005555558692c3 in qemu_coroutine_switch (co=<optimized out>) at coroutine-gthread.c:117
      #3  0x00005555558692c3 in qemu_coroutine_switch (from_=0x5555562b5e30, to_=to_@entry=0x555557876310, action=action@entry=COROUTINE_ENTER) at coroutine-gthread.c:175
      #4  0x0000555555868a90 in qemu_coroutine_enter (co=0x555557876310, opaque=0x0) at qemu-coroutine.c:116
      #5  0x0000555555859b84 in thread_pool_completion_bh (opaque=0x7fffd40010e0) at thread-pool.c:187
      #6  0x0000555555859514 in aio_bh_poll (ctx=ctx@entry=0x5555562953b0) at async.c:85
      #7  0x0000555555864d10 in aio_dispatch (ctx=ctx@entry=0x5555562953b0) at aio-posix.c:135
      #8  0x0000555555864f75 in aio_poll (ctx=ctx@entry=0x5555562953b0, blocking=blocking@entry=true) at aio-posix.c:291
      #9  0x000055555589c40d in bdrv_prwv_co (bs=bs@entry=0x5555562accb0, offset=offset@entry=0, qiov=qiov@entry=0x7fffffffd260, is_write=is_write@entry=false, flags=flags@entry=(unknown: 0)) at block/io.c:591
      #10 0x000055555589c503 in bdrv_rw_co (bs=bs@entry=0x5555562accb0, sector_num=sector_num@entry=0, buf=buf@entry=0x7fffffffd2e0 "\321,", nb_sectors=nb_sectors@entry=21845, is_write=is_write@entry=false, flags=flags@entry=(unknown: 0)) at block/io.c:614
      #11 0x000055555589c562 in bdrv_read_unthrottled (nb_sectors=21845, buf=0x7fffffffd2e0 "\321,", sector_num=0, bs=0x5555562accb0) at block/io.c:622
      #12 0x000055555589c562 in bdrv_read_unthrottled (bs=0x5555562accb0, sector_num=sector_num@entry=0, buf=buf@entry=0x7fffffffd2e0 "\321,", nb_sectors=nb_sectors@entry=21845) at block/io.c:634
        nb_sectors@entry=1) at block/block-backend.c:504
      #14 0x0000555555752e9f in guess_disk_lchs (blk=blk@entry=0x5555562a5290, pcylinders=pcylinders@entry=0x7fffffffd52c, pheads=pheads@entry=0x7fffffffd530, psectors=psectors@entry=0x7fffffffd534) at hw/block/hd-geometry.c:68
      #15 0x0000555555752ff7 in hd_geometry_guess (blk=0x5555562a5290, pcyls=pcyls@entry=0x555557875d1c, pheads=pheads@entry=0x555557875d20, psecs=psecs@entry=0x555557875d24, ptrans=ptrans@entry=0x555557875d28) at hw/block/hd-geometry.c:133
      #16 0x0000555555752b87 in blkconf_geometry (conf=conf@entry=0x555557875d00, ptrans=ptrans@entry=0x555557875d28, cyls_max=cyls_max@entry=65536, heads_max=heads_max@entry=16, secs_max=secs_max@entry=255, errp=errp@entry=0x7fffffffd5e0) at hw/block/block.c:71
      #17 0x0000555555799bc4 in ide_dev_initfn (dev=0x555557875c80, kind=IDE_HD) at hw/ide/qdev.c:174
      #18 0x0000555555768394 in device_realize (dev=0x555557875c80, errp=0x7fffffffd640) at hw/core/qdev.c:247
      #19 0x0000555555769a81 in device_set_realized (obj=0x555557875c80, value=<optimized out>, errp=0x7fffffffd730) at hw/core/qdev.c:1058
      #20 0x00005555558240ce in property_set_bool (obj=0x555557875c80, v=<optimized out>, opaque=0x555557875de0, name=<optimized out>, errp=0x7fffffffd730)
            at qom/object.c:1514
      #21 0x0000555555826c87 in object_property_set_qobject (obj=obj@entry=0x555557875c80, value=value@entry=0x55555784bcb0, name=name@entry=0x55555591cb3d "realized", errp=errp@entry=0x7fffffffd730) at qom/qom-qobject.c:24
      #22 0x0000555555825760 in object_property_set_bool (obj=obj@entry=0x555557875c80, value=value@entry=true, name=name@entry=0x55555591cb3d "realized", errp=errp@entry=0x7fffffffd730) at qom/object.c:905
      #23 0x000055555576897b in qdev_init_nofail (dev=dev@entry=0x555557875c80) at hw/core/qdev.c:380
      #24 0x0000555555799ead in ide_create_drive (bus=bus@entry=0x555557629630, unit=unit@entry=0, drive=0x5555562b77e0) at hw/ide/qdev.c:122
      #25 0x000055555579a746 in pci_ide_create_devs (dev=dev@entry=0x555557628db0, hd_table=hd_table@entry=0x7fffffffd830) at hw/ide/pci.c:440
      #26 0x000055555579b165 in pci_piix3_ide_init (bus=<optimized out>, hd_table=0x7fffffffd830, devfn=<optimized out>) at hw/ide/piix.c:218
      #27 0x000055555568ca55 in pc_init1 (machine=0x5555562960a0, pci_enabled=1, kvmclock_enabled=<optimized out>) at /home/berrange/src/virt/qemu/hw/i386/pc_piix.c:256
      #28 0x0000555555603ab2 in main (argc=<optimized out>, argv=<optimized out>, envp=<optimized out>) at vl.c:4249
    So the safety net is correctly preventing QEMU reading cipher
    text as if it were plain text, during startup and aborting QEMU
    to avoid bad usage of this data.
    For added fun this bug only happens if the encrypted qcow2
    file happens to have data written to the first cluster,
    otherwise the cluster won't be allocated and so qcow2 would
    not try the decryption routines at all, just return all 0's.
    That no one even noticed, let alone reported, this bug that
    has shipped in 2.4.0, 2.5.0 and 2.6.0 shows that the number
    of actual users of encrypted qcow2 is approximately zero.
    So rather than fix the crash, and backport it to stable
    releases, just go ahead with what we have warned users about
    and disable any use of qcow2 encryption in the system
    emulators. qemu-img/qemu-io/qemu-nbd are still able to access
    qcow2 encrypted images for the sake of data conversion.
    In the future, qcow2 will gain support for the alternative
    luks format, but when this happens it'll be using the
    '-object secret' infrastructure for getting keys, which
    avoids this problematic scenario entirely.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [244483e] block: Byte-based bdrv_co_do_copy_on_readv()
    In a first step to convert the common I/O path to work on bytes rather
    than sectors, this converts the copy-on-read logic that is used by
    bdrv_aligned_preadv().
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [49c0752] block: Prepare bdrv_aligned_preadv() for byte-aligned requests.
    This patch makes bdrv_aligned_preadv() ready to accept byte-aligned
    requests. Note that this doesn't mean that such requests are actually
    made. The caller still ensures that all requests are aligned to at least
    512 bytes.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [9896c87] block: Prepare bdrv_aligned_pwritev() for byte-aligned requests.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [2174f12] raw-posix: Switch to bdrv_co_* interfaces.
    In order to use the modern byte-based .bdrv_co_preadv/pwritev()
    interface, this patch switches raw-posix to coroutine-based interfaces
    as a first step. In terms of semantics and performance, it doesn't make
    a difference with the existing code whether we go from a coroutine to a
    callback-based interface already in block/io.c or only in linux-aio.c
    As there have been concerns in the past that this change may be a step
    in the wrong direction with respect to a possible AIO fast path, the
    old callback-based interface for linux-aio is left around and can be
    reactivated when a fast path (e.g. directly from virtio-blk dataplane,
    bypassing the whole block layer) is implemented.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [9d52aa3] raw-posix: Implement .bdrv_co_preadv/pwritev.
    The raw-posix block driver actually supports byte-aligned requests now
    on non-O_DIRECT images, like it already (and previously incorrectly)
    claimed in bs->request_alignment.
    For some block drivers this means that a RMW cycle can be avoided when
    they write sub-sector metadata e.g. for cluster allocation.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [23b0d9f] block: Don't enforce 512 byte minimum alignment.
    If block drivers say that they can do an alignment < 512 bytes, let's
    just suppose they mean it. raw-posix used to be an offender with respect
    to this, but it can actually deal with byte-aligned requests now.
    The default is still 512 bytes for any drivers that only implement
    sector-based interfaces, but it is 1 now for drivers that implement
    .bdrv_co_preadv.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [ccb9dc1] linux-aio: Cancel BH if not needed
    linux-aio uses a BH in order to make sure that the remaining completions
    are processed even in nested event loops of completion callbacks in
    order to avoid deadlocks.
    There is no need, however, to have the BH overhead for the first call
    into qemu_laio_completion_bh() or after all pending completions have
    already been processed. Therefore, this patch calls directly into
    qemu_laio_completion_bh() in qemu_laio_completion_cb() and cancels
    the BH after qemu_laio_completion_bh() has processed all pending
    completions.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Thomas Huth ]
  * [48bea96] doc: Fix mailing list address in tests/qemu-iotests/README.
    The address of the mailing list is qemu-devel@nongnu.org
    instead of qemu-devel@savannah.nongnu.org. And while we're
    at it, also mention the qemu-block mailing list here.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [f1e8474] block: Introduce bdrv_preadv()
    We already have a byte-based bdrv_pwritev(), but the read counterpart
    was still missing. This commit adds it.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [5ddda0b] block: Make .bdrv_load_vmstate() vectored.
    This brings it in line with .bdrv_save_vmstate().
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [b433d94] block: Allow .bdrv_load/save_vmstate() to return 0/-errno.
    The return value of .bdrv_load/save_vmstate() can be any non-negative
    number in case of success now. It used to be bytes/-errno.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1a8ae82] block: Make bdrv_load/save_vmstate coroutine_fns.
    This allows drivers to share code between normal I/O and vmstate
    accesses.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [734a775] qcow2: Let vmstate call qcow2_co_preadv/pwrite directly.
    We don't really want to go through the block layer in order to read from
    or write to the vmstate in a qcow2 image. Doing so required a few ugly
    hacks like saving and restoring the old image size (because writing to
    vmstate offsets would increase the image size) or disabling the "reads
    after EOF = zeroes" logic. When calling the right functions directly,
    these hacks aren't necessary any more.
    Note that .bdrv_vmstate_load/save() return 0 instead of the number of
    bytes in case of success now.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [c9d2002] block: Remove bs->zero_beyond_eof.
    It is always true for open images now.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [4186904] block: Fix snapshot=on with aio=native
    snapshot=on creates a temporary overlay that is always opened with
    cache=unsafe (the cache mode specified by the user is only for the
    actual image file and its children). This means that we must not inherit
    the BDRV_O_NATIVE_AIO flag for the temporary overlay because trying to
    use Linux AIO with cache=unsafe results in an error.
    Reproducer without this patch:
    $ x86_64-softmmu/qemu-system-x86_64 -drive file=/tmp/test.qcow2,cache=none,aio=native,snapshot=on
    qemu-system-x86_64: -drive file=/tmp/test.qcow2,cache=none,aio=native,snapshot=on: aio=native was
    specified, but it requires cache.direct=on, which was not specified.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Alberto Garcia ]
  * [eb1364c] block: use the block job list in bdrv_drain_all()
    bdrv_drain_all() pauses all block jobs by using bdrv_next() to iterate
    over all top-level BlockDriverStates. Therefore the code is unable to
    find block jobs in other nodes.
    This patch uses block_job_next() to iterate over all block jobs.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Message-id: 55ee7d7d4a65c28aa1a1b28823897ef326f328e2.1464346103.git.berto@igalia.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [f0f55de] block: use the block job list in qmp_query_block_jobs()
    qmp_query_block_jobs() uses bdrv_next() to look for block jobs, but
    this function can only find those in top-level BlockDriverStates.
    This patch uses block_job_next() instead.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Message-id: a8b7e5497b7c1fa67c12fcceae1630d01c3b1f96.1464346103.git.berto@igalia.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [0824afd] block: Prevent sleeping jobs from resuming if they have been paused.
    If we pause a block job and drain its BlockDriverState we want that
    the job remains inactive until we call block_job_resume() again.
    However if we pause the job while it is sleeping then it will resume
    when the sleep timer fires.
    This patch prevents that from happening by checking if the job has
    been paused after it comes back from sleeping.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Suggested-by: Kevin Wolf <kwolf@redhat.com>
    Message-id: 3d9011151512326b890d22bdab3530244ef349d7.1464346103.git.berto@igalia.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [834fe28] block: Create the commit block job before reopening any image.
    If the base or overlay images need to be reopened in read-write mode
    but the block_job_create() call fails then no one will put those
    images back in read-only mode.
    We can solve this problem easily by calling block_job_create() first.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Message-id: aa495045770a6f1a7cc5d408397a17c75097fdd8.1464346103.git.berto@igalia.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Fam Zheng ]
  * [6ea66b5] iotests: 095: Clean up QEMU before showing image info.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1464944872-24484-1-git-send-email-famz@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Vikhyat Umrao ]
  * [87cd3d2] rbd:change error_setg() to error_setg_errno()
    Ceph RBD block driver does not use error_setg_errno() where
    it is possible to use. This patch replaces error_setg()
    from error_setg_errno().
    Signed-off-by: Vikhyat Umrao <vumrao@redhat.com>
    Message-id: 1462780319-5796-1-git-send-email-vumrao@redhat.com
    Reviewed-by: Josh Durgin <jdurgin@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Max Reitz ]
  * [9bd910e] block: Allow replacement of a BDS by its overlay
    change_parent_backing_link() asserts that the BDS to be replaced is not
    used as a backing file. However, we may want to replace a BDS by its
    overlay in which case that very link should not be redirected.
    For instance, when doing a sync=none drive-mirror operation, we may have
    the following BDS/BB forest before block job completion:
      target
      base <- source <- BlockBackend
    During job completion, we want to establish the source BDS as the
    target's backing node:
              target
                |
                v
      base <- source <- BlockBackend
    This makes the target a valid replacement for the source:
              target <- BlockBackend
                |
                v
      base <- source
    Without this modification to change_parent_backing_link() we have to
    inject the target into the graph before the source is its backing node,
    thus temporarily creating a wrong graph:
      target <- BlockBackend
      base <- source
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160610185750.30956-2-mreitz@redhat.com
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [274fcce] block/mirror: Fix target backing BDS.
    Currently, we are trying to move the backing BDS from the source to the
    target in bdrv_replace_in_backing_chain() which is called from
    mirror_exit(). However, mirror_complete() already tries to open the
    target's backing chain with a call to bdrv_open_backing_file().
    First, we should only set the target's backing BDS once. Second, the
    mirroring block job has a better idea of what to set it to than the
    generic code in bdrv_replace_in_backing_chain() (in fact, the latter's
    conditions on when to move the backing BDS from source to target are not
    really correct).
    Therefore, remove that code from bdrv_replace_in_backing_chain() and
    leave it to mirror_complete().
    Depending on what kind of mirroring is performed, we furthermore want to
    use different strategies to open the target's backing chain:
    - If blockdev-mirror is used, we can assume the user made sure that the
      target already has the correct backing chain. In particular, we should
      not try to open a backing file if the target does not have any yet.
    - If drive-mirror with mode=absolute-paths is used, we can and should
      reuse the already existing chain of nodes that the source BDS is in.
      In case of sync=full, no backing BDS is required; with sync=top, we
      just link the source's backing BDS to the target, and with sync=none,
      we use the source BDS as the target's backing BDS.
      We should not try to open these backing files anew because this would
      lead to two BDSs existing per physical file in the backing chain, and
      we would like to avoid such concurrent access.
    - If drive-mirror with mode=existing is used, we have to use the
      information provided in the physical image file which means opening
      the target's backing chain completely anew, just as it has been done
      already.
      If the target's backing chain shares images with the source, this may
      lead to multiple BDSs per physical image file. But since we cannot
      reliably ascertain this case, there is nothing we can do about it.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160610185750.30956-3-mreitz@redhat.com
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [67882b1] block/null: Implement bdrv_refresh_filename()
    The null block driver ignores any filename used for creating its BDSs,
    which allows creating such BDSs even without any filename at all. In
    that case, we currently construct a JSON filename when queried instead
    of a plain "null-co://" or "null-aio://". This patch implements
    bdrv_refresh_filename() to remedy this behavior.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160610185750.30956-4-mreitz@redhat.com
    [mreitz@redhat.com: Added commit message]
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [298c600] iotests: Add test for post-mirror backing chains.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160610185750.30956-5-mreitz@redhat.com
    Reviewed-by: Fam Zheng <famz@redhat.com>
    [mreitz@redhat.com: Removed unnecessary imports]
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [3dd48fd] iotests: Add test for oVirt-like storage migration.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160610185750.30956-6-mreitz@redhat.com
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Vladimir Sementsov-Ogievskiy ]
  * [0e32119] hbitmap: add 'pos < size' asserts.
    For now, fail in hbitmap_set on start + count > size will come from
    hbitmap_set
      hb_count_between
        hbitmap_iter_init
          assert(pos < hb->size)
    This patch adds such checks to set/get/reset functions of hbitmap.
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-id: 1465924093-76875-2-git-send-email-vsementsov@virtuozzo.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Thomas Huth ]
  * [8926692] configure: Remove unused CONFIG_ZERO_MALLOC setting.
    CONFIG_ZERO_MALLOC was only used in qemu-malloc.c and
    this file has been removed with the following commit:
    	41a748265f4879b52b0e87ff9c93bed975163886
    	Remove qemu_malloc/qemu_free
    So we don't need this configuration setting anymore.
    This patch also removes the z_version variable, since
    this is now also not needed anymore.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Laurent Vivier <lvivier@redhat.com>
    Message-Id: <1465398683-3152-1-git-send-email-thuth@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [02d0e09] os-posix: include sys/mman.h
    qemu/osdep.h checks whether MAP_ANONYMOUS is defined, but this check
    is bogus without a previous inclusion of sys/mman.h.  Include it in
    sysemu/os-posix.h and remove it from everywhere else.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [e9abfcb] clean-includes: run it once more.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Thomas Huth ]
  * [e4650c8] configure: Enable -Werror for MinGW builds, too.
    MinGW seems to compile currently without warnings, so it should
    be safe to enable -Werror now for this environment, too.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <1465373606-18486-1-git-send-email-thuth@redhat.com>
    Tested-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Sergey Fedorov ]
  * [ac99c62] Makefile: Fix tag file generation targets
    "ctags" produces a file named "tags", not "ctags". It doesn't look
    reasonable to use phony target name as a file name to remove. Just use
    exact file names to remove in "ctags" and "TAGS" target receipts.
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <1465495115-24665-1-git-send-email-sergey.fedorov@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Dr. David Alan Gilbert ]
  * [fc6e1de] Make avx2 configure test work with -O2.
    When configured with --extra-cflags=-O2 gcc optimised out the test
    and the readelf failed the check leaving avx2 disabled.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <1465557378-24105-2-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [4fb8320] avx2 configure: Use primitives in test.
    Use the avx2 primitives during the test, thus making sure that the
    compiler and assembler could actually use avx2.
    This also detects the failure case on gcc 4.8.x with -save-temps
    and avoids the need for the gcc version check in cutils.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <1465557378-24105-3-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Thomas Huth ]
  * [0fb2331] configure: Remove unused CONFIG_SIGEV_THREAD_ID switch.
    The CONFIG_SIGEV_THREAD_ID switch is unused since the related code
    has been removed by commit 6d327171551a12b937c5718073b9848d0274c74d
    ("aio / timers: Remove alarm timers"), so it can safely be removed
    nowadays.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <1465571084-19885-1-git-send-email-thuth@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Maydell ]
  * [773dce3] nbd: Don't use *_to_cpup() functions.
    The *_to_cpup() functions are not very useful, as they simply do
    a pointer dereference and then a *_to_cpu(). Instead use either:
     * ld*_*_p(), if the data is at an address that might not be
       correctly aligned for the load
     * a local dereference and *_to_cpu(), if the pointer is
       the correct type and known to be correctly aligned
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-Id: <1465570836-22211-1-git-send-email-peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f6be672] nbd: Don't use cpu_to_*w() functions.
    The cpu_to_*w() functions just compose a pointer dereference
    with a byteswap. Instead use st*_p(), which handles potential
    pointer misalignment and avoids the need to cast the pointer.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-Id: <1465575342-12146-1-git-send-email-peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [56af2dd] nbd: simplify the nbd_request and nbd_reply structs.
    These structs are never used to represent the bytes that go over the
    network.  The big-endian network data is built into a uint8_t array
    in nbd_{receive,send}_{request,reply}.  Remove the unused magic field,
    reorder the struct to avoid holes, and remove the packed attribute.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Chao Peng ]
  * [494e95e] target-i386: kvm: cache KVM_GET_SUPPORTED_CPUID data.
    KVM_GET_SUPPORTED_CPUID ioctl is called frequently when initializing
    CPU. Depends on CPU features and CPU count, the number of calls can be
    extremely high which slows down QEMU booting significantly. In our
    testing, we saw 5922 calls with switches:
        -cpu SandyBridge -smp 6,sockets=6,cores=1,threads=1
    This ioctl takes more than 100ms, which is almost half of the total
    QEMU startup time.
    While for most cases the data returned from two different invocations
    are not changed, that means, we can cache the data to avoid trapping
    into kernel for the second time. To make sure the cache safe one
    assumption is desirable: the ioctl is stateless. This is not true for
    CPUID leaves in general (such as CPUID leaf 0xD, whose value depends
    on guest XCR0 and IA32_XSS) but it is true of KVM_GET_SUPPORTED_CPUID,
    which runs before there is a value for XCR0 and IA32_XSS.
    Signed-off-by: Chao Peng <chao.p.peng@linux.intel.com>
    Message-Id: <1465784487-23482-1-git-send-email-chao.p.peng@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Thomas Huth ]
  * [142c214] scsi-disk: Use (unsigned long) typecasts when using "%lu" format string.
    Some source code analyzers like cppcheck spill out a warning if
    the sign of the argument does not match the format string.
    Ticket: https://bugs.launchpad.net/qemu/+bug/1589564
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <1465805418-15906-1-git-send-email-thuth@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Greg Kurz ]
  * [f31e326] KVM: use KVM_CAP_MAX_VCPU_ID.
    As stated in linux/Documentation/virtual/kvm/api.txt:
    The maximum possible value for max_vcpu_id can be retrieved using the
    KVM_CAP_MAX_VCPU_ID of the KVM_CHECK_EXTENSION ioctl() at run-time.
    If the KVM_CAP_MAX_VCPU_ID does not exist, you should assume that
    max_vcpu_id is the same as the value returned from KVM_CAP_MAX_VCPUS.
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Message-Id: <146424974323.5666.5471538288045048119.stgit@bahia.huguette.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Richard W.M. Jones ]
  * [37146e7] vl.c: Add '-L help' which lists data dirs.
    QEMU compiles a list of data directories from various sources.  When
    consuming a QEMU binary it's useful to be able to get this list of
    data directories: a primary reason is so you can list what BIOSes or
    keymaps ship with this version of QEMU.  However without reproducing
    the method that QEMU uses internally, it's not possible to get the
    list of data directories.
    This commit adds a simple '-L help' option that just lists out the
    data directories as qemu calculates them:
    $ ./x86_64-softmmu/qemu-system-x86_64 -L help
    /home/rjones/d/qemu/pc-bios
    /usr/local/share/qemu
    $ ./x86_64-softmmu/qemu-system-x86_64 -L /tmp -L help
    /tmp
    /home/rjones/d/qemu/pc-bios
    /usr/local/share/qemu
    Signed-off-by: Richard W.M. Jones <rjones@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463416475-11728-2-git-send-email-rjones@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Eric Blake ]
  * [a0c3036] nbd: Use BDRV_REQ_FUA for better FUA where supported.
    Rather than always flushing ourselves, let the block layer
    forward the FUA on to the underlying device - where all
    underlying layers also understand FUA, we are now more
    efficient; and where any underlying layer doesn't understand
    it, now the block layer takes care of the full flush fallback
    on our behalf.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463006384-7734-2-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [2cb3474] nbd: More debug typo fixes, use correct formats.
    Clean up some debug message oddities missed earlier; this includes
    some typos, and recognizing that %d is not necessarily compatible
    with uint32_t. Also add a couple messages that I found useful
    while debugging things.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463006384-7734-3-git-send-email-eblake@redhat.com>
    [Do not use PRIx16, clang complains. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [63d5ef8] nbd: Quit server after any write error.
    We should never ignore failure from nbd_negotiate_send_rep(); if
    we are unable to write to the client, then it is not worth trying
    to continue the negotiation.  Fortunately, the problem is not
    too severe - chances are that the errors being ignored here (mainly
    inability to write the reply to the client) are indications of
    a closed connection or something similar, which will also affect
    the next attempt to interact with the client and eventually reach
    a point where the errors are detected to end the loop.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463006384-7734-4-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [29b6c3b] nbd: Improve server handling of bogus commands.
    We have a few bugs in how we handle invalid client commands:
    - A client can send an NBD_CMD_DISC where from + len overflows,
    convincing us to reply with an error and stay connected, even
    though the protocol requires us to silently disconnect. Fix by
    hoisting the special case sooner.
    - A client can send an NBD_CMD_WRITE where from + len overflows,
    where we reply to the client with EINVAL without consuming the
    payload; this will normally cause us to fail if the next thing
    read is not the right magic, but in rare cases, could cause us
    to interpret the data payload as valid commands and do things
    not requested by the client. Fix by adding a complete flag to
    track whether we are in sync or must disconnect.
    Furthermore, we have split the checks for bogus from/len across
    two functions, when it is easier to do it all at once.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463006384-7734-5-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [ab7c548] nbd: Reject unknown request flags.
    The NBD protocol says that clients should not send a command flag
    that has not been negotiated (whether by the client requesting an
    option during a handshake, or because we advertise support for the
    flag in response to NBD_OPT_EXPORT_NAME), and that servers should
    reject invalid flags with EINVAL.  We were silently ignoring the
    flags instead.  The client can't rely on our behavior, since it is
    their fault for passing the bad flag in the first place, but it's
    better to be robust up front than to possibly behave differently
    than the client was expecting with the attempted flag.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alex Bligh <alex@alex.org.uk>
    Message-Id: <1463006384-7734-6-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [98494e3] nbd: Group all Linux-specific ioctl code in one place.
    NBD ioctl()s are used to manage an NBD client session where
    initial handshake is done in userspace, but then the transmission
    phase is handed off to the kernel through a /dev/nbdX device.
    As such, all ioctls sent to the kernel on the /dev/nbdX fd belong
    in client.c; nbd_disconnect() was out-of-place in server.c.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463006384-7734-7-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f57e241] nbd: Clean up ioctl handling of qemu-nbd -c.
    The kernel ioctl() interface into NBD is limited to 'unsigned long';
    we MUST pass in input with that type (and not int or size_t, as
    there may be platform ABIs where the wrong types promote incorrectly
    through var-args).  Furthermore, on 32-bit platforms, the kernel
    is limited to a maximum export size of 2T (our BLKSIZE of 512 times
    a SIZE_BLOCKS constrained by 32 bit unsigned long).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463006384-7734-8-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f3c32fc] nbd: Detect servers that send unexpected error values.
    Add some debugging to flag servers that are not compliant to
    the NBD protocol.  This would have flagged the server bug
    fixed in commit c0301fcc.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alex Bligh <alex@alex.org.uk>
    Message-Id: <1463006384-7734-11-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [943cec8] nbd: Avoid magic number for NBD max name size.
    Declare a constant and use that when determining if an export
    name fits within the constraints we are willing to support.
    Note that upstream NBD recently documented that clients MUST
    support export names of 256 bytes (not including trailing NUL),
    and SHOULD support names up to 4096 bytes.  4096 is a bit big
    (we would lose benefits of stack-allocation of a name array),
    and we already have other limits in place (for example, qcow2
    snapshot names are clamped around 1024).  So for now, just
    stick to the required minimum, as that's easier to audit than
    a full-scale support for larger names.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463006384-7734-12-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Prasad J Pandit ]
  * [d3cdc49] scsi: esp: check buffer length before reading scsi command.
    The 53C9X Fast SCSI Controller(FSC) comes with an internal 16-byte
    FIFO buffer. It is used to handle command and data transfer.
    Routine get_cmd() in non-DMA mode, uses 'ti_size' to read scsi
    command into a buffer. Add check to validate command length against
    buffer size to avoid any overrun.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Message-Id: <1464717207-7549-1-git-send-email-ppandit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [d020aa5] scsi: esp: respect FIFO invariant after message phase.
    The FIFO contains two bytes; hence the write ptr should be two bytes ahead
    of the read pointer.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [7f0b6e1] scsi: esp: clean up handle_ti/esp_do_dma if s->do_cmd.
    Avoid duplicated code between esp_do_dma and handle_ti.  esp_do_dma
    has the same code that handle_ti contains after the call to esp_do_dma;
    but the code in handle_ti is never reached because it is in an "else if".
    Remove the else and also the pointless return.
    esp_do_dma also has a partially dead assignment of the to_device
    variable.  Sink it to the point where it's actually used.
    Finally, assert that the other caller of esp_do_dma (esp_transfer_data)
    only transfers data and not a command.  This is true because get_cmd
    cancels the old request synchronously before its caller handle_satn_stop
    sets do_cmd to 1.
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Prasad J Pandit ]
  * [926cde5] scsi: esp: make cmdbuf big enough for maximum CDB size.
    While doing DMA read into ESP command buffer 's->cmdbuf', it could
    write past the 's->cmdbuf' area, if it was transferring more than 16
    bytes.  Increase the command buffer size to 32, which is maximum when
    's->do_cmd' is set, and add a check on 'len' to avoid OOB access.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Andrew Jones ]
  * [0544edd] vl: smp_parse: cleanups.
    No functional changes; only some code movement and removal of
    dead code (impossible conditions). Also, max_cpus can be
    initialized to 1, like smp_cpus, because it's either set by the
    user or set to smp_cpus, when smp_cpus is set by the user, or
    set to 1, when nothing is set.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Message-Id: <1465580427-13596-2-git-send-email-drjones@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Thomas Huth ]
  * [a1aa130] hw/ppc/spapr: Silence deprecation message in qtest mode.
    When running "make check", there is currently always an error message
    saying "spapr-pci-vfio-host-bridge is deprecated". This happens because
    the QOM tests are instantiating all possible devices, and the error
    message is currently located in the instance_init() function of the
    device. Since it is legal for the tests to instantiate a device without
    using it, the error message should be silenced when we're running in
    test mode.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Peter Xu ]
  * [4a94b3a] pci: fix pci_requester_id()
    This fix SID verification failure when IOMMU IR is enabled with PCI
    bridges. Existing pci_requester_id() is more like getting BDF info
    only. Renaming it to pci_get_bdf(). Meanwhile, we provide the correct
    implementation to get requester ID. VT-d spec 5.1.1 is a good reference
    to go, though it talks only about interrupt delivery, the rule works
    exactly the same for non-interrupt cases.
    Currently, there are three use cases for pci_requester_id():
    - PCIX status bits: here we need BDF only, not requester ID. Replacing
      with pci_get_bdf().
    - PCIe Error injection and MSI delivery: for both these cases, we are
      looking for requester IDs. Here we should use the new impl.
    To avoid a PCI walk every time we send MSI message, one requester_id
    cache field is added to PCIDevice to cache the result when initialize
    PCI device.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Tetsuya Mukawa ]
  * [a655359] vhost-user: add ability to know vhost-user backend disconnection.
    Current QEMU cannot detect vhost-user backend disconnection. The
    patch adds ability to know it.
    To know disconnection, add watcher to detect G_IO_HUP event. When
    G_IO_HUP event is detected, the disconnected socket will be read
    to cause a CHR_EVENT_CLOSED.
    Signed-off-by: Tetsuya Mukawa <mukawa@igel.co.jp>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Marc-André Lureau ]
  * [aef8486] tests/vhost-user-bridge: add client mode.
    If -c is specified, vubr will try to connect to the socket instead of
    listening for connections.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [523b018] tests/vhost-user-bridge: workaround stale vring base.
    This patch is a similar solution to what Yuanhan Liu/Huawei Xie have
    suggested for DPDK. When vubr quits (killed or crashed), a restart of
    vubr would get stale vring base from QEMU. That would break the kernel
    virtio net completely, making it non-work any more, unless a driver
    reset is done.
    So, instead of getting the stale vring base from QEMU, Huawei suggested
    we could get a proper one from used->idx. This works because the queues
    packets are processed in order.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Tetsuya Mukawa ]
  * [7d9d17f] qemu-char: add qemu_chr_disconnect to close a fd accepted by listen fd.
    The patch introduces qemu_chr_disconnect(). The function is used for
    closing a fd accepted by listen fd. Though we already have qemu_chr_delete(),
    but it closes not only accepted fd but also listen fd. This new function
    is used when we still want to keep listen fd.
    Signed-off-by: Tetsuya Mukawa <mukawa@igel.co.jp>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Marc-André Lureau ]
  * [0d572af] vhost-user: disconnect on start failure.
    If the backend failed to start (for example feature negociation failed),
    do not exit, but disconnect the char device instead. Slightly more
    robust for reconnect case.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [72b65f9] vhost-net: do not crash if backend is not present.
    Do not crash when backend is not present while enabling the ring. A
    following patch will save the enabled state so it can be restored once
    the backend is started.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [a463215] vhost-net: save & restore vhost-user acked features.
    The initial vhost-user connection sets the features to be negotiated
    with the driver. Renegotiation isn't possible without device reset.
    To handle reconnection of vhost-user backend, ensure the same set of
    features are provided, and reuse already acked features.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [bfc6cf3] vhost-net: save & restore vring enable state.
    A driver may change the vring enable state at run time but vhost-user
    backend may not be present (a contrived example is when the backend is
    disconnected and the device is reconfigured after driver rebinding)
    Restore the vring state when the vhost-user backend is started, so it
    can process the ring.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [0ee2e9d] tests: append i386 tests.
    Do not overwrite x86-64 tests, re-enable vhost-user-test.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [4616e35] test: start vhost-user reconnect test.
    This is a simple reconnect test, that simply checks if vhost-user
    reconnection is possible and restore the state. A more complete test
    would actually manipulate and check the ring contents (such extended
    testing would benefit from the libvhost-user proposed in QEMU list to
    avoid duplication of ring manipulations)
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Victor Kaplansky <victork@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Cao jin ]
  * [97fe42f] pci core: assert ENOSPC when add capability.
    ENOSPC is programming error, assert it for debugging.
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [52ea63d] fix some coding style problems.
    It has:
    1. More newlines make the code block well separated.
    2. Add more comments for msi_init.
    3. Fix a indentation in vmxnet3.c.
    4. ioh3420 & xio3130_downstream: put PCI Express capability init function
       together, make it more readable.
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    cc: Dmitry Fleytman <dmitry@daynix.com>
    cc: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [2cbb1a6] msi_init: change return value to 0 on success.
    No caller use its return value as msi capability offset, also in order
    to make its return behaviour consistent with msix_init().
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Hannes Reinecke <hare@suse.de>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Acked-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Michael S. Tsirkin ]
  * [874a235] MAINTAINERS: add Marcel to PCI.
    Marcel is reviewing PCI patches anyway, things will
    be easier if people remember to Cc him.
    Cc: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Thomas Huth ]
  * [fcbf4a3] ppc / sparc: Add a tester for checking whether OpenBIOS runs successfully.
    Since the mac99 and g3beige PowerPC machines recently broke without
    being noticed, it would be good to have a tester for "make check"
    that detects such issues immediately. A simple way to test the firmware
    of these machines is to use the "-prom-env" parameter of QEMU. This
    parameter can be used to put some Forth code into the 'boot-command'
    firmware variable which then can signal success to the tester by
    writing a magic value to a known memory location. And since some of the
    Sparc machines are also using OpenBIOS, they are now tested with this
    prom-env-tester, too.
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    [dwg: Removed sparc64, because it trips a TCG bug on 32-bit hosts]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Jakub Horak ]
  * [35b5066] target-ppc: Bug in BookE wait instruction.
    Fixed bug in code generation for the PowerPC "wait" instruction. It
    doesn't make sense to store a non-initialized register.
    Signed-off-by: Jakub Horak <thement@ibawizard.net>
    [dwg: revised commit message]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Gavin Shan ]
  * [d917e88] vfio: Fix broken EEH
    vfio_eeh_container_op() is the backend that communicates with
    host kernel to support EEH functionality in QEMU. However, the
    functon should return the value from host kernel instead of 0
    unconditionally.
    dwg: Specifically the problem occurs for the handful of EEH
    sub-operations which can return a non-zero, non-error result.
    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Acked-by: Alex Williamson <alex.williamson@redhat.com>
    [dwg: clarification to commit message]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Richard Henderson ]
  * [2e11b15] target-ppc: Fix rlwimi, rlwinm, rlwnm.
    In 63ae0915f8ec, I arranged to use a 32-bit rotate, without
    considering the effect of a mask value that wraps around to
    the high bits of the word.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Igor Mammedov ]
  * [4134626] qdev: hotplug: Introduce HotplugHandler.pre_plug() callback
    pre_plug callback is to be called before device.realize() is executed.
    This would allow to check/set device's properties from HotplugHandler.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [f1020c2] cpu: Abstract CPU core type.
    Add an abstract CPU core type that could be used by machines that want
    to define and hotplug CPUs in core granularity.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
                   [Integer core property]
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    [dwg: changed property names to 'core-id' and 'nr-threads']
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [4a4b344] xics,xics_kvm: Handle CPU unplug correctly.
    XICS is setup for each CPU during initialization. Provide a routine
    to undo the same when CPU is unplugged. While here, move ss->cs management
    into xics from xics_kvm since there is nothing KVM specific in it.
    Also ensure xics reset doesn't set irq for CPUs that are already unplugged.
    This allows reboot of a VM that has undergone CPU hotplug and unplug
    to work correctly.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [aab9913] spapr_drc: Prevent detach racing against attach for CPU DR.
    If a CPU is hot removed while hotplug of the same is still in progress,
    the guest crashes. Prevent this by ensuring that detach is done only
    after attach has completed.
    The existing code already prevents such race for PCI hotplug. However
    given that CPU is a logical DR unlike PCI and starts with ISOLATED
    state, we need a logic that works for CPU too.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>
                   [Don't set awaiting_attach for PCI devices]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [3f97b53] qom: API to get instance_size of a type.
    Add an API object_type_get_size(const char *typename) that returns the
    instance_size of the give typename.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [3b54254] spapr: Abstract CPU core device and type specific core devices.
    Add sPAPR specific abastract CPU core device that is based on generic
    CPU core device. Use this as base type to create sPAPR CPU specific core
    devices.
    TODO:
    - Add core types for other remaining CPU types
    - Handle CPU model alias correctly
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [afd10a0] spapr: Move spapr_cpu_init() to spapr_cpu_core.c.
    Start consolidating CPU init related routines in spapr_cpu_core.c. As
    part of this, move spapr_cpu_init() and its dependencies from spapr.c
    to spapr_cpu_core.c
    No functionality change in this patch.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    [dwg: Rename TIMEBASE_FREQ to SPAPR_TIMEBASE_FREQ, since it's now in a
     public(ish) header]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [94a94e4] spapr: convert boot CPUs into CPU core devices.
    Introduce sPAPRMachineClass.dr_cpu_enabled to indicate support for
    CPU core hotplug. Initialize boot time CPUs as core deivces and prevent
    topologies that result in partially filled cores. Both of these are done
    only if CPU core hotplug is supported.
    Note: An unrelated change in the call to xics_system_init() is done
    in this patch as it makes sense to use the local variable smt introduced
    in this patch instead of kvmppc_smt_threads() call here.
    TODO: We derive sPAPR core type by looking at -cpu <model>. However
    we don't take care of "compat=" feature yet for boot time as well
    as hotplug CPUs.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [af81cf3] spapr: CPU hotplug support.
    Set up device tree entries for the hotplugged CPU core and use the
    exising RTAS event logging infrastructure to send CPU hotplug notification
    to the guest.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [6f4b5c3] spapr: CPU hot unplug support.
    Remove the CPU core device by removing the underlying CPU thread devices.
    Hot removal of CPU for sPAPR guests is achieved by sending the hot unplug
    notification to the guest. Release the vCPU object after CPU hot unplug so
    that vCPU fd can be parked and reused.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Igor Mammedov ]
  * [d463354] QMP: Add query-hotpluggable-cpus.
    It will allow mgmt to query present and hotpluggable CPU objects,
    it is required from a target platform that wishes to support command
    to implement and set MachineClass.query_hotpluggable_cpus callback,
    which will return a list of possible CPU objects with options that
    would be needed for hotplugging possible CPU objects.
    There are:
    'type': 'str' - QOM CPU object type for usage with device_add
    'vcpus-count': 'int' - number of logical VCPU threads per
                            CPU object (mgmt needs to know)
    and a set of optional fields that are to used for hotplugging a CPU
    objects and would allows mgmt tools to know what/where it could be
    hotplugged;
    [node],[socket],[core],[thread]
    For present CPUs there is a 'qom-path' field which would allow mgmt to
    inspect whatever object/abstraction the target platform considers
    as CPU object.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [d2d8d46] hmp: Add 'info hotpluggable-cpus' HMP command.
    This is the HMP equivalent for QMP query-hotpluggable-cpus.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [dwg: Fixed problem with printf formats on 32-bit host]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Igor Mammedov ]
  * [2474bfd] spapr: implement query-hotpluggable-cpus callback.
    It returns a list of present/possible to hotplug CPU
    objects with a list of properties to use with
    device_add.
    in spapr case returned list would looks like:
    -> { "execute": "query-hotpluggable-cpus" }
    <- {"return": [
         { "props": { "core": 8 }, "type": "POWER8-spapr-cpu-core",
           "vcpus-count": 2 },
         { "props": { "core": 0 }, "type": "POWER8-spapr-cpu-core",
           "vcpus-count": 2,
           "qom-path": "/machine/unattached/device[0]"}
       ]}'
    TODO:
      add 'node' property for core <-> numa node mapping
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Peter Maydell ]
  * [4d88513] migration: Don't use *_to_cpup() and cpu_to_*w()
    The *_to_cpup() and cpu_to_*w() functions just compose a pointer
    dereference with a byteswap. Instead use ld*_p() and st*_p(),
    which handle potential pointer misalignment and avoid the need
    to cast the pointer.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Amit Shah <amit.shah@redhat.com>
    Message-Id: <1465574962-2710-1-git-send-email-peter.maydell@linaro.org>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Dr. David Alan Gilbert ]
  * [023ad1a] migration: Trace improvements.
    A couple of improvements to tracing that have come out of helping
    people with migration problems:
      * vmstate_n_elems trace the count/name - for when you have problems
        getting array counts right
      * vmstate_subsection_load_bad - add the idstr, for when you receive a
        subsection you weren't expecting.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <1465896986-16132-1-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Denis V. Lunev ]
  * [6dcf666] migration: fix inability to save VM after snapshot.
    The following sequence of operations fails:
        virsh start vm
        virsh snapshot-create vm
        virshh save vm --file file
    with the following error
        error: Failed to save domain vm to file
        error: internal error: unable to execute QEMU command 'migrate':
        There's a migration process in progress
    The problem is that qemu_savevm_state() calls migrate_init() which sets
    migration state to MIGRATION_STATUS_SETUP and never cleaned it up.
    This patch do the job.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    CC: Juan Quintela <quintela@redhat.com>
    CC: Amit Shah <amit.shah@redhat.com>
    Message-Id: <1466003203-26263-1-git-send-email-den@openvz.org>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Liang Li ]
  * [73a8912] migration: Fix multi-thread compression bug.
    Recently, a bug related to multiple thread compression feature for
    live migration is reported. The destination side will be blocked
    during live migration if there are heavy workload in host and
    memory intensive workload in guest, this is most likely to happen
    when there is one decompression thread.
    Some parts of the decompression code are incorrect:
    1. The main thread receives data from source side will enter a busy
    loop to wait for a free decompression thread.
    2. A lock is needed to protect the decomp_param[idx]->start, because
    it is checked in the main thread and is updated in the decompression
    thread.
    Fix these two issues by following the code pattern for compression.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Reported-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Tested-by: Daniel P. Berrange <berrange@redhat.com>
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Message-Id: <1462433579-13691-2-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [5533b2e] migration: Fix a potential issue.
    At the end of live migration and before vm_start() on the destination
    side, we should make sure all the decompression tasks are finished, if
    this can not be guaranteed, the VM may get the incorrect memory data,
    or the updated memory may be overwritten by the decompression thread.
    Add the code to fix this potential issue.
    Suggested-by: David Alan Gilbert <dgilbert@redhat.com>
    Suggested-by: Juan Quintela <quintela@redhat.com>
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Message-Id: <1462433579-13691-3-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [e7bb92e] migration: remove useless code
    page_buffer is set twice repeatedly, remove the previous set.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1462433579-13691-4-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [b3be289] qemu-file: Fix qemu_put_compression_data flaw.
    Current qemu_put_compression_data can only work with no writable
    QEMUFile, and can't work with the writable QEMUFile. But it does
    not provide any measure to prevent users from using it with a
    writable QEMUFile.
    We should fix this flaw to make it works with writable QEMUFile.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Suggested-by: Juan Quintela <quintela@redhat.com>
    Message-Id: <1462433579-13691-5-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [fc50438] migration: refine ram_save_compressed_page.
    Use qemu_put_compression_data to do the compression directly
    instead of using do_compress_ram_page, avoid some data copy.
    very small improvement, at the same time, add code to check
    if the compression is successful.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Message-Id: <1462433579-13691-6-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [90e56fb] migration: protect the quit flag by lock
    quit_comp_thread and quit_decomp_thread are accessed by several
    thread, it's better to protect them with locks. We use a per
    thread flag to replace the global one, and the new flag is protected
    by a lock.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Message-Id: <1462433579-13691-7-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [a7a9a88] migration: refine the compression code.
    The current code for multi-thread compression is not clear,
    especially in the aspect of using lock. Refine the code
    to make it clear.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Message-Id: <1462433579-13691-8-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [33d151f] migration: refine the decompression code.
    The current code for multi-thread decompression is not clear,
    especially in the aspect of using lock. Refine the code
    to make it clear.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Message-Id: <1462433579-13691-9-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [0d9f9a5] migration: code clean up.
    Use 'QemuMutex comp_done_lock' and 'QemuCond comp_done_cond' instead
    of 'QemuMutex *comp_done_lock' and 'QemuCond comp_done_cond'. To keep
    consistent with 'QemuMutex decomp_done_lock' and
    'QemuCond comp_done_cond'.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Message-Id: <1462433579-13691-10-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Amit Shah ]
  * [0794d88] vmstate-static-checker: fix size mismatch detection in unused fields.
    If a field changed from something to unused, the checker wasn't flagging
    if the field size mismatched.  This was noticed in:
    http://thread.gmane.org/gmane.comp.emulators.qemu/419802
    where the 4->1 size change along with field name change to 'unused'
    wasn't being flagged.  Fix this.
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
    Message-Id: <d7ec03a9b2edfa0616764887a51ba8f64fdd3f68.1466165736.git.amit.shah@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Eduardo Habkost ]
  * [f9a8b55] qdev: Use GList for global properties.
    If the same GlobalProperty struct is registered twice, the list
    entry gets corrupted, making tqe_next points to itself, and
    qdev_prop_set_globals() gets stuck in a loop. The bug can be
    easily reproduced by running:
      $ qemu-system-x86_64 -rtc-td-hack -rtc-td-hack
    Change global_props to use GList instead of queue.h, making the
    code simpler and able to deal with properties being registered
    twice.
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Chao Peng ]
  * [a663fbd] vnc: Wrap vnc initialization code with CONFIG_VNC
    commit f8c75b2486 (vnc: Initialization stubs) removed CONFIG_VNC in vl.c
    code. However qemu_find_opts("vnc") is NULL when vnc is configured out.
    Crash will happen in qemu_opts_foreach() before stub vnc_init_func() is
    called. This patch add it back.
    Cc: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Chao Peng <chao.p.peng@linux.intel.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Peter Maydell ]
  * [d121fcd] nbd/client.c: Correct trace format string.
    The trace format string in nbd_send_request uses PRIu16 for
    request->type, but request->type is a uint32_t. This provokes
    compiler warnings on the OSX clang. Use PRIu32 instead.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1466167331-17063-1-git-send-email-peter.maydell@linaro.org
  * [04716bc] migration: Define VMSTATE_UINT64_2DARRAY.
    Define a VMSTATE_UINT64_2DARRAY macro, to go with the ones we
    already have for other type sizes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-2-git-send-email-peter.maydell@linaro.org
  * [b355438] bitops.h: Implement half-shuffle and half-unshuffle ops.
    A half-shuffle operation takes a word with zeros in the high half:
     0000 0000 0000 0000 ABCD EFGH IJKL MNOP
    and spreads the bits out so they are in every other bit of the word:
     0A0B 0C0D 0E0F 0G0H 0I0J 0K0L 0M0N 0O0P
    A half-unshuffle performs the reverse operation.
    Provide functions in bitops.h which implement these operations
    for 32-bit and 64-bit inputs, and add tests for them.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-3-git-send-email-peter.maydell@linaro.org
  * [7120587] target-arm: Define new arm_is_el3_or_mon() function.
    The GICv3 system registers need to know if the CPU is AArch64
    in EL3 or AArch32 in Monitor mode. This happens to be the first
    part of the check for arm_is_secure(), so factor it out into a
    new arm_is_el3_or_mon() function that the GIC can also use.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-4-git-send-email-peter.maydell@linaro.org
  * [bd7d00f] target-arm: Provide hook to tell GICv3 about changes of security state.
    The GICv3 CPU interface needs to know when the CPU it is attached
    to makes an exception level or mode transition that changes the
    security state, because whether it is asserting IRQ or FIQ can change
    depending on these things. Provide a mechanism for letting the GICv3
    device register a hook to be called on such changes.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-5-git-send-email-peter.maydell@linaro.org

  [ Pavel Fedin ]
  * [15a21fe] target-arm: Add mp-affinity property for ARM CPU class.
    This allows to override default affinity IDs on a per-machine basis, and
    possibility to retrieve IDs will be used by vGICv3 live migration code.
    Signed-off-by: Pavel Fedin <p.fedin@samsung.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-6-git-send-email-peter.maydell@linaro.org
  * [07e2034] hw/intc/arm_gicv3: Add state information.
    Add state information to GICv3 object structure and implement
    arm_gicv3_common_reset().
    This commit includes accessor functions for the fields which are
    stored as bitmaps in uint32_t arrays.
    Signed-off-by: Pavel Fedin <p.fedin@samsung.com>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465915112-29272-7-git-send-email-peter.maydell@linaro.org
    [PMM: significantly overhauled:
     * Add missing qom/cpu.h include
     * Remove legacy-only state fields (we can add them later if/when we add
       legacy emulation)
     * Use arrays of uint32_t to store the various distributor bitmaps,
       and provide accessor functions for the various set/test/etc operations
     * Add various missing register offset #defines
     * Accessor macros which combine distributor and redistributor behaviour
       removed
     * Fields in state structures renamed to match architectural register names
     * Corrected the reset value for GICR_IENABLER0 since we don't support
       legacy mode
     * Added ARM_LINUX_BOOT_IF interface for "we are directly booting a kernel in
       non-secure" so that we can fake up the firmware-mandated reconfiguration
       only when we need it
    ]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>

  [ Peter Maydell ]
  * [3faf2b0] hw/intc/arm_gicv3: Move irq lines into GICv3CPUState structure.
    Move the GICv3 parent_irq and parent_fiq pointers into the
    GICv3CPUState structure rather than giving them their own array.
    This will make it easy to assert the IRQ and FIQ lines for a
    particular CPU interface without having to know or calculate
    the CPU index for the GICv3CPUState we are working on.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-8-git-send-email-peter.maydell@linaro.org

  [ Pavel Fedin ]
  * [757caee] hw/intc/arm_gicv3: Add vmstate descriptors.
    Add state structure descriptors for the GICv3 state. We mark
    the KVM GICv3 device as having a migration blocker until the
    code to save and restore the state in the kernel is implemented.
    Signed-off-by: Pavel Fedin <p.fedin@samsung.com>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465915112-29272-9-git-send-email-peter.maydell@linaro.org
    [PMM: Adjust to renamed struct fields; switched to using uint32_t
     array backed bitmaps; add migration blocker setting]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Shlomo Pongratz ]
  * [5699267] hw/intc/arm_gicv3: ARM GICv3 device framework.
    This patch includes the device class itself, some ID register
    value functions which will be needed by both distributor
    and redistributor, and some skeleton functions for handling
    interrupts coming in and going out, which will be filled in
    in a subsequent patch.
    Signed-off-by: Shlomo Pongratz <shlomo.pongratz@huawei.com>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465915112-29272-10-git-send-email-peter.maydell@linaro.org
    [PMM: pulled this patch earlier in the sequence, and left
     some code out of it for a later patch]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>

  [ Peter Maydell ]
  * [ce187c3] hw/intc/arm_gicv3: Implement functions to identify next pending irq.
    Implement the GICv3 logic to recalculate the highest priority pending
    interrupt for each CPU after some part of the GIC state has changed.
    We avoid unnecessary full recalculation where possible.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-11-git-send-email-peter.maydell@linaro.org

  [ Shlomo Pongratz ]
  * [e52af51] hw/intc/arm_gicv3: Implement GICv3 distributor registers.
    Implement the distributor registers of a GICv3.
    Signed-off-by: Shlomo Pongratz <shlomo.pongratz@huawei.com>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465915112-29272-12-git-send-email-peter.maydell@linaro.org
    [PMM: significantly overhauled/rewritten:
     * use the new bitmap data structures
     * restructure register read/write to handle different width accesses
       natively, since almost all registers are 32-bit only, rather
       than implementing everything as byte accesses
     * implemented security extension support
    ]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [cec93a9] hw/intc/arm_gicv3: Implement GICv3 redistributor registers.
    Implement the redistributor registers of a GICv3.
    Signed-off-by: Shlomo Pongratz <shlomo.pongratz@huawei.com>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1465915112-29272-13-git-send-email-peter.maydell@linaro.org
    [PMM: significantly overhauled/rewritten:
     * use the new data structures
     * restructure register read/write to handle different width accesses
       natively, since almost all registers are 32-bit only, rather
       than implementing everything as byte accesses
     * implemented security extension support
    ]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [287c181] hw/intc/arm_gicv3: Wire up distributor and redistributor MMIO regions.
    Wire up the MMIO functions exposed by the distributor and the
    redistributor into MMIO regions exposed by the GICv3 device.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-14-git-send-email-peter.maydell@linaro.org
  * [c84428b] hw/intc/arm_gicv3: Implement gicv3_set_irq()
    Implement the code which updates the GIC state when an interrupt
    input into the GIC is asserted.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-15-git-send-email-peter.maydell@linaro.org
  * [359fbe6] hw/intc/arm_gicv3: Implement GICv3 CPU interface registers.
    Implement the CPU interface registers for the GICv3; these are
    CPU system registers, not MMIO registers.
    This commit implements all the registers which are simple
    accessors for GIC state, but not those which act as interfaces
    for acknowledging, dismissing or generating interrupts. (Those
    will be added in a later commit.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-16-git-send-email-peter.maydell@linaro.org
  * [f7b9358] hw/intc/arm_gicv3: Implement gicv3_cpuif_update()
    Implement the gicv3_cpuif_update() function which deals with correctly
    asserting IRQ and FIQ based on the current running priority of the CPU,
    the priority of the highest priority pending interrupt and the CPU's
    current exception level and security state.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-17-git-send-email-peter.maydell@linaro.org
  * [b1a0eb7] hw/intc/arm_gicv3: Implement CPU i/f SGI generation registers.
    Implement the registers in the GICv3 CPU interface which generate
    new SGI interrupts.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-18-git-send-email-peter.maydell@linaro.org
  * [227a865] hw/intc/arm_gicv3: Add IRQ handling CPU interface registers.
    Add the CPU interface registers which deal with acknowledging
    and dismissing interrupts.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-19-git-send-email-peter.maydell@linaro.org
  * [5de8229] target-arm/machine.c: Allow user to request GICv3 emulation.
    Now we have an emulated GICv3, remove the restriction in
    gicv3_class_name() so that the user can request a GICv3 with
    -machine gic-version=3 even when not using KVM.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-20-git-send-email-peter.maydell@linaro.org
  * [3b1a222] target-arm/monitor.c: Advertise emulated GICv3 in capabilities.
    Now we have an emulated GICv3 we should advertise it via the
    capabilities in the monitor protocol.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Tested-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1465915112-29272-21-git-send-email-peter.maydell@linaro.org

  [ Andrew Jeffery ]
  * [1d3e65a] hw/timer: Add value matching support to aspeed_timer.
    Value matching allows Linux to boot with CONFIG_NO_HZ_IDLE=y on the
    palmetto-bmc machine. Two match registers are provided for each timer.
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Message-id: 1465974248-20434-1-git-send-email-andrew@aj.id.au
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Shannon Zhao ]
  * [f06765a] ACPI: ARM: Present GIC version in MADT table.
    In ACPI 5.1 Errata, it adds GIC version in GIC distributor structure.
    This is useful for guest kernel to identify which version GIC hardware
    is. Update GIC distributor structure and present GIC version in MADT
    table.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1465960955-17388-1-git-send-email-zhaoshenglong@huawei.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Michael Strosaker ]
  * [3e68445] seccomp: Add support for ppc/ppc64.
    Support for ppc/ppc64 is official in libseccomp 2.3.0, so modify the
    configuration script to allow qemuu to enable seccomp for those platforms.
    Signed-off-by: Michael Strosaker <strosake@linux.vnet.ibm.com>

  [ Peter Maydell ]
  * [b1e3493] hw/intc/arm_gicv3: Fix compilation with simple trace backend.
    Fix missing includes of qemu/log.h, which broke compilation with the
    simple trace backend (the default backend pulls in log.h implicitly
    via trace.h).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Tested-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-id: 1466416634-9798-1-git-send-email-peter.maydell@linaro.org

  [ Stefan Hajnoczi ]
  * [8ac9e20] libqos: use virtio_ids.h for device ID definitions.
    Avoid redefining device IDs.  Use the standard Linux headers that are
    already in the source tree.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-2-git-send-email-stefanha@redhat.com
  * [7ad1e70] libqos: drop duplicated PCI vendor ID definition.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-3-git-send-email-stefanha@redhat.com
  * [1373a4c] libqos: drop duplicated virtio_config.h definitions.
    Note that VIRTIO_F_ANY_LAYOUT and VIRTIO_F_NOTIFY_ON_EMPTY are bit
    numbers in virtio_config.h but bit masks in qtest virtio.h.  Therefore
    it's necessary to change users from X to (1u << X).
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-4-git-send-email-stefanha@redhat.com
  * [ee3b850] libqos: drop duplicated virtio_ring.h bit definitions.
    Note that virtio_ring.h defines feature bits using their bit number:
      #define VIRTIO_RING_F_INDIRECT_DESC     28
    On the other hand libqos virtio.h uses the bit mask:
      #define QVIRTIO_F_RING_INDIRECT_DESC    0x10000000
    The patch makes the necessary adjustments.
    I have used "1u << BITMASK" instead of "1ULL << BITMASK" because the
    64-bit feature fields are not implemented in libqos virtio.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-5-git-send-email-stefanha@redhat.com
  * [780b11a] libqos: drop duplicated virtio_vring.h structs.
    The descriptor element, used, and avail vring structs are defined in
    virtio_ring.h.  There is no need to duplicate them in libqos virtio.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-6-git-send-email-stefanha@redhat.com
  * [4565a3e] libqos: drop duplicated virtio_blk.h definitions.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-7-git-send-email-stefanha@redhat.com
  * [74f079a] libqos: drop duplicated virtio_scsi.h definitions.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-8-git-send-email-stefanha@redhat.com
  * [c75f4c0] libqos: drop duplicated virtio_pci.h definitions.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1462798061-30382-9-git-send-email-stefanha@redhat.com
  * [f1d3b99] libqos: add qvirtqueue_cleanup()
    qvirtqueue_setup() allocates the vring and virtqueue state.  So far
    there has been no function to free it.  Callers have been using
    guest_free() for the vring but forgot to free the QVirtQueue state.
    This patch solves the memory leak by introducing qvirtqueue_cleanup().
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Denis V. Lunev ]
  * [3a36e47] block: fixed BdrvTrackedRequest filling in bdrv_co_discard.
    The request area is specified in bytes, not in sectors.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy<vsementsov@virtuozzo.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1466093381-6120-2-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [968d8b0] block: fix race in bdrv_co_discard with drive-mirror.
    Actually we must set dirty bitmap dirty after we have written all our
    zeroes for correct processing in drive mirror code. In the other case
    we can face not zeroes in this area in mirror_iteration.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy<vsementsov@virtuozzo.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1466093381-6120-3-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [ec050f7] block: process before_write_notifiers in bdrv_co_discard.
    This is mandatory for correct backup creation. In the other case the
    content under this area would be lost.
    Dirty bits are set exactly like in bdrv_aligned_pwritev, i.e. they are set
    even if notifier has returned a error.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy<vsementsov@virtuozzo.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1466093381-6120-4-git-send-email-den@openvz.org
    CC: Fam Zheng <famz@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Stefan Hajnoczi ]
  * [17bd51f] blockjob: move iostatus reset out of block_job_enter()
    The QMP block-job-resume command and cancellation may want to reset the
    job's iostatus.  The next patches add a user who does not want to reset
    iostatus so move it up to block_job_enter() callers.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1466096189-6477-2-git-send-email-stefanha@redhat.com
  * [a7f3b7f] blockjob: rename block_job_is_paused()
    The block_job_is_paused() function name is not great because callers
    only use it to determine whether pausing has been requested.  Rename it
    to highlight those semantics and remove it from the public header file
    as there are no external callers.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466096189-6477-3-git-send-email-stefanha@redhat.com
  * [fc9c0a9] blockjob: add pause points.
    Block jobs are coroutines that usually perform I/O but sometimes also
    sleep or yield.  Currently only sleeping or yielded block jobs can be
    paused.  This means jobs that do not sleep or yield (using
    block_job_yield()) are unaffected by block_job_pause().
    Add block_job_pause_point() so that block jobs can mark quiescent points
    that are suitable for pausing.  This solves the problem that it can take
    a block job a long time to pause if it is performing a long series of
    I/O operations.
    Transitioning to paused state involves a .pause()/.resume() callback.
    These callbacks are used to ensure that I/O and event loop activity has
    ceased while the job is at a pause point.
    Note that this patch introduces a stricter pause state than previously.
    The job->busy flag was incorrectly documented as a quiescent state
    without I/O pending.  This is violated by any job that has I/O pending
    across sleep or block_job_yield(), like the mirror block job.
    [Add missing block_job_should_pause() check to avoid deadlock after
    job->driver->pause() in block_job_pause_point().
    --Stefan]
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466096189-6477-4-git-send-email-stefanha@redhat.com
  * [9f6bc64] blockjob: add block_job_get_aio_context()
    Add a helper function to document why block jobs sometimes run in the
    QEMU main loop and to avoid code duplication in a following patch.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466096189-6477-5-git-send-email-stefanha@redhat.com
  * [e8a095d] block: use safe iteration over AioContext notifiers.
    It's possible that an AioContext notifier user was close to finishing
    when .detach_aio_context() or .attached_aio_context() is called.  In
    that case they may call bdrv_remove_aio_context_notifier() during the
    callback.
    Use safe iteration to avoid crashing when the notifier list is modified
    during iteration.  We must not only handle the case where the current
    aio notifier is removed during a callback but also the one where any
    other aio notifier is removed.
    The next patch adds an AioContext notifier for block jobs and they
    really could be terminating just as .detach_aio_context() is invoked.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466096189-6477-6-git-send-email-stefanha@redhat.com
  * [463e0be] blockjob: add AioContext attached callback.
    Block jobs that use additional BDSes or event loop resources need a
    callback to get their affairs in order when the AioContext is switched.
    Simple block jobs don't need an attach callback, they automatically work
    thanks to the generic attach/detach notifiers that this patch adds.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466096189-6477-7-git-send-email-stefanha@redhat.com
  * [565ac01] mirror: follow AioContext change gracefully.
    Add block_job_pause_point() calls to mark quiescent points and make sure
    to complete in-flight requests when switching AioContexts.
    This patch solves undefined behavior in the mirror block job when the
    BDS AioContext is changed by dataplane.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466096189-6477-8-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [5ab4b69] backup: follow AioContext change gracefully.
    Move s->target to the new AioContext when there is an AioContext change.
    The backup_run() coroutine does not use asynchronous I/O so there is no
    need to wait for in-flight requests in a BlockJobDriver->pause()
    callback.
    Guest writes are intercepted by the backup job.  Treat them as guest
    activity and do it even while the job is paused.  This is necessary
    since the only alternative would be to fail a job that experienced guest
    writes during pause once the job is resumed.  In practice the guest
    writes don't interfere with AioContext switching since bdrv_drain() is
    used by bdrv_set_aio_context().
    Loops already contain pause points because of block_job_sleep_ns() calls
    in the yield_and_check() helper function.  It is necessary to convert a
    raw qemu_coroutine_yield() to block_job_yield() so the
    MIRROR_SYNC_MODE_NONE case can pause.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466096189-6477-9-git-send-email-stefanha@redhat.com

  [ Lluís Vilanova ]
  * [7c25504] exec: [tcg] Track which vCPU is performing translation and execution.
    Information is tracked inside the TCGContext structure, and later used
    by tracing events with the 'tcg' and 'vcpu' properties.
    The 'cpu' field is used to check tracing of translation-time
    events ("*_trans"). The 'tcg_env' field is used to pass it to
    execution-time events ("*_exec").
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Message-id: 146549350162.18437.3033661139638458143.stgit@fimbulvetr.bsc.es
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Markus Armbruster ]
  * [da00252] vl: Error messages need to go to stderr, fix some.
    We print a few fatal error messages to stdout instead of stderr.
    Reproducer:
        $ qemu-system-x86_64 -g 1024x768
        Option g not supported for this target
        $ qemu-system-x86_64 -g 1024x768 >/dev/null
    Fix by printing them with error_report().  This also improves the messages.
    The above one becomes
        qemu-system-x86_64: -g 1024x768: Option not supported for this target
    Reported-by: Tobi {github.com/tobimensch}
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1464683498-28779-1-git-send-email-armbru@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>

  [ Eduardo Habkost ]
  * [621ff94] error: Remove NULL checks on error_propagate() calls
    error_propagate() already ignores local_err==NULL, so there's no
    need to check it before calling.
    Coccinelle patch used to perform the changes added to
    scripts/coccinelle/error_propagate_null.cocci.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <1465855078-19435-2-git-send-email-ehabkost@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [6b62d96] error: Remove unnecessary local_err variables.
    This patch simplifies code that uses a local_err variable just to
    immediately use it for an error_propagate() call.
    Coccinelle patch used to perform the changes added to
    scripts/coccinelle/remove_local_err.cocci.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <1465855078-19435-3-git-send-email-ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    [Blank line in s390-virtio-ccw.c restored]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [9be3859] coccinelle: Remove unnecessary variables for function return value.
    Use Coccinelle script to replace 'ret = E; return ret' with
    'return E'. The script will do the substitution only when the
    function return type and variable type are the same.
    Manual fixups:
    * audio/audio.c: coding style of "read (...)" and "write (...)"
    * block/qcow2-cluster.c: wrap line to make it shorter
    * block/qcow2-refcount.c: change indentation of wrapped line
    * target-tricore/op_helper.c: fix coding style of
      "remainder|quotient"
    * target-mips/dsp_helper.c: reverted changes because I don't
      want to argue about checkpatch.pl
    * ui/qemu-pixman.c: fix line indentation
    * block/rbd.c: restore blank line between declarations and
      statements
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <1465855078-19435-4-git-send-email-ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    [Unused Coccinelle rule name dropped along with a redundant comment;
    whitespace touched up in block/qcow2-cluster.c; stale commit message
    paragraph deleted]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Markus Armbruster ]
  * [2ec62fa] log: Plug memory leak on multiple -dfilter
    -dfilter overwrites any previous filter.  The overwritten filter is
    leaked.  Leaks since the beginning (commit 3514552, v2.6.0).  Free it
    properly.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1466011636-6112-2-git-send-email-armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [bd6fee9] log: Fix qemu_set_dfilter_ranges() error reporting
    g_error() is not an acceptable way to report errors to the user:
        $ qemu-system-x86_64 -dfilter 1000+0
        ** (process:17187): ERROR **: Failed to parse range in: 1000+0
        Trace/breakpoint trap (core dumped)
    g_assert() isn't, either:
        $ qemu-system-x86_64 -dfilter 1000x+64
        **
        ERROR:/work/armbru/qemu/util/log.c:180:qemu_set_dfilter_ranges: assertion failed: (e == range_op)
        Aborted (core dumped)
    Convert qemu_set_dfilter_ranges() to Error.  Rework its deeply nested
    control flow.  Touch up the error messages.  Call it with
    &error_fatal.
    This also permits testing without a subprocess, so do that.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1466011636-6112-3-git-send-email-armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [daa76aa] log: Fix qemu_set_log_filename() error handling.
    When qemu_set_log_filename() detects an invalid file name, it reports
    an error, closes the log file (if any), and starts logging to stderr
    (unless daemonized or nothing is being logged).
    This is wrong.  Asking for an invalid log file on the command line
    should be fatal.  Asking for one in the monitor should fail without
    messing up an existing logfile.
    Fix by converting qemu_set_log_filename() to Error.  Pass it
    &error_fatal, except for hmp_logfile report errors.
    This also permits testing without a subprocess, so do that.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1466011636-6112-4-git-send-email-armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>

  [ xiaoqiang zhao ]
  * [a18eac5] hw/timer: QOM'ify lm32_timer
    * split the old SysBus init function into an instance_init
      and a Device realize function
    * use DeviceClass::realize instead of SysBusDeviceClass::init
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Acked-by: Michael Walle <michael@walle.cc>
    Tested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Michael Walle <michael@walle.cc>
  * [596ca93] hw/timer: QOM'ify milkymist_sysctl
    * split the old SysBus init function into an instance_init
      and a Device realize function
    * use DeviceClass::realize instead of SysBusDeviceClass::init
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Acked-by: Michael Walle <michael@walle.cc>
    Tested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Michael Walle <michael@walle.cc>
  * [cf79c64] hw/display: QOM'ify milkymist-tmu2.c
    * Drop the old SysBus init function and use instance_init
    * Move tmu2_glx_init into realize stage
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Acked-by: Michael Walle <michael@walle.cc>
    Tested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Michael Walle <michael@walle.cc>
  * [165b244] hw/display: QOM'ify milkymist-vgafb.c
    * Drop the old SysBus init function and use instance_init
    * Move graphic_console_init into realize stage
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Acked-by: Michael Walle <michael@walle.cc>
    Tested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Michael Walle <michael@walle.cc>
  * [5e502d3] hw/intc: QOM'ify lm32_pic.c.
    Drop the old SysBus init function and use instance_init
    Signed-off-by: xiaoqiang zhao <zxq_yx_007@163.com>
    Acked-by: Michael Walle <michael@walle.cc>
    Tested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Michael Walle <michael@walle.cc>

  [ Michael Walle ]
  * [6dbbe24] milkymist: update specification URLs.
    The old milkymist.org domain just forwards to mm-labs.hk nowadays. I've
    created a mirror of the documents.
    Signed-off-by: Michael Walle <michael@walle.cc>

  [ Lluís Vilanova ]
  * [dcdaadb] trace: [all] Add "guest_mem_before" event.
    The event is described in "trace-events". Note that the "MO_AMASK" flag
    is not traced, since it does not seem to affect the visible semantics of
    instructions.
    [s/inline inline/inline/ to fix clang build.
    --Stefan]
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 146549350711.18437.726780393247474362.stgit@fimbulvetr.bsc.es
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Daniel P. Berrange ]
  * [1412cf5] trace: add build framework for merging trace-events files.
    Switch make rules over to use trace-events-all as the
    master trace events input file. Add rule that will
    construct trace-events-all from $(trace-events-y).
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-2-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [492bb2d] trace: split out trace events for util/ directory.
    Move all trace-events for files in the util/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-3-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [8451f2f] trace: split out trace events for crypto/ directory.
    Move all trace-events for files in the crypto/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-4-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [892bd32] trace: split out trace events for io/ directory.
    Move all trace-events for files in the io/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-5-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [521d47c] trace: split out trace events for migration/ directory.
    Move all trace-events for files in the migration/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-6-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [b54ca48] trace: split out trace events for block/ directory.
    Move all trace-events for files in the block/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-7-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [92d3265] trace: split out trace events for hw/block/ directory.
    Move all trace-events for files in the hw/block/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-8-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [732d831] trace: split out trace events for hw/char/ directory.
    Move all trace-events for files in the hw/char/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-9-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [aebd4d1] trace: split out trace events for hw/intc/ directory.
    Move all trace-events for files in the hw/intc/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-10-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [cd8c2fe] trace: split out trace events for hw/net/ directory.
    Move all trace-events for files in the hw/net/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-11-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [270ab88] trace: split out trace events for hw/virtio/ directory.
    Move all trace-events for files in the hw/virtio/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-12-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [92fe6af] trace: split out trace events for hw/audio/ directory.
    Move all trace-events for files in the hw/audio/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-13-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [6b5bacf] trace: split out trace events for hw/misc/ directory.
    Move all trace-events for files in the hw/misc/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-14-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [7da2981] trace: split out trace events for hw/usb/ directory.
    Move all trace-events for files in the hw/usb/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-15-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [de4291c] trace: split out trace events for hw/scsi/ directory.
    Move all trace-events for files in the hw/scsi/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-16-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [ddc63e4] trace: split out trace events for hw/nvram/ directory.
    Move all trace-events for files in the hw/nvram/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-17-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [14750ef] trace: split out trace events for hw/display/ directory.
    Move all trace-events for files in the hw/display/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-18-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [d1d5119] trace: split out trace events for hw/input/ directory.
    Move all trace-events for files in the hw/input/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-19-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [c3e203f] trace: split out trace events for hw/timer/ directory.
    Move all trace-events for files in the hw/timer/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-20-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [8101345] trace: split out trace events for hw/dma/ directory.
    Move all trace-events for files in the hw/dma/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-21-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [f0b9e35] trace: split out trace events for hw/sparc/ directory.
    Move all trace-events for files in the hw/sparc/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-22-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1374aec] trace: split out trace events for hw/sd/ directory.
    Move all trace-events for files in the hw/sd/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-23-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [2b785e3] trace: split out trace events for hw/isa/ directory.
    Move all trace-events for files in the hw/isa/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-24-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [5eb76e4] trace: split out trace events for hw/i386/ directory.
    Move all trace-events for files in the hw/i386/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-25-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [d018a2e] trace: split out trace events for hw/9pfs/ directory.
    Move all trace-events for files in the hw/9pfs/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-26-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [3054fba] trace: split out trace events for hw/ppc/ directory.
    Move all trace-events for files in the hw/ppc/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-id: 1466066426-16657-27-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [fec2813] trace: split out trace events for hw/pci/ directory.
    Move all trace-events for files in the hw/pci/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-28-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [80aa71e] trace: split out trace events for hw/s390x/ directory.
    Move all trace-events for files in the hw/s390x/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Message-id: 1466066426-16657-29-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1cf6ebc] trace: split out trace events for hw/vfio/ directory.
    Move all trace-events for files in the hw/vfio/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-30-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [65b5bd3] trace: split out trace events for hw/acpi/ directory.
    Move all trace-events for files in the hw/acpi/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-31-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [0b8276d] trace: split out trace events for hw/arm/ directory.
    Move all trace-events for files in the hw/arm/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-32-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [4f92ce1] trace: split out trace events for hw/alpha/ directory.
    Move all trace-events for files in the hw/alpha/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-33-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [357ac7f] trace: split out trace events for ui/ directory.
    Move all trace-events for files in the ui/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-34-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [66d7a36] trace: split out trace events for audio/ directory.
    Move all trace-events for files in the audio/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-35-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [f3b0163] trace: split out trace events for net/ directory.
    Move all trace-events for files in the net/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-36-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1cba9b2] trace: split out trace events for target-sparc/ directory.
    Move all trace-events for files in the target-sparc/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-37-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [a4e21b3] trace: split out trace events for target-s390x/ directory.
    Move all trace-events for files in the target-s390x/ directory to
    their own file.
    [Added missing newline in target-s390x/trace-events as suggested by
    Cornelia Huck <cornelia.huck@de.ibm.com>.
    --Stefan]
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Message-id: 1466066426-16657-38-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [6dfba0e] trace: split out trace events for target-ppc/ directory.
    Move all trace-events for files in the target-ppc/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-id: 1466066426-16657-39-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [38b1eed] trace: split out trace events for qom/ directory.
    Move all trace-events for files in the qom/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1466066426-16657-40-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [f52347d] trace: split out trace events for linux-user/ directory.
    Move all trace-events for files in the linux-user/ directory to
    their own file.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-id: 1466066426-16657-41-git-send-email-berrange@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Mark Cave-Ayland ]
  * [2c742bf] MAINTAINERS: add Artyom Tarasenko as SPARC maintainer.
    Artyom has been working on QEMU's SPARC emulation for several years, providing
    initial support for Solaris under qemu-system-sparc and more recently bugfixes
    for qemu-system-sparc64 and TCG patch reviews. As work progresses on improving
    emulation for sun4u machines and beyond, Artyom has agreed to take on
    co-maintainership of SPARC with a focus on 64-bit architecture.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Artyom Tarasenko <atar4qemu@gmail.com>
  * [3a97805] MAINTAINERS: remove Blue Swirl as SPARC maintainer.
    Blue is no longer active in the QEMU project, so remove him from the list of
    SPARC maintainers.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    CC: Blue Swirl <blauwirbel@gmail.com>

  [ Gerd Hoffmann ]
  * [55543e7] milkymist: fix tmu2.c build failure (missing error.h include)
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Acked-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Aneesh Kumar K.V ]
  * [c117590] powerpc/mm: Update the WIMG check during H_ENTER.
    Support for 0 value for memeory coherence is optional and with ppc64
    we can always enable memory coherence. Linux kernel did that during
    the development of 4.7 kernel. But that resulted in failure in Qemu
    in H_ENTER hcall due to below check. The mentioned change was reverted
    in the kernel and kernel right now enable memory coherence only if
    cache inhibited is not set. Nevertheless update qemu WIMG flag check
    to cover the case where we enable memory coherence along with cache
    inhibited flag.
    In order to handle older and newer kernel version consider both Cache
    inhibitted and (cache inhibitted | memory conference) as valid values
    for wimg flags.
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Thomas Huth ]
  * [0ccac16] tests: Use '+=' to add additional tests, not '='
    The recent commit that added the prom-env-test accidentially
    overwrote the check-qtest-ppc-y, check-qtest-ppc64-y and
    check-qtest-sparc-y variables instead of extending them.
    Fixes: fcbf4a3c0c576eec1321f9cff4fa0dd8e0b1a82f
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Laurent Vivier ]
  * [7f2b174] ppc64: disable gen_pause() for linux-user mode.
    While trying to install a fedora container with
    "lxc-create -t fedora -- -I qemu-ppc64" the installation abort with
    the following error:
    qemu: fatal: Unknown exception 0x65537. Aborting
    NIP 0000004000927924   LR 00000040009e325c CTR 0000004000927480 XER 0000000000000000 CPU#0
    MSR 9000000102806000 HID0 0000000000000000  HF 9000000002806000 iidx 3 didx 3
    TB 00248932 1069155773327487
    GPR00 00000040009e325c 00000040007ff800 0000004000aba098 0000000000000000
    GPR04 00000040007ff878 0000004000dcb588 0000004000dcb830 0000004000a7a098
    GPR08 0000000000000000 0000000000000000 00000040007ff878 0000004000927960
    GPR12 0000000022022448 0000004000e2aef0 0000000000000000 0000000000000000
    GPR16 0000000000000000 0000000000000000 0000000000000002 0000000000000001
    GPR20 0000000000000000 0000000000000000 0000000000000000 0000004000800699
    GPR24 0000004000e13320 0000000000000000 0000004000ac9ad8 0000004000ac9ae0
    GPR28 0000000000000001 00000000100210a0 0000000000000000 0000000000000038
    CR 22022442  [ E  E  -  E  E  G  G  E  ]             RES ffffffffffffffff
    FPR00 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPR04 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPR08 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPR12 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPR16 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPR20 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPR24 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPR28 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    FPSCR 0000000000000000
    /usr/share/lxc/templates/lxc-fedora: line 487: 26661 Aborted                 (core dumped) chroot . yum -y --nogpgcheck --installroot /run/install install python rpm yum
    I've bisected until the commit:
        commit b68e60e6f0d2865e961a800fb8db96a7fc6494c4
        Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
        Date:   Tue May 3 18:03:33 2016 +0200
            ppc: Get out of emulation on SMT "OR" ops
            Otherwise tight loops at smt_low for example, which OPAL does,
            eat so much CPU that we can't boot a kernel anymore. With that,
            I can boot 8 CPUs just fine with powernv.
            Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
            Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
            Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    We can fix that by preventing to send EXCP_HLT in the case of linux-user mode,
    as the main loop doesn't know how to manage it.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Richard Henderson ]
  * [820724d] target-ppc: Fix rlwimi, rlwinm, rlwnm again.
    In 63ae0915f8ec, I arranged to use a 32-bit rotate, without
    considering the effect of a mask value that wraps around to
    the high bits of the word.
    [dwg: In 2e11b15 this was partially fixed, but an edge case was still
    incorrect, which this fixes]
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    [dwg: Folded with a revert of 2e11b15, an earlier buggy version of
     this patch which already went upstream]
    Tested-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [f027890] ppc: Improve emulation of THRM registers.
    The 75x and 74xx processors have some thermal monitoring SPRs that
    some OSes such as MacOS do use. Our current "dumb" implementation
    isn't good enough and will cause some versions of MacOS to hang during
    boot.
    This lifts an improved emulation from MacOnLinux and adapts it to
    qemu, thus fixing the problem.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [dwg: Fixed typo in comment, a number of minor checkpatch warnings,
     and a compile failure with CONFIG_USER_ONLY]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Alexey Kardashevskiy ]
  * [f682e9c] memory: Add reporting of supported page sizes.
    Every IOMMU has some granularity which MemoryRegionIOMMUOps::translate
    uses when translating, however this information is not available outside
    the translate context for various checks.
    This adds a get_min_page_size callback to MemoryRegionIOMMUOps and
    a wrapper for it so IOMMU users (such as VFIO) can know the minimum
    actual page size supported by an IOMMU.
    As IOMMU MR represents a guest IOMMU, this uses TARGET_PAGE_SIZE
    as fallback.
    This removes vfio_container_granularity() and uses new helper in
    memory_region_iommu_replay() when replaying IOMMU mappings on added
    IOMMU memory region.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Alex Williamson <alex.williamson@redhat.com>
    [dwg: Removed an unnecessary calculation]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Juergen Gross ]
  * [0d8e589] xen: fix style of hw/block/xen_blkif.h.
    Fix hw/block/xen_blkif.h to match qemu coding style.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>
  * [1624601] xen: fix qdisk BLKIF_OP_DISCARD for 32/64 word size mix.
    In case the word size of the domU and qemu running the qdisk backend
    differ BLKIF_OP_DISCARD will not work reliably, as the request
    structure in the ring have different layouts for different word size.
    Correct this by copying the request structure in case of different
    word size element by element in the BLKIF_OP_DISCARD case, too.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>
  * [25f8f6b] xen: move xen_sysdev to xen_backend.c.
    Commit 9432e53a5bc88681b2d3aec4dac9db07c5476d1b added xen_sysdev as a
    system device to serve as an anchor for removable virtual buses. This
    introduced a build failure for non-x86 builds with CONFIG_XEN_BACKEND
    set, as xen_sysdev was defined in a x86 specific file while being
    consumed in an architecture independent source.
    Move the xen_sysdev definition and initialization to xen_backend.c to
    avoid the build failure.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Anthony PERARD <anthony.perard@citrix.com>
    Acked-by: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>

  [ Gerd Hoffmann ]
  * [8d3830e] usb-storage: qcow2 encryption support is finally gone, zap dead code.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1465984019-28963-2-git-send-email-kraxel@redhat.com
  * [eb19d2b] usb: make USBDevice->attached bool.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Message-id: 1465984019-28963-3-git-send-email-kraxel@redhat.com
  * [1e351dc] usb: Add QOM property "attached".
    USB devices in attached state are visible to the guest.  This patch adds
    a QOM property for this.  Write access is opt-in per device.  Some
    devices manage attached state automatically (usb-host, usb-serial,
    usb-redir), so we can't enable write access universally but have to do
    it on a case by case base.  So far, no device opts in.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Message-id: 1465984019-28963-4-git-send-email-kraxel@redhat.com
    [ minor codestyle fix ]
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [b78ecd0] usb-bot: hotplug support.
    This patch marks usb-bot as hot-pluggable device, makes attached
    property settable and turns off auto-attach in case the device
    was hotplugged.
    Hot-plugging a usb-bot device with one or more scsi devices can be
    done this way now:
      (1) device-add usb-bot,id=foo
      (2) device-add scsi-{hd,cd},bus=foo.0,lun=0
      (2b) optionally add more devices (luns 0 ... 15).
      (3) qom-set foo.attached = true
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Message-id: 1465984019-28963-5-git-send-email-kraxel@redhat.com
  * [0d4cf3e] usb-uas: hotplug support.
    Make attached property settable and turns off auto-attach in case the
    device was hotplugged.  Hotplugging works simliar to usb-bot now.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Message-id: 1465984019-28963-6-git-send-email-kraxel@redhat.com

  [ Benjamin Herrenschmidt ]
  * [a2e71b2] ppc: Fix rfi/rfid/hrfi/... emulation.
    This reworks emulation of the various "rfi" variants. I removed
    some masking bits that I couldn't make sense of, the only bit that
    I am aware we should mask here is POW, the CPU's MSR mask should
    take care of the rest.
    This also fixes some problems when running 32-bit userspace under
    a 64-bit kernel.
    This patch broke 32bit OpenBIOS when run under a 970 cpu. A fix was
    proposed here :
        https://www.coreboot.org/pipermail/openbios/2016-June/009452.html
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [clg: updated the commit log with the reference of the openbios fix ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    [dwg: Remove hunk which disabled rfi on 64-bit CPUS.  The change was
     correct, but we need to fix OpenBIOS before applying it]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [61687db] ppc: define a default LPCR value.
    This allows us to set the appropriate LPCR bits which will be used
    when fixing the exception model for the HV mode.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [clg: previous commit 26a7f1291bb5 did not include the LPCR setting as
          it was not needed at the time, adapted commit log ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [6d49d6d] ppc: fix exception model for HV mode.
    This properly implements LPES0 handling for HV vs. !HV mode and
    removes the unsupported LPES1. This has been removed from the specs
    since ISA v2.07.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: AIL implementation was fixed in commit 5c94b2a5e5ef. This patch
          only contains the bits of the original patch related to LPES0
          handling, adapted commit log.
          fixed checkpatch.pl errors. ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [f03a1af] ppc: Fix POWER7 and POWER8 exception definitions.
    We were initializing unused ones and missing some
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [33595dc] ppc: Fix generation if ISI/DSI vs. HV mode.
    Under some circumstances, we need to direct ISI and DSI interrupts
    at the hypervisor, turning them into HISI/HDSI, and using different
    SPRs (HDSISR and HDAR) depending on the combination of MSR_DR and
    the corresponding VPM bits in LPCR.
    This moves part of the code into helpers that are fixed to select
    the right exception type and registers. On pre-P7 processors, LPCR
    is 0 which provides the old behaviour of directing the interrupts
    at the supervisor.
    Thanks to Andrei Warkentin for finding a bug when HV=1
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [clg: Merged a fix on POWERPC_EXCP_HDSI fixing the condition on
          msr_hv, from Andrei Warkentin <andrey.warkentin@gmail.com> ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [9b2fadd] ppc: Rework generation of priv and inval interrupts.
    Recent server processors use the Hypervisor Emulation Assistance
    interrupt for illegal instructions and *some* type of SPR accesses.
    Also the code was always generating inval instructions even for priv
    violations due to setting the wrong flags
    Finally, the checking for PR/HV was open coded everywhere.
    This reworks it all, using little helper macros for checking, and
    adding the HV interrupt (which gets converted back to program check
    in the slow path of excp_helper.c on CPUs that don't want it).
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [b781537] ppc: Add real mode CI load/store instructions for P7 and P8.
    Those instructions are only available in hypervisor real mode and
    allow cache inhibited garded access to devices in that mode.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [5c3ae92] ppc: Turn a bunch of booleans from int to bool.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [b9971cc] ppc: Move exception generation code out of line.
    There's no point inlining this, if you hit the exception case you exit
    anyway, and not inlining saves about 100K of code size (and cache
    footprint).
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: removed '__attribute__((noinline))' from original patch ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [7778a57] ppc: Add P7/P8 Power Management instructions.
    This adds the ISA 2.06 and later power management instructions
    (doze, nap, sleep and rvwinkle) and associated wakeup cause testing
    in LPCR
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Thomas Huth ]
  * [86b50f2] ppc: Disable huge page support if it is not available for main RAM.
    On powerpc, we must only signal huge page support to the guest if
    all memory areas are capable of supporting huge pages. The commit
    2d103aae8765 ("fix hugepage support when using memory-backend-file")
    already fixed the case when the user specified the mem-path property
    for NUMA memory nodes instead of using the global "-mem-path" option.
    However, there is one more case where it currently can go wrong.
    When specifying additional memory DIMMs without using NUMA, e.g.
     qemu-system-ppc64 -enable-kvm ... -m 1G,slots=2,maxmem=2G \
        -device pc-dimm,id=dimm-mem1,memdev=mem1 -object \
        memory-backend-file,policy=default,mem-path=/...,size=1G,id=mem1
    the code in getrampagesize() currently assumes that huge pages
    are possible since they are enabled for the mem1 object. But
    since the main RAM is not backed by a huge page filesystem,
    the guest Linux kernel then crashes very quickly after being
    started. So in case the we've got "normal" memory without NUMA
    and without the global "-mem-path" option, we must not announce
    huge pages to the guest. Since this is likely a mis-configuration
    by the user, also spill out a message in this case.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Corey Minyard ]
  * [0517cc9] smbios: Move table build tools into an include file.
    This will let things in other files (like IPMI) build SMBIOS tables.
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [35658f6] ipmi: Add SMBIOS table entry.
    Add an IPMI table entry to the SMBIOS.
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [86e91dd] acpi: Add IPMI table entries.
    Use the ACPI table construction tools to create an ACPI entry
    for IPMI.  This adds a function called build_acpi_ipmi_devices
    to add an DSDT entry for IPMI if IPMI is compiled in and an
    IPMI device exists.  It also adds a dummy function if IPMI
    is not compiled in.
    This conforms to section "C3-2 Locating IPMI System Interfaces in
    ACPI Name Space" in the IPMI 2.0 specification.
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [f4eda2d] bios: Add tests for the IPMI ACPI and SMBIOS entries.
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Xiao Guangrong ]
  * [8df1426] pc-dimm: introduce get_vmstate_memory_region callback.
    This callback returns the MemoryRegion that is the memory of dimm should
    be kept during live migration
    nvdimm device is different with pc-dimm as its memory includes not only
    the MemoryRegion directly mapping to guest's address space but also the
    memory used as label data
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d6fb213] nvdimm: support nvdimm label.
    Introduce a parameter, 'label-size', which is the size of nvdimm label
    data area which is reserved at the end of backend memory. It is required
    at least 128k
    Two callbacks, read_label_data() and write_label_data(), are used to
    operate the label area
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [b265f27] acpi: add aml_object_type.
    Implement ObjectType which is used by NVDIMM _DSM method in
    later patch
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [052889b] acpi: add aml_call5.
    It will be used by NVDIMM ACPI
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [732b530] nvdimm acpi: set HDLE properly.
    Now we pass HDLE to Qemu properly, use 0 for root device and use the
    handle for nvdimm devices
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [4568c94] nvdimm acpi: save arg3 of _DSM method.
    Check if the input Arg3 is valid then store it into ARG3 if it is
    needed
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [90623eb] nvdimm acpi: check UUID.
    Check arg0 which indicates UUID to see if it is valid
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [189f4d5] nvdimm acpi: abstract the operations for root & nvdimm devices.
    It separates the operations between root device and nvdimm devices
    in order to introducing label functions support for nvdimm device
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d15fc53] nvdimm acpi: check revision.
    Currently only revision 1 is supported
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [5797dcd] nvdimm acpi: support Get Namespace Label Size function.
    Function 4 is used to get Namespace label size
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [2b9e57f] nvdimm acpi: support Get Namespace Label Data function.
    Function 5 is used to get Namespace Label Data
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [14e4419] nvdimm acpi: support Set Namespace Label Data function.
    Function 6 is used to set Namespace Label Data
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [15b82b1] docs: add NVDIMM ACPI documentation.
    It describes the basic concepts of NVDIMM ACPI and the interfaces
    between QEMU and the ACPI BIOS
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Ido Yariv ]
  * [aa1dd39] i386: pci-assign: Fix MSI-X table size.
    The current code creates a whole page mmio region for the MSI-X table
    size.
    However, the page containing the MSI-X table may contain other registers
    not related to MSI-X. Creating an mmio region for the whole page masks
    such registers and may break drivers in the guest OS.
    Since maximal number of entries is known, use that instead to deduce the
    table size when setting up the mmio region.
    Signed-off-by: Ido Yariv <ido@wizery.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Igor Mammedov ]
  * [abd49bc] docs: update ACPI CPU hotplug spec with new protocol.
    Add description of new CPU hotplug interface.
    To switch from from legacy mode into new mode use fact
    that write accesses into CPU present bitmap were never
    used before and were ignored by QEMU.
    So use it to as a way to switch from legacy mode.
    That way pc/q35 machine starts in legacy mode and
    QEMU generated ACPI tables will switch to new CPU
    hotplug interface during runtime.
    In case QEMU is started with legacy BIOS (that doesn't
    support QEMU generated ACPI tables), legacy CPU hotplug
    will remain active and could be used by BIOS built in
    ACPI tables for CPU hotplug.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [16bcab9] pc: piix4/ich9: add 'cpu-hotplug-legacy' property.
    It will be used to select which hotplug call-back is called
    and for switching from legacy mode into new one.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [5e1b5d9] acpi: cpuhp: add CPU devices AML with _STA method
    it adds CPU objects to DSDT with _STA method
    and QEMU side of CPU hotplug interface initialization
    with registers sufficient to handle _STA requests,
    including necessary hotplug callbacks in piix4,ich9 code.
    Hot-(un)plug hw/acpi parts will be added by
    corresponding follow up patches.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [ac35f13] pc: acpi: introduce AcpiDeviceIfClass.madt_cpu hook.
    Add madt_cpu callback to AcpiDeviceIfClass and use
    it for generating LAPIC MADT entries for CPUs.
    Later it will be used for generating x2APIC
    entries in case of more than 255 CPUs and also
    would be reused by ARM target when ACPI CPU hotplug
    is introduced there.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d2238cb] acpi: cpuhp: implement hot-add parts of CPU hotplug interface
    it adds hw registers needed for handling CPU hot-add and
    corresponding AML methods to handle hot-add events on
    guest side.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [8872c25] acpi: cpuhp: implement hot-remove parts of CPU hotplug interface
    it adds hw registers needed for handling CPU hot-remove and
    corresponding AML methods to request and eject a CPU with
    necessary hotplug callbacks in pc,piix4,ich9 code.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [76623d0] acpi: cpuhp: add cpu._OST handling
    it adds HW and AML parts for CPU_Device._OST method
    handling to allow OSPM reports status of hot-(un)plug
    operation.
    And extends QMP command query-acpi-ospm-status to report
    CPU's OST info along with already reported PC-DIMM devices.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [679dd1a] pc: use new CPU hotplug interface since 2.7 machine type.
    For compatibility reasons PC/Q35 will start with legacy
    CPU hotplug interface by default but with new CPU hotplug
    AML code since 2.7 machine type. That way legacy firmware
    that doesn't use QEMU generated ACPI tables will be
    able to continue using legacy CPU hotplug interface.
    While new machine type, with firmware supporting QEMU
    provided ACPI tables, will generate new CPU hotplug AML,
    which will switch to new CPU hotplug interface when
    guest OS executes its _INI method on ACPI tables
    loading.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Michael S. Tsirkin ]
  * [d8d69e1] acpi-test-data: update expected
    switched to new cpu hotplug interface, aml changed.
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Igor Mammedov ]
  * [1f3aba3] pc: acpi: drop intermediate PCMachineState.node_cpu.
    PCMachineState.node_cpu was used for mapping APIC ID
    to numa node id as CPU entries in SRAT used to be
    built on sparse APIC ID bitmap (up to apic_id_limit).
    However since commit
      5803fce pc: acpi: SRAT: create only valid processor lapic entries
    CPU entries in SRAT aren't build using apic bitmap
    but using 0..maxcpus index instead which is also used
    for creating numa_info[x].node_cpu map.
    So instead of doing useless intermediate conversion from
      1. node by cpu index -> node by apic id
           i.e. numa_info[x].node_cpu -> PCMachineState.node_cpu
      2. apic id -> srat entry PMX
           PCMachineState.node_cpu[apic id] -> PMX value
    use numa_info[x].node_cpu map directly like ARM does and do
      1. numa_info[x].node_cpu -> PMX value using index
         in range 0..maxcpus
    and drop not necessary PCMachineState.node_cpu and related
    code.
    That also removes the last (not counting legacy hotplug)
    dependency of ACPI code on apic_id_limit and need to allocate
    huge sparse PCMachineState.node_cpu array in case of 32-bit
    APIC IDs.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Cornelia Huck ]
  * [6798e24] virtio-bus: common ioeventfd infrastructure.
    Introduce a set of ioeventfd callbacks on the virtio-bus level
    that can be implemented by the individual transports. At the
    virtio-bus level, do common handling for host notifiers (which
    is actually most of it).
    Two things of note:
    - When setting the host notifier, we only switch from/to the
      generic ioeventfd handler. This fixes a latent bug where we
      had no ioeventfd assigned for a certain window.
    - We always iterate over all possible virtio queues, even though
      ccw (currently) has a lower limit. It does not really matter
      here.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [b1f0a33] virtio-bus: have callers tolerate new host notifier api.
    Have vhost and dataplane use the new api for transports that
    have been converted.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [7c55f68] virtio-ccw: convert to ioeventfd callbacks.
    Use the new interface.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [9f06e71] virtio-pci: convert to ioeventfd callbacks.
    Convert to new interface.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [c0971bc] virtio-mmio: convert to ioeventfd callbacks.
    Convert to the new interface.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [21a4d96] virtio-bus: remove old set_host_notifier callback.
    All users have been converted to the new ioevent callbacks.
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Peter Maydell ]
  * [55d72a7] linux-user: Avoid possible misalignment in host_to_target_siginfo()
    host_to_target_siginfo() is implemented by a combination of
    host_to_target_siginfo_noswap() followed by tswap_siginfo().
    The first of these two functions assumes that the target_siginfo_t
    it is writing to is correctly aligned, but the pointer passed
    into host_to_target_siginfo() is directly from the guest and
    might be misaligned. Use a local variable to avoid this problem.
    (tswap_siginfo() does now correctly handle a misaligned destination.)
    We have to add a memset() to host_to_target_siginfo_noswap()
    to avoid some false positive "may be used uninitialized" warnings
    from gcc about subfields of the _sifields union if it chooses to
    inline both tswap_siginfo() and host_to_target_siginfo_noswap()
    into host_to_target_siginfo().
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Peter Maydell <riku.voipio@linaro.org>

  [ Gerd Hoffmann ]
  * [ffdc5a2] ipxe: update submodule from 4e03af8ec to 041863191
    shortlog
    ========
    Andrew Widdersheim (1):
          [netdevice] Add "ifname" setting
    Carl Henrik Lunde (1):
          [vmxnet3] Avoid completely filling the TX descriptor ring
    Christian Hesse (2):
          [golan] Fix build error on some versions of gcc
          [ath9k] Fix buffer overrun for ar9287
    Christian Nilsson (2):
          [intel] Add PCI device ID for another I219-V
          [intel] Add PCI device ID for another I219-LM
    Hummel Frank (1):
          [intel] Add INTEL_NO_PHY_RST for I218-LM
    Kyösti Mälkki (1):
          [intel] Add PCI IDs for i210/i211 flashless operation
    Ladi Prosek (6):
          [pci] Add pci_find_next_capability()
          [virtio] Add virtio 1.0 constants and data structures
          [virtio] Add virtio 1.0 PCI support
          [virtio] Add virtio-net 1.0 support
          [virtio] Renumber virtio_pci_region flags
          [virtio] Fix virtio-pci logging
    Leendert van Doorn (2):
          [tg3] Fix address truncation bug on 64-bit machines
          [tg3] Add missing memory barrier
    Michael Brown (287):
          [settings] Re-add "uristring" setting type
          [dhcp] Do not skip ProxyDHCPREQUEST if next-server is empty
          [efi] Add definitions of GUIDs observed when booting shim.efi and grub.efi
          [efi] Mark EFI debug transcription functions as __attribute__ (( pure ))
          [efi] Remove raw EFI_HANDLE values from debug messages
          [efi] Include installed protocol list in unknown handle names
          [efi] Improve efi_wrap debugging
          [pxe] Construct all fake DHCP packets before starting PXE NBP
          [efi] Add definitions of GUIDs observed when booting wdsmgfw.efi
          [efi] Fix debug directory size
          [efi] Populate debug directory entry FileOffset field
          [build] Search for ldlinux.c32 separately from isolinux.bin
          [tcpip] Allow supported address families to be detected at runtime
          [efi] Allow calls to efi_snp_claim() and efi_snp_release() to be nested
          [efi] Fix order of events on SNP removal path
          [efi] Do not return EFI_NOT_READY from our ReceiveFilters() method
          [pxe] Populate ciaddr in fake PXE Boot Server ACK packet
          [uri] Generalise tftp_uri() to pxe_uri()
          [efi] Implement the EFI_PXE_BASE_CODE_PROTOCOL
          [usb] Expose usb_find_driver()
          [usb] Add function to device's function list before attempting probe
          [efi] Add USB headers and GUID definitions
          [efi] Allow efidev_parent() to traverse multiple device generations
          [efi] Add a USB host controller driver based on EFI_USB_IO_PROTOCOL
          [tcpip] Avoid generating positive zero for transmitted UDP checksums
          [usb] Generalise zero-length packet generation logic
          [ehci] Do not treat zero-length NULL pointers as unreachable
          [ehci] Support arbitrarily large transfers
          [xhci] Support arbitrarily large transfers
          [efi] Provide efi_devpath_len()
          [efi] Include a copy of the device path within struct efi_device
          [usb] Select preferred USB device configuration based on driver score
          [usb] Allow for wildcard USB class IDs
          [efi] Expose unused USB devices via EFI_USB_IO_PROTOCOL
          [ncm] Support setting MAC address
          [build] Remove dependency on libiberty
          [efi] Minimise use of iPXE header files when building host utilities
          [pxe] Invoke INT 1a,564e when PXE stack is activated
          [pxe] Notify BIOS via INT 1a,564e for each new network device
          [efi] Work around broken 32-bit PE executable parsing in ImageHlp.dll
          [efi] Avoid infinite loops when asked to stop non-existent devices
          [efi] Expose an UNDI interface alongside the existing SNP interface
          [malloc] Avoid integer overflow for excessively large memory allocations
          [peerdist] Avoid NULL pointer dereference for plaintext blocks
          [http] Verify server port when reusing a pooled connection
          [efi] Reset root directory when installing EFI_SIMPLE_FILE_SYSTEM_PROTOCOL
          [efi] Update to current EDK2 headers
          [efi] Import EFI_HII_FONT_PROTOCOL definitions
          [fbcon] Allow character height to be selected at runtime
          [fbcon] Move margin calculations to fbcon.c
          [console] Tidy up config/console.h
          [build] Generalise CONSOLE_VESAFB to CONSOLE_FRAMEBUFFER
          [efi] Add support for EFI_GRAPHICS_OUTPUT_PROTOCOL frame buffer consoles
          [dhcp] Reset start time when deferring discovery
          [dhcp] Limit maximum number of DHCP discovery deferrals
          [comboot] Reset console before starting COMBOOT executable
          [intel] Forcibly skip PHY reset on some models
          [intel] Correct definition of receive overrun bit
          [infiniband] Add definitions for FDR and EDR link speeds
          [infiniband] Add qword accessors for ib_guid and ib_gid
          [pci] Add definitions for PCI Express function level reset (FLR)
          [bitops] Fix definitions for big-endian devices
          [smsc95xx] Add driver for SMSC/Microchip LAN95xx USB Ethernet NICs
          [bitops] Provide BIT_QWORD_PTR()
          [efi] Add %.usb target for building EFI-bootable USB (or other) disk images
          [usb] Use port->disconnected to check for disconnected devices
          [usb] Record USB device speed separately from current port speed
          [usb] Allow USB device IDs to include arbitrary driver-specific data
          [usb] Allow additional settling time for out-of-spec hubs
          [acm] Add support for CDC-ACM (aka USB RNDIS) devices
          [xhci] Ensure that zero-length packets are not part of a TRB chain
          [efi] Centralise EFI file system info GUIDs
          [build] Allow extra objects to be included in an all-drivers build
          [bios] Add support for injecting keypresses
          [settings] Expose SMBIOS settings as global variables
          [smsc95xx] Allow for multiple methods for obtaining the MAC address
          [crypto] Dual-license selected DRBG files
          [smsc95xx] Fetch MAC from SMBIOS OEM string for Honeywell VM3
          [crypto] Dual-license more selected DRBG files
          [vmware] Expose GuestRPC mechanism in 64-bit builds
          [romprefix] Report an optimistic runtime size estimate
          [usb] Add support for numeric keypad on USB keyboards
          [http] Handle relative redirection URIs
          [image] Provide image_set_uri() to modify an image's URI
          [downloader] Update image URI in response to a redirection
          [tftp] Do not change current working URI when TFTP server is cleared
          [infiniband] Profile post work queue entry operations
          [pxe] Colourise debug output
          [pxe] Add debug message to display real-mode segment addresses
          [i386] Add check_bios_interrupts() debug function
          [debug] Allow debug colourisation to be disabled
          [stp] Fix incorrectly disambiguated errors
          [build] Add named configuration for public cloud environments
          [smsc95xx] Enable LEDs
          [usb] Allow USB endpoints to specify a reserved header length for refills
          [smsc95xx] Reserve headroom in received packets
          [autoboot] Fix incorrect boolean logic
          [uri] Avoid potentially large stack allocation
          [ocsp] Avoid including a double path separator in request URI
          [tftp] Mangle initial slash on TFTP URIs
          [uri] Apply URI decoding for all parsed URIs
          [tcp] Guard against malformed TCP options
          [slam] Avoid potential division by zero
          [ath9k] Remove broken ath_rxbuf_alloc()
          [ehci] Add extra debugging information
          [malloc] Guard against unsigned integer overflow
          [iobuf] Improve robustness of I/O buffer allocation
          [pxe] Clarify comments regarding shrinking of cached DHCP packet
          [efi] Add missing definitions for function key scancodes
          [prefix] Pad .text16 and .data16 segment sizes at build time
          [libc] Split rmsetjmp() and rmlongjmp() into a separate rmsetjmp.h
          [bios] Use intptr_t when casting .text16 function pointers
          [bios] Use size_t when casting _text16_memsz and _data16_memsz
          [bios] Allow relocate.c to be compiled for x86_64
          [bios] Allow rtc_entropy.c to be compiled for x86_64
          [bios] Allow bzimage.c to be compiled for x86_64
          [bios] Allow bios_console.c to be compiled for x86_64
          [bios] Allow memmap.c to be compiled for x86_64
          [bios] Allow librm to be compiled for x86_64
          [bios] Move isolinux definitions to Makefile.pcbios
          [bios] Add bin-x86_64-pcbios build platform
          [librm] Discard argument as part of return from prot_call()
          [librm] Discard argument as part of return from real_call()
          [prefix] Align INT 15,88 temporary decompression area to a page boundary
          [romprefix] Align PMM temporary decompression area to a page boundary
          [bios] Make uses of REAL_CODE() and PHYS_CODE() 64-bit clean
          [librm] Use garbage-collectable section names
          [bios] Use an 8kB stack for x86_64
          [prefix] Use garbage-collectable section names
          [librm] Simplify definitions for prot_call() and real_call() stack frames
          [prefix] Standardise calls to prot_call()
          [librm] Convert prot_call() to a real-mode near call
          [librm] Provide an abstraction wrapper for prot_call
          [librm] Transition to protected mode within init_librm()
          [relocate] Preserve page alignment during relocation
          [librm] Prepare for long-mode memory map
          [librm] Generate page tables for 64-bit builds
          [build] Fix building on older versions of binutils
          [librm] Add phys_call() wrapper for calling code with physical addressing
          [librm] Do not preserve flags unnecessarily
          [librm] Mark virt_offset, text16, data16, rm_cs, and rm_ds as constant
          [librm] Support userptr_t in 64-bit builds
          [librm] Rename prot_call() to virt_call()
          [librm] Add support for running in 64-bit long mode
          [ioapi] Split ioremap() out to a separate IOMAP API
          [librm] Support ioremap() for addresses above 4GB in a 64-bit build
          [netdevice] Refuse to create duplicate network device names
          [infiniband] Remove concept of whole-device owner data
          [infiniband] Avoid multiple calls to ib_cmrc_shutdown()
          [infiniband] Add support for performing service record lookups
          [infiniband] Assign names to Infiniband devices for debug messages
          [infiniband] Use "%#lx" as format specifier for queue pair numbers
          [infiniband] Use "%d" as format specifier for LIDs
          [infiniband] Use connection's local ID as debug message identifier
          [infiniband] Use correct transaction identifier in CM responses
          [infiniband] Do not use GRH for local paths
          [infiniband] Record multicast GID attachment as part of group membership
          [infiniband] Parse MLID, rate, and SL from multicast membership record
          [ipoib] Avoid unnecessary path record lookup for broadcast address
          [ipoib] Simplify test for received broadcast packets
          [infiniband] Allow for the creation of multicast groups
          [pcbios] Restrict external memory allocations to the low 4GB
          [infiniband] Assign names to CMRC connections
          [infiniband] Assign names to queue pairs
          [infiniband] Add "ibstat" command
          [infiniband] Retrieve GID flag from cached path entries
          [ipoib] Resimplify test for received broadcast packets
          [ipoib] Increase number of transmit work queue entries
          [ifmgmt] Include human-readable error message for configuration failure
          [infiniband] Make IPoIB support configurable at build time
          [eoib] Add Ethernet over Infiniband (EoIB) driver
          [eoib] Silently ignore EoIB heartbeat packets
          [eoib] Allow the multicast group to be forcefully created
          [eoib] Support non-FullMember gateway devices
          [xsigo] Add support for Xsigo virtual Ethernet (XVE) EoIB devices
          [efi] Work around broken GetFontInfo() implementations
          [tls] Avoid potential out-of-bound reads in length fields
          [crypto] Allow for zero-length ASN.1 cursors
          [pixbuf] Check for unsigned integer overflow on multiplication
          [arp] Validate length of ARP packet
          [librm] Do not unconditionally preserve flags across virt_call()
          [linda] Use standard readq() and writeq() implementations
          [qib7322] Use standard readq() and writeq() implementations
          [test] Add missing #include <string.h>
          [serial] Add missing #include <string.h>
          [3c595] Fix compilation when "char" is unsigned by default
          [tg3] Remove x86-specific inline assembly
          [efi] Centralise architecture-independent EFI Makefile and linker script
          [build] Allow assembler section type character to vary by architecture
          [build] Accept CROSS= as a synonym for CROSS_COMPILE=
          [efi] Update to current EDK2 headers
          [efi] Add processor binding headers for ARM and AArch64
          [uri] Support URIs containing only scheme and path components
          [uri] Support "file:" URIs describing relative paths
          [efi] Provide access to files stored on EFI filesystems
          [build] Remove long-obsolete header file
          [pseudobit] Rename bitops.h to pseudobit.h
          [bitops] Add generic atomic bit test, set, and clear functions
          [hyperv] Use generic set_bit() function
          [xen] Use generic test_and_clear_bit() function
          [test] Move i386-specific tests to arch/i386/tests
          [efi] Move architecture-independent EFI prefixes to interface/efi
          [libc] Allow container_of() to be used on volatile pointers
          [ipoib] Allow external code to identify IPoIB network devices
          [hermon] Add missing iounmap()
          [arbel] Add missing iounmap()
          [linda] Add missing iounmap()
          [qib7322] Add missing iounmap()
          [crypto] Allow trusted certificates to be stored in non-volatile options
          [hermon] Allocate space for GRH on UD queue pairs
          [arbel] Allocate space for GRH on UD queue pairs
          [infiniband] Allow drivers to override the eIPoIB LEMAC
          [build] Do not use "objcopy -O binary" for objects with relocation records
          [gdb] Add support for x86_64
          [int13] Allow drive to be hooked using the natural drive number
          [int13] Allow default drive to be specified via "san-drive" setting
          [3c5x9] Avoid use of sleep() in driver code
          [etherfabric] Avoid use of sleep() in driver code
          [hermon] Fix received packet length
          [arbel] Fix received packet length
          [libc] Make sleep() interruptible
          [pxe] Implicitly open network device in PXENV_UDP_OPEN
          [prefix] Use CRC32 to verify each block prior to decompression
          [crypto] Allow cross-certificate source to be configured at build time
          [iscsi] Include DHCP server address in iBFT
          [netdevice] Return ENOENT for an unknown bus type
          [linda] Validate payload length
          [qib7322] Validate payload length
          [test] Update snprintf_ok() to use okx()
          [libc] Print "<NULL>" for wide-character NULL strings
          [efi] Work around broken EFI HII specification
          [comboot] Support COMBOOT in 64-bit builds
          [ethernet] Make LACP support configurable at build time
          [libc] Allow CPU architectures to use unoptimised string functions
          [libgcc] Provide symbol to handle gcc's implicit calls to memset()
          [image] Skip misleading "format not recognised" error message
          [librm] Reduce real-mode stack consumption in virt_call()
          [tg3] Fix _tg3_flag() for 64-bit builds
          [librm] Preserve FPU, MMX and SSE state across calls to virt_call()
          [efi] Eliminate use of libbfd
          [build] Remove unnecessary dependency on zlib
          [tcpip] Do not fall back to using unoptimised TCP/IP checksumming
          [efi] Use a timer event to generate the currticks() timer
          [efi] Generalise EFI entropy generation to non-x86 CPUs
          [sis190] Fix building with GCC 6
          [skge] Fix building with GCC 6
          [golan] Fix building with GCC 6
          [ath] Fix building with GCC 6
          [legacy] Fix building with GCC 6
          [libgcc] Provide __divmoddi4()
          [bitops] Fix typo in test case
          [arm] Add support for 32-bit ARM
          [arm] Avoid instruction references to symbols defined via ".equ"
          [arm] Split out 32-bit-specific code to arch/arm32
          [arm] Add support for 64-bit ARM (Aarch64)
          [efi] Allow for building with older versions of elf.h system header
          [libc] Avoid implicit assumptions about potentially-optimised memcpy()
          [arm] Add optimised string functions for 64-bit ARM
          [arm] Add optimised TCP/IP checksumming for 64-bit ARM
          [efi] Guard against GetStatus() failing to return a NULL TX buffer
          [arm] Use CNTVCT_EL0 as profiling timestamp
          [undi] Work around broken HP EliteBook 745 G3 PXE ROM
          [pci] Add support for PCI Enhanced Allocation
          [settings] Extend numerical setting tags to "unsigned long"
          [netdevice] Fix failure path in register_netdev()
          [lotest] Add option to use broadcast packets for loopback testing
          [http] Ignore unrecognised "Connection" header tokens
          [efi] Work around broken UEFI keyboard drivers
          [axge] Add driver for ASIX 10/100/1000 USB Ethernet NICs
          [arm] Use correct DHCP client architecture values
          [dhcp] Fix definitions for x86_64 and EFI BC client architectures
          [efi] Expose DHCP packets via the Apple NetBoot protocol
          [libc] Always use a non-zero seed for the (non-crypto) RNG
          [pci] Support systems with multiple PCI root bridges
          [http] Accept headers with no whitespace following the colon
          [tcp] Send TCP keepalives on idle established connections
          [time] Allow system clock to be adjusted at runtime
          [ntp] Add simple NTP client
          [cmdline] Add "ntp" command
          [thunderx] Add driver for Cavium ThunderX SoC NICs
          [thunderx] Fix channel configuration for VNICs 1-7
          [efi] Include VLAN in SNP device path if applicable
          [thunderx] Retrieve base MAC address via EFI_THUNDER_CONFIG_PROTOCOL
          [smsc75xx] Allow up to 100ms for reset to complete
          [efi] Report failures to stop the EFI timer tick event
          [efi] Do not copy garbage bytes into SNP device path MAC address
          [thunderx] Fix compilation with older versions of gcc
    Mika Tiainen (1):
          [intel] Add INTEL_NO_PHY_RST for another I218-LM variant
    Suresh Sundriyal (1):
          [pool] Fix check for reopenable pooled connections
    Torgeir Wulfsberg (1):
          [intel] Add INTEL_NO_PHY_RST for I217-LM
    Vinson Lee (2):
          [mucurses] Fix GCC 6 nonnull-compare errors
          [build] Remove nested "my" declaration
    Wissam Shoukair (3):
          [golan] Add Connect-IB, ConnectX-4 and ConnectX-4 Lx (Infiniband) support
          [mlx_icmd] Fix compilation error in GCC versions newer than 4.6.4
          [golan] Add missing iounmap()
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [c9c3dc5] ipxe: add e1000e rom.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [4d9dc8b] ipxe: add vmxnet3 rom.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [1676103] e1000e: add boot rom.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [43716de] vmxnet3: add boot rom.
    Disable for old machine types as this is a guest visible change.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [c52125a] ipxe: update prebuilt binaries.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Aleksandar Markovic ]
  * [af39bc8] softfloat: Implement run-time-configurable meaning of signaling NaN bit.
    This patch modifies SoftFloat library so that it can be configured in
    run-time in relation to the meaning of signaling NaN bit, while, at the
    same time, strictly preserving its behavior on all existing platforms.
    Background:
    In floating-point calculations, there is a need for denoting undefined or
    unrepresentable values. This is achieved by defining certain floating-point
    numerical values to be NaNs (which stands for "not a number"). For additional
    reasons, virtually all modern floating-point unit implementations use two
    kinds of NaNs: quiet and signaling. The binary representations of these two
    kinds of NaNs, as a rule, differ only in one bit (that bit is, traditionally,
    the first bit of mantissa).
    Up to 2008, standards for floating-point did not specify all details about
    binary representation of NaNs. More specifically, the meaning of the bit
    that is used for distinguishing between signaling and quiet NaNs was not
    strictly prescribed. (IEEE 754-2008 was the first floating-point standard
    that defined that meaning clearly, see [1], p. 35) As a result, different
    platforms took different approaches, and that presented considerable
    challenge for multi-platform emulators like QEMU.
    Mips platform represents the most complex case among QEMU-supported
    platforms regarding signaling NaN bit. Up to the Release 6 of Mips
    architecture, "1" in signaling NaN bit denoted signaling NaN, which is
    opposite to IEEE 754-2008 standard. From Release 6 on, Mips architecture
    adopted IEEE standard prescription, and "0" denotes signaling NaN. On top of
    that, Mips architecture for SIMD (also known as MSA, or vector instructions)
    also specifies signaling bit in accordance to IEEE standard. MSA unit can be
    implemented with both pre-Release 6 and Release 6 main processor units.
    QEMU uses SoftFloat library to implement various floating-point-related
    instructions on all platforms. The current QEMU implementation allows for
    defining meaning of signaling NaN bit during build time, and is implemented
    via preprocessor macro called SNAN_BIT_IS_ONE.
    On the other hand, the change in this patch enables SoftFloat library to be
    configured in run-time. This configuration is meant to occur during CPU
    initialization, at the moment when it is definitely known what desired
    behavior for particular CPU (or any additional FPUs) is.
    The change is implemented so that it is consistent with existing
    implementation of similar cases. This means that structure float_status is
    used for passing the information about desired signaling NaN bit on each
    invocation of SoftFloat functions. The additional field in float_status is
    called snan_bit_is_one, which supersedes macro SNAN_BIT_IS_ONE.
    IMPORTANT:
    This change is not meant to create any change in emulator behavior or
    functionality on any platform. It just provides the means for SoftFloat
    library to be used in a more flexible way - in other words, it will just
    prepare SoftFloat library for usage related to Mips platform and its
    specifics regarding signaling bit meaning, which is done in some of
    subsequent patches from this series.
    Further break down of changes:
      1) Added field snan_bit_is_one to the structure float_status, and
         correspondent setter function set_snan_bit_is_one().
      2) Constants <float16|float32|float64|floatx80|float128>_default_nan
         (used both internally and externally) converted to functions
         <float16|float32|float64|floatx80|float128>_default_nan(float_status*).
         This is necessary since they are dependent on signaling bit meaning.
         At the same time, for the sake of code cleanup and simplicity, constants
         <floatx80|float128>_default_nan_<low|high> (used only internally within
         SoftFloat library) are removed, as not needed.
      3) Added a float_status* argument to SoftFloat library functions
         XXX_is_quiet_nan(XXX a_), XXX_is_signaling_nan(XXX a_),
         XXX_maybe_silence_nan(XXX a_). This argument must be present in
         order to enable correct invocation of new version of functions
         XXX_default_nan(). (XXX is <float16|float32|float64|floatx80|float128>
         here)
      4) Updated code for all platforms to reflect changes in SoftFloat library.
         This change is twofolds: it includes modifications of SoftFloat library
         functions invocations, and an addition of invocation of function
         set_snan_bit_is_one() during CPU initialization, with arguments that
         are appropriate for each particular platform. It was established that
         all platforms zero their main CPU data structures, so snan_bit_is_one(0)
         in appropriate places is not added, as it is not needed.
    [1] "IEEE Standard for Floating-Point Arithmetic",
        IEEE Computer Society, August 29, 2008.
    Signed-off-by: Thomas Schwinge <thomas@codesourcery.com>
    Signed-off-by: Maciej W. Rozycki <macro@codesourcery.com>
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Tested-by: Bastian Koppelmann <kbastian@mail.uni-paderborn.de>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Tested-by: Leon Alrae <leon.alrae@imgtec.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [leon.alrae@imgtec.com:
     * cherry-picked 2 chunks from patch #2 to fix compilation warnings]
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [a59eaea] softfloat: Clean code format in fpu/softfloat-specialize.h
    fpu/softfloat-specialize.h is the most critical file in SoftFloat
    library, since it handles numerous differences between platforms in
    relation to floating point arithmetics. This patch makes the code
    in this file more consistent format-wise, and hopefully easier to
    debug and maintain.
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [a7c04d5] softfloat: For Mips only, correct default NaN values.
    Only for Mips platform, and only for cases when snan_bit_is_one is 0,
    correct default NaN values (in their 16-, 32-, and 64-bit flavors).
    For more info, see [1], page 84, Table 6.3 "Value Supplied When a New
    Quiet NaN Is Created", and [2], page 52, Table 3.7 "Default NaN
    Encodings".
    [1] "MIPS Architecture For Programmers Volume II-A:
        The MIPS64 Instruction Set Reference Manual",
        Imagination Technologies LTD, Revision 6.04, November 13, 2015
    [2] "MIPS Architecture for Programmers Volume IV-j:
        The MIPS32 SIMD Architecture Module",
        Imagination Technologies LTD, Revision 1.12, February 3, 2016
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [c27644f] softfloat: Handle snan_bit_is_one == 0 in MIPS pickNaNMulAdd()
    Only for Mips platform, and only for cases when snan_bit_is_one is 0,
    correct the order of argument comparisons in pickNaNMulAdd().
    For more info, see [1], page 53, section "3.5.3 NaN Propagation".
    [1] "MIPS Architecture for Programmers Volume IV-j:
        The MIPS32 SIMD Architecture Module",
        Imagination Technologies LTD, Revision 1.12, February 3, 2016
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [leon.alrae@imgtec.com:
     * reworded the subject of the patch
     * swapped if/else code blocks to match the commit description]
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [52d4c8e] linux-user: Update preprocessor constants for Mips-specific e_flags bits.
    Missing values EF_MIPS_FP64 and EF_MIPS_NAN2008 added.
    Signed-off-by: Thomas Schwinge <thomas@codesourcery.com>
    Signed-off-by: Maciej W. Rozycki <macro@codesourcery.com>
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [40bd6dd] target-mips: Activate IEEE 754-2008 signaling NaN bit meaning for MSA.
    Function msa_reset() is updated so that flag snan_bit_is_one is
    properly set to 0.
    By applying this patch, a number of incorrect MSA behaviors that
    require IEEE 754-2008 compliance will be fixed. Those are behaviors
    that (up to the moment of applying this patch) did not get the desired
    functionality from SoftFloat library with respect to distinguishing
    between quiet and signaling NaN, getting default NaN values (both
    quiet and signaling), establishing if a floating point number is NaN
    or not, etc.
    Two examples:
    * FMAX, FMIN will now correctly detect and propagate NaNs.
    * FCLASS.D ans FCLASS.S will now correcty detect NaN flavors.
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [6be7748] target-mips: Add abs2008 flavor of <ABS|NEG>.<S|D>
    Updated handling of instructions <ABS|NEG>.<S|D>. Note that legacy
    (pre-abs2008) ABS and NEG instructions are arithmetic (and, therefore,
    any NaN operand causes signaling invalid operation), while abs2008
    ones are non-arithmetic, always and only changing the sign bit, even
    for NaN-like operands. Details on these instructions are documented
    in [1] p. 35 and 359.
    Implementation-wise, abs2008 versions are implemented without helpers,
    for simplicity and performance sake.
    [1] "MIPS Architecture For Programmers Volume II-A:
        The MIPS64 Instruction Set Reference Manual",
        Imagination Technologies LTD, Revision 6.04, November 13, 2015
    Signed-off-by: Thomas Schwinge <thomas@codesourcery.com>
    Signed-off-by: Maciej W. Rozycki <macro@codesourcery.com>
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [8755208] target-mips: Add nan2008 flavor of <CEIL|CVT|FLOOR|ROUND|TRUNC>.<L|W>.<S|D>
    New set of helpers for handling nan2008-syle versions of instructions
    <CEIL|CVT|FLOOR|ROUND|TRUNC>.<L|W>.<S|D>, for Mips R6.
    All involved instructions have float operand and integer result. Their
    core functionality is implemented via invocations of appropriate SoftFloat
    functions. The problematic cases are when the operand is a NaN, and also
    when the operand (float) is out of the range of the result.
    Here one can distinguish three cases:
    CASE MIPS-A: (FCR31.NAN2008 == 1)
       1. Operand is a NaN, result should be 0;
       2. Operand is larger than INT_MAX, result should be INT_MAX;
       3. Operand is smaller than INT_MIN, result should be INT_MIN.
    CASE MIPS-B: (FCR31.NAN2008 == 0)
       1. Operand is a NaN, result should be INT_MAX;
       2. Operand is larger than INT_MAX, result should be INT_MAX;
       3. Operand is smaller than INT_MIN, result should be INT_MAX.
    CASE SoftFloat:
       1. Operand is a NaN, result is INT_MAX;
       2. Operand is larger than INT_MAX, result is INT_MAX;
       3. Operand is smaller than INT_MIN, result is INT_MIN.
    Current implementation of <CEIL|CVT|FLOOR|ROUND|TRUNC>.<L|W>.<S|D>
    implements case MIPS-B. This patch relates to case MIPS-A. For case
    MIPS-A, only return value for NaN-operands should be corrected after
    appropriate SoftFloat library function is called.
    Related MSA instructions FTRUNC_S and FTINT_S already handle well
    all cases, in the fashion similar to the code from this patch.
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    [leon.alrae@imgtec.com:
     * removed a statement from the description which caused slight confusion]
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [599bc5e] target-mips: Implement FCR31's R/W bitmask and related functionalities.
    This patch implements read and write access rules for Mips floating
    point control and status register (FCR31). The change can be divided
    into following parts:
    - Add fields that will keep FCR31's R/W bitmask in procesor
      definitions and processor float_status structure.
    - Add appropriate value for FCR31's R/W bitmask for each supported
      processor.
    - Add function for setting snan_bit_is_one, and integrate it in
      appropriate places.
    - Modify handling of CTC1 (case 31) instruction to use FCR31's R/W
      bitmask.
    - Modify handling user mode executables for Mips, in relation to the
      bit EF_MIPS_NAN2008 from ELF header, that is in turn related to
      reading and writing to FCR31.
    - Modify gdb behavior in relation to FCR31.
    Signed-off-by: Thomas Schwinge <thomas@codesourcery.com>
    Signed-off-by: Maciej W. Rozycki <macro@codesourcery.com>
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [77be419] target-mips: Add FCR31's FS bit definition.
    Add preprocessor definition of FCR31's FS bit, and update related
    code for setting this bit.
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@imgtec.com>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Artyom Tarasenko ]
  * [b64d2e5] target-sparc: fix register corruption in ldstub if there is no write permission.
    Signed-off-by: Artyom Tarasenko <atar4qemu@gmail.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>

  [ Peter Maydell ]
  * [213d3e9] linux-user: Use __get_user() and __put_user() to handle structs in do_fcntl()
    Use the __get_user() and __put_user() to handle reading and writing the
    guest structures in do_ioctl(). This has two benefits:
     * avoids possible errors due to misaligned guest pointers
     * correctly sign extends signed fields (like l_start in struct flock)
       which might be different sizes between guest and host
    To do this we abstract out into copy_from/to_user functions. We
    also standardize on always using host flock64 and the F_GETLK64
    etc flock commands, as this means we always have 64 bit offsets
    whether the host is 64-bit or 32-bit and we don't need to support
    conversion to both host struct flock and struct flock64.
    In passing we fix errors in converting l_type from the host to
    the target (where we were doing a byteswap of the host value
    before trying to do the convert-bitmasks operation rather than
    otherwise, and inexplicably shifting left by 1); these were
    accidentally left over when the original simple "just shift by 1"
    arm<->x86 conversion of commit 43f238d was changed to the more
    general scheme of using target_to_host_bitmask() functions in 2ba7f73.
    [RV: fixed ifdef guard for eabi functions]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [435da5e] linux-user: Use safe_syscall wrapper for fcntl.
    Use the safe_syscall wrapper for fcntl. This is straightforward now
    that we always use 'struct fcntl64' on the host, as we don't need
    to select whether to call the host's fcntl64 or fcntl syscall
    (a detail that the libc previously hid for us).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [1d48fdd] linux-user: Don't use sigfillset() on uc->uc_sigmask.
    The kernel and libc have different ideas about what a sigset_t
    is -- for the kernel it is only _NSIG / 8 bytes in size (usually
    8 bytes), but for libc it is much larger, 128 bytes. In most
    situations the difference doesn't matter, because if you pass a
    pointer to a libc sigset_t to the kernel it just acts on the first
    8 bytes of it, but for the ucontext_t* argument to a signal handler
    it trips us up. The kernel allocates this ucontext_t on the stack
    according to its idea of the sigset_t type, but the type of the
    ucontext_t defined by the libc headers uses the libc type, and
    so do the manipulator functions like sigfillset(). This means that
     (1) sizeof(uc->uc_sigmask) is much larger than the actual
         space used on the stack
     (2) sigfillset(&uc->uc_sigmask) will write garbage 0xff bytes
         off the end of the structure, which can trash data that
         was on the stack before the signal handler was invoked,
         and may result in a crash after the handler returns
    To avoid this, we use a memset() of the correct size to fill
    the signal mask rather than using the libc function.
    This fixes a problem where we would crash at least some of the
    time on an i386 host when a signal was taken.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [997f6ed] configure: Don't override ARCH=unknown if enabling TCI.
    At the moment if configure finds an unknown CPU it will set
    ARCH to 'unknown', and then later either bail out or set it
    to 'tci' (depending on whether the user passed configure the
    --enable-tcg-interpreter switch). This is unnecessarily
    confusing, because we could be using TCI in two cases:
     * a known host architecture (in which case ARCH is set to
       the actual host architecture, like 'i386')
     * an unknown host architecture (in which case ARCH is
       set to 'tci')
    so nothing can rely on ARCH=tci to mean "using TCI".
    Remove the line setting ARCH, so we leave it as "unknown",
    which is what the actual situation is.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [affc88c] configure: Don't allow user-only targets for unknown CPU architectures.
    For the user-only targets, we need to know something about the host CPU
    architecture even if we are using the TCI interpreter rather than TCG.
    (In particular user-exec.c has code for handling signals that needs
    to know about that host's context structures.)
    Specifically forbid building the user-only targets on unknown CPU
    architectures, rather than allowing them to configure but then fail
    when building user-exec.c.
    This change drops supports for two configurations which were theoretically
    possible before:
     * linux-user targets on M68K hosts using TCI
     * linux-user targets on HPPA hosts using TCI
    We don't think anybody is actually trying to use these in practice, though:
     * interpreted TCG on a slow host CPU would be unusably slow
     * the m68k user-exec.c support is missing is_write detection so guest
       code which writes to the same page it is executing from was broken
       (will include any guest program using signals)
     * HPPA TCG backend support was dropped two and a half years ago
       with no complaints
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [4259a82] user-exec: Delete now-unused hppa and m68k cpu_signal_handler() code.
    Now that configure blocks attempts to build user-mode code on hppa
    and m68k hosts, we can delete the cpu_signal_handler() implementations
    for those architectures.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [c567902] user-exec: Remove unused code for OSX hosts.
    Since we dropped darwin-user support many years ago, the code in
    user-exec to support hosts which define __APPLE__ is unused; delete it.
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [ba45378] linux-user: Create a hostdep.h for each host architecture.
    In commit 4d330cee37a21 a new hostdep.h file was added, with the intent
    that host architectures which needed one could provide it, and the
    build system would automatically fall back to a generic version if
    there was no version for the host architecture. Although this works,
    it has a flaw: if a subsequent commit switches an architecture from
    "uses generic/hostdep.h" to "uses its own hostdep.h" nothing in the
    makefile dependencies notices this and so doing a rebuild without
    a manual 'make clean' will fail.
    So we drop the idea of having a 'generic' version in favour of
    every architecture we support having its own hostdep.h, even if
    it doesn't have anything in it. (There are only thirteen of these.)
    If the dependency files claim that an object file depends on a
    nonexistent file, our dependency system means that make will
    rebuild the object file, and regenerate the dependencies in
    the process. So moving between trees prior to this commit and
    trees after this commit works without requiring a 'make clean'.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [4debae6] linux-user: Fix wrong type used for argument to rt_sigqueueinfo.
    The third argument to the rt_sigqueueinfo syscall is a pointer to
    a siginfo_t, not a pointer to a sigset_t. Fix the error in the
    arguments to lock_user(), which meant that we would not have
    detected some faults that we should.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [7e3b92e] linux-user: Support F_GETPIPE_SZ and F_SETPIPE_SZ fcntls.
    Support the F_GETPIPE_SZ and F_SETPIPE_SZ fcntl operations.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Laurent Vivier ]
  * [fb3aabf] linux-user: add socketcall() strace.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
  * [8997d1b] linux-user: add socket() strace.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
  * [84bd828] linux-user: fix clone() strace.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
  * [9a6309e] linux-user: update get_thread_area/set_thread_area strace.
           int get_thread_area(struct user_desc *u_info);
           int set_thread_area(struct user_desc *u_info);
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
  * [84f34b0] linux-user: add missing return in netlink switch statement.
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
  * [48dc0f2] linux-user: fd_trans_host_to_target_data() must process only received data
    if we process the whole buffer, the netlink helpers can try
    to swap invalid data.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
  * [b940397] linux-user: don't swap NLMSG_DATA() fields.
    If the structure pointed by NLMSG_DATA() is bigger
    than the size of NLMSG_DATA(), don't swap its fields
    to avoid memory corruption.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>

  [ Richard Henderson ]
  * [4eed999] linux-user: fix x86_64 safe_syscall.
    Do what the comment says, test for signal_pending non-zero,
    rather than the current code which tests for bit 0 non-zero.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
  * [5d3acaf] linux-user: Provide safe_syscall for i386.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [e942fef] linux-user: Provide safe_syscall for arm.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [31f875f] linux-user: Provide safe_syscall for aarch64.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    [RV] Updated syscall argument comment to match code
  * [c9bc343] linux-user: Provide safe_syscall for s390x.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [4ba92cd] linux-user: Provide safe_syscall for ppc64.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Aaron Larson ]
  * [6d18a7a] target-ppc: ppce500_spin.c uses SPR_PIR, should use SPR_BOOKE_PIR
    ppce500_spin.c uses SPR_PIR to initialize the spin table, however on
    Book E processors the correct SPR is SPR_BOOKE_PIR.
    Signed-off-by: Aaron Larson <alarson@ddci.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [d29f086] ppc/xics: Remove unused xics_set_irq_type()
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Nikunj A Dadhania <nikunj@linux.vnet.ibm.com>
    [dwg: Adjusted for context to apply without original series]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Peter Krempa ]
  * [62c9467] qapi: Report support for -device cpu hotplug in query-machines.
    For management apps it's very useful to know whether the selected
    machine type supports cpu hotplug via the new -device approach. Using
    the presence of 'query-hotpluggable-cpus' alone is not enough as a
    witness.
    Add a property to 'MachineInfo' called 'hotpluggable-cpus' that will
    report the presence of this feature.
    Example of output:
        {
            "hotpluggable-cpus": false,
            "name": "mac99",
            "cpu-max": 1
        },
        {
            "hotpluggable-cpus": true,
            "name": "pseries-2.7",
            "is-default": true,
            "cpu-max": 255,
            "alias": "pseries"
        },
    Signed-off-by: Peter Krempa <pkrempa@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [27393c3] qapi: keep names in 'CpuInstanceProperties' in sync with struct CPUCore
    struct CPUCore uses 'id' suffix in the property name. As docs for
    query-hotpluggable-cpus state that the cpu core properties should be
    passed back to device_add by management in case new members are added
    and thus the names for the fields should be kept in sync.
    Signed-off-by: Peter Krempa <pkrempa@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    [dwg: Removed a duplicated word in comment]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Shannon Zhao ]
  * [92b30c2] hw/intc/arm_gicv3: Add missing break.
    These are spotted by coverity 1356936 and 1356937.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1466387717-13740-1-git-send-email-zhaoshenglong@huawei.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Alistair Francis ]
  * [f6cf419] cadence_uart: Protect against transmit errors.
    If qemu_chr_fe_write() returns an error (represented by a negative
    number) we should skip incrementing the count and initiating a
    memmove().
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 667e5dc534d33338fcfc2471e5aa32fe7cbd13dc.1466546703.git.alistair.francis@xilinx.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [f265ae8] cadence_gem: Avoid infinite loops with a misconfigured buffer.
    A guest can write zero to the DMACFG resulting in an infinite loop when
    it reaches the while(bytes_to_copy) loop.
    To avoid this issue enforce a minimum size for the RX buffer. Hardware
    does not have this enforcement and relies on the guest to set a non-zero
    value.
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Reported-by: P J P <ppandit@redhat.com>
    Message-id: 84bb1c391b833275da3f573d4972920cea34c188.1466539342.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [cbdab58] cadence_gem: Set the last bit when wrap is set.
    The Cadence GEM data sheet says:
    "Wrap - marks last descriptor in transmit buffer descriptor list. This
    can be set for any buffer within the frame."
    which seems to imply that when the wrap bit is set so is the last bit.
    Previously if the wrap bit is set, but the last is not then QEMU will
    enter an infinite loop.
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Reported-by: P J P <ppandit@redhat.com>
    Message-id: eb23f15c67989ea6a53609dc66568399dadf52a7.1466539342.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Thomas Huth ]
  * [1f5c1cf] arm: Re-enable tmp105 test.
    The tmp105 test is currently not executed since the following
    line in the Makefile overwrites the check-qtest-arm-y variable
    instead of extending it.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-id: 1466760306-21849-1-git-send-email-thuth@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Andrew Jeffery ]
  * [1c8a238] hw/misc: Add a model for the ASPEED System Control Unit.
    The SCU is a collection of chip-level control registers that manage the
    various functions supported by ASPEED SoCs. Typically the bits control
    interactions with clocks, external hardware or reset behaviour, and we
    can largly take a hands-off approach to reads and writes.
    Firmware makes heavy use of the state to determine how to boot, but the
    reset values vary from SoC to SoC (eg AST2400 vs AST2500). A qdev
    property is exposed so that the integrating SoC model can configure the
    silicon revision, which in-turn selects the appropriate reset values.
    Further qdev properties are exposed so the board model can configure the
    board-dependent hardware strapping.
    Almost all provided AST2400 reset values are specified by the datasheet.
    The notable exception is SOC_SCRATCH1, where we mark the DRAM as
    successfully initialised to avoid unnecessary dark corners in the SoC's
    u-boot support.
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Message-id: 1466744305-23163-2-git-send-email-andrew@aj.id.au
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: drop unnecessary inttypes.h include]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [334973b] ast2400: Integrate the SCU model and set silicon revision.
    By specifying the silicon revision we select the appropriate reset
    values for the SoC.
    Additionally, expose hardware strapping properties aliasing those
    provided by the SCU for board-specific configuration.
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1466744305-23163-3-git-send-email-andrew@aj.id.au
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [87e79af] palmetto-bmc: Configure the SCU's hardware strapping register.
    The magic constant configures the following options:
    * 28:27: Configure DRAM size as 256MB
    * 26:24: DDR3 SDRAM with CL = 6, CWL = 5
    * 23: Configure 24/48MHz CLKIN
    * 22: Disable GPIOE pass-through mode
    * 21: Disable GPIOD pass-through mode
    * 20: Enable LPC decode of SuperIO 0x2E/0x4E addresses
    * 19: Disable ACPI
    * 18: Configure 48MHz CLKIN
    * 17: Disable BMC 2nd boot watchdog timer
    * 16: Decode SuperIO address 0x2E
    * 15: VGA Class Code
    * 14: Enable LPC dedicated reset pin
    * 13:12: Enable SPI Master and SPI Slave to AHB Bridge
    * 11:10: Select CPU:AHB ratio = 2:1
    * 9:8: Select 384MHz H-PLL
    * 7: Configure MAC#2 for RMII/NCSI
    * 6: Configure MAC#1 for RMII/NCSI
    * 5: No VGA BIOS ROM
    * 4: Boot using 32bit SPI address mode
    * 3:2: Select 16MB VGA memory
    * 1:0: Boot from SPI flash memory
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Tested-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466744305-23163-4-git-send-email-andrew@aj.id.au
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Marcin Krzeminski ]
  * [c7cd0a6] m25p80: Replace JEDEC ID masking with function.
    Instead of always reading and comparing jededc ID,
    replace it by function.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Message-id: 1466755631-25201-2-git-send-email-marcin.krzeminski@nokia.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e3ba6cd] m25p80: Make a table for JEDEC ID.
    Since it is now longer than 4. This work based on Pawel Lenkow
    changes and the kernel SPI framework.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-3-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e02b3bf] m25p80: Allow more than four banks.
    Allow to have more than four 16MiB regions for bigger flash devices.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-4-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [9964674] m25p80: Introduce COLLECTING_VAR_LEN_DATA state.
    Some flash allows to stop read at any time.
    Allow framework to support this.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-5-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [30467af] m25p80: Add additional flash commands:
    Page program 4byte/quad and erase 32K sectors 4 bytes.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-6-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [7a69c10] m25p80: Introduce quad and equad modes.
    Quad and Equad modes for Spansion and Macronix flash devices.
    This commit also includes modification and new command to manipulate
    quad mode (status registers and dedicated commands).
    This work is based on Pawel Lenkow work.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-7-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [d9cc870] m25p80: Introduce configuration registers.
    Configuration registers for Spansion and Macronix devices.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-8-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [cf6f1ef] m25p80: Fast read commands family changes.
    Support for Spansion and Macronix flashes.
    Additionally Numonyx(Micron) moved from default
    in fast read commands family. Also moved fast read
    command decoding to functions.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-9-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [dadb2f9] m25p80: New flash devices.
    Macronix: mx66u51235f and mx66u1g45g
    Micron: mt25ql01g and mt25qu01g
    Spansion: s25fs512s and s70fs01gs
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1466755631-25201-10-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [3830c7a] m25p80: Fix WINBOND fast read command handling.
    This commit fix obvious bug in WINBOND command handling.
    Datasheet states that default dummy cycles is 8 so fix it.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Message-id: 1466755631-25201-11-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [4d9be25] hw/net/eepro100.c: Don't use cpu_to_*w() and *_to_cpup()
    Don't use cpu_to_*w() and *_to_cpup() to do byte-swapped loads
    and stores; instead use ld*_p() and st*_p() which correctly handle
    misaligned accesses.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com <mailto:dmitry@daynix.com>>
    Message-id: 1466097446-981-2-git-send-email-peter.maydell@linaro.org
  * [6960bfc] hw/net/rtl8139.c: Don't use *_to_cpup()
    Don't use *_to_cpup() to do byte-swapped loads; instead use
    ld*_p() which correctly handle misaligned accesses.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com <mailto:dmitry@daynix.com>>
    Message-id: 1466097446-981-3-git-send-email-peter.maydell@linaro.org
  * [4071887] hw/net/rocker: Don't use *_to_cpup()
    Don't use *_to_cpup() to do byte-swapped loads; instead use
    ld*_p() which correctly handle misaligned accesses.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com <mailto:dmitry@daynix.com>>
    Message-id: 1466097446-981-4-git-send-email-peter.maydell@linaro.org
  * [7542d3e] hw/net/virtio-net.c: Don't use *_to_cpup()
    Don't use *_to_cpup() to do byte-swapped loads; instead use
    ld*_p() which correctly handle misaligned accesses.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com <mailto:dmitry@daynix.com>>
    Message-id: 1466097446-981-5-git-send-email-peter.maydell@linaro.org
  * [14e60aa] hw/net/e1000: Don't use *_to_cpup()
    Don't use *_to_cpup() to do byte-swapped loads; instead use
    ld*_p() which correctly handle misaligned accesses.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com <mailto:dmitry@daynix.com>>
    Message-id: 1466097446-981-6-git-send-email-peter.maydell@linaro.org

  [ Fam Zheng ]
  * [0d0437a] macio: Use blk_drain instead of blk_drain_all.
    We only care about the associated backend, so blk_drain is more
    appropriate here.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Message-id: 20160612065603.21911-1-famz@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>

  [ Richard Henderson ]
  * [fdc997e] target-alpha: Avoid gcc 6.1 werror for linux-user.
    Using gcc 6.1 for alpha-linux-user target we see the following build error:
    .../target-alpha/translate.c: In function ‘in_superpage’:
    .../target-alpha/translate.c:454:52: error: self-comparison always evaluates to true [-Werror=tautological-compare]
                 && addr >> TARGET_VIRT_ADDR_SPACE_BITS == addr >> 63);
    Reported-by: Pranith Kumar <bobby.prani@gmail.com>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Message-id: 1466192793-2559-1-git-send-email-rth@twiddle.net
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Lieven ]
  * [ca1ee3d] net: fix qemu_announce_self not emitting packets
    commit fefe2a78 accidently dropped the code path for injecting
    raw packets. This feature is needed for sending gratuitous ARPs
    after an incoming migration has completed. The result is increased
    network downtime for vservers where the network card is not virtio-net
    with the VIRTIO_NET_F_GUEST_ANNOUNCE feature.
    Fixes: fefe2a78abde932e0f340b21bded2c86def1d242
    Cc: qemu-stable@nongnu.org
    Cc: hongyang.yang@easystack.cn
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Prasad J Pandit ]
  * [d88d3a0] net: mipsnet: check transmit buffer size before sending.
    When processing MIPSnet I/O port write operation, it uses a
    transmit buffer tx_buffer[MAX_ETH_FRAME_SIZE=1514]. Two indices
    's->tx_written' and 's->tx_count' are used to control data written
    to this buffer. If the two were to be equal before writing, it'd
    lead to an OOB write access beyond tx_buffer. Add check to avoid it.
    Reported-by: Li Qiang <qiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Ashijeet Acharya ]
  * [7e84495] Change net/socket.c to use socket_*() functions.
    Use socket_*() functions from include/qemu/sockets.h instead of
    listen()/bind()/connect()/parse_host_port(). socket_*() fucntions are
    QAPI based and this patch  performs this api conversion since
    everything will be using QAPI based sockets in the future. Also add a
    helper function socket_address_to_string() in util/qemu-sockets.c
    which returns the string representation of socket address. Thetask was
    listed on http://wiki.qemu.org/BiteSizedTasks page.
    Signed-off-by: Ashijeet Acharya <ashijeetacharya@gmail.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ David Vrabel ]
  * [46fe8be] rtl8139: save/load RxMulOk counter (again)
    Commit 9d29cdeaaca3a0383af764000b71492c4fc67c6e (rtl8139: port
    TallyCounters to vmstate) introduced in incompatibility in the v4
    format as it omitted the RxOkMul counter.
    There are presumably no users that were impacted by the v4 to v4'
    breakage, so increase the save version to 5 and re-add the field,
    keeping backward compatibility with v4'.
    We can't have a field conditional on the section version in
    vmstate_tally_counters since this version checked would not be the
    section version (but the version defined in this structure).  So, move
    all the fields into the main state structure.
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ KarimAllah Ahmed ]
  * [c508277] vmxnet3: Fix reading/writing guest memory specially when behind an IOMMU.
    When a PCI device lives behind an IOMMU, it should use 'pci_dma_*' family of
    functions when any transfer from/to guest memory is required while
    'cpu_physical_memory_*' family of functions completely bypass any MMU/IOMMU in
    the system.
    vmxnet3 in some places was using 'cpu_physical_memory_*' family of functions
    which works fine with the default QEMU setup where IOMMU is not enabled but
    fails miserably when IOMMU is enabled. This commit converts all such instances
    in favor of 'pci_dma_*'
    Cc: Dmitry Fleytman <dmitry@daynix.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: qemu-devel@nongnu.org
    Cc: Anthony Liguori <aliguori@amazon.com>
    Signed-off-by: KarimAllah Ahmed <karahmed@amazon.de>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Pranith Kumar ]
  * [aa4b04a] misc/aspeed_scu: Fix build error caused by missing header.
    Tracing configurations error out currently as follows:
    /home/travis/build/pranith/qemu/hw/misc/aspeed_scu.c: In function ‘aspeed_scu_read’:
    /home/travis/build/pranith/qemu/hw/misc/aspeed_scu.c:130:9: error: implicit declaration of function ‘qemu_log_mask’ [-Werror=implicit-function-declaration]
    /home/travis/build/pranith/qemu/hw/misc/aspeed_scu.c:130:9: error: nested extern declaration of ‘qemu_log_mask’ [-Werror=nested-externs]
    /home/travis/build/pranith/qemu/hw/misc/aspeed_scu.c:130:23: error: ‘LOG_GUEST_ERROR’ undeclared (first use in this function)
    /home/travis/build/pranith/qemu/hw/misc/aspeed_scu.c:130:23: note: each undeclared identifier is reported only once for each function it appears in
    /home/travis/build/pranith/qemu/hw/misc/aspeed_scu.c: In function ‘aspeed_scu_write’:
    /home/travis/build/pranith/qemu/hw/misc/aspeed_scu.c:154:23: error: ‘LOG_GUEST_ERROR’ undeclared (first use in this function)
    This is caused by a missing header file. Fix it.
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Message-id: 20160627215304.821-1-bobby.prani@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Stefan Hajnoczi ]
  * [17c42b1] Revert "virtio: sync the dataplane vring state to the virtqueue before virtio_save"
    This reverts commit 10a06fd65f667a972848ebbbcac11bdba931b544.
    Dataplane has used the same virtqueue code as non-dataplane since
    commits e24a47c5b73e04f94030e2daa356c7582aebfca2 ("virtio-scsi: do not
    use vring in dataplane") and 03de2f527499ae0c6d16a379665d072345254f2c
    ("virtio-blk: do not use vring in dataplane").  It is no longer
    necessary to stop dataplane in order to sync state since there is no
    duplicated virtqueue state.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Pavel Butsykin <pbutsykin@virtuozzo.com>
    Message-id: 1466503331-9831-1-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [5fa78b2] dma-helpers: dma_blk_io() cancel support.
    Attempting to cancel a dma_blk_io() request causes an abort(3):
      void bdrv_aio_cancel(BlockAIOCB *acb)
      {
          ...
          while (acb->refcnt > 1) {
              if (acb->aiocb_info->get_aio_context) {
                  aio_poll(acb->aiocb_info->get_aio_context(acb), true);
              } else if (acb->bs) {
                  aio_poll(bdrv_get_aio_context(acb->bs), true);
              } else {
                  abort();
              }
          }
          ...
      }
    This happens because DMAAIOCB->bs is NULL and
    dma_aiocb_info.get_aio_context() is also NULL.
    This patch trivially implements dma_aiocb_info.get_aio_context() by
    fetching the DMAAIOCB->ctx field.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466451417-27988-1-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [8441986] virtio-blk: add VirtIOBlockConf->num_queues.
    The num_queues field is always 1 for the time being.  A later patch will
    make it a configurable device property so that multiqueue can be
    enabled.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466511196-12612-2-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [e21737a] virtio-blk: multiqueue batch notify.
    The batch notification BH needs to know which virtqueues to notify when
    multiqueue is enabled.  Use a bitmap to track the virtqueues with
    pending notifications.
    At this point there is only one virtqueue so hard-code virtqueue index
    0.  A later patch will switch to real virtqueue indices.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466511196-12612-3-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [b234cdd] virtio-blk: tell dataplane which vq to notify.
    Let the virtio_blk_data_plane_notify() caller decide which virtqueue to
    notify.  This will allow the function to be used with multiqueue.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466511196-12612-4-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [edaffd9] virtio-blk: associate request with a virtqueue.
    Multiqueue requires that each request knows to which virtqueue it
    belongs.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466511196-12612-5-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [30d8bf6] virtio-blk: live migrate s->rq with multiqueue.
    Add a field for the virtqueue index when migrating the s->rq request
    list.  The new field is only needed when num_queues > 1.  Existing QEMUs
    are unaffected by this change and therefore virtio-blk migration stays
    compatible.
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466511196-12612-6-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [51b04ac] virtio-blk: dataplane multiqueue support.
    Monitor ioeventfds for all virtqueues in the device's AioContext.  This
    is not true multiqueue because requests from all virtqueues are
    processed in a single IOThread.  In the future it will be possible to
    use multiple IOThreads when the QEMU block layer supports multiqueue.
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466511196-12612-7-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [2f27059] virtio-blk: add num-queues device property.
    Multiqueue virtio-blk can be enabled as follows:
      qemu -device virtio-blk-pci,num-queues=8
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466511196-12612-8-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Peter Maydell ]
  * [b7a5112] hw/sh4/sh_pci.c: Use ldl_le_p() and stl_le_p()
    Use ldl_le_p() and stl_le_p() instead of le32_to_cpup() and
    cpu_to_le32w(); the former handle misaligned addresses and don't
    need casts, and the latter are deprecated.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Acked-by: Aurelien Jarno <aurelien@aurel32.net>
    Message-id: 1465575021-3774-1-git-send-email-peter.maydell@linaro.org
  * [92fe2ba] configure: Improve usermode relocation linker option probe.
    The probe we do to determine what flags to use to make the usermode
    executables use a non-default text address has some flaws:
     * we run it even if we're not building the user binaries
     * we don't expect "ld --verbose" to fail
    The combination of these two results in a harmless but
    ugly "ld: unknown option: --verbose" message when running
    configure on OSX.
    Improve the probe to only run when we need it and to fail
    nicely when even the backstop 'ld --verbose' approach fails.
    Reported-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefan Weil <sw@weilnetz.de>
    Message-id: 1466287502-18730-2-git-send-email-pmaydell@chiark.greenend.org.uk
  * [7dd929d] configure: Make AVX2 test robust to non-ELF systems.
    The AVX2 optimization test assumes that the object format
    is ELF and the system has the readelf utility. If this isn't
    true then configure might fail or emit a warning (since in
    a pipe "foo | bar >/dev/null 2>&1" does not redirect the
    stderr of foo, only of bar). Adjust the check so that if
    we don't have readelf or don't have an ELF object then we
    just don't enable the AVX2 optimization.
    Reported-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefan Weil <sw@weilnetz.de>
    Message-id: 1466287502-18730-3-git-send-email-pmaydell@chiark.greenend.org.uk
  * [d7f3040] cputlb: don't cpu_abort() if guest tries to execute outside RAM or RAM.
    In get_page_addr_code(), if the guest program counter turns out not to
    be in ROM or RAM, we can't handle executing from it, and we call
    cpu_abort(). This results in the message
      qemu: fatal: Trying to execute code outside RAM or ROM at 0x08000000
    followed by a guest register dump, and then QEMU dumps core.
    This situation happens in one of two cases:
     (1) a guest kernel bug, where it jumped off into nowhere
     (2) a user command line mistake, where they tried to run an image for
         board A on a QEMU model of board B, or where they didn't provide
         an image at all, and QEMU executed through a ROM or RAM full of
         NOP instructions and then fell off the end
    In either case, a core dump of QEMU itself is entirely useless, and
    only confuses users into thinking that this is a bug in QEMU rather
    than a bug in the guest or a problem with their command line. (This
    is a variation on the general idea that we shouldn't assert() on
    something the user can accidentally provoke.)
    Replace the cpu_abort() with something that explains the situation
    a bit better and exits QEMU without dumping core.
    (See LP:1062220 for several examples of confused users.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson  <rth@twiddle.net>
    Message-id: 1466442425-11885-1-git-send-email-peter.maydell@linaro.org

  [ Denis V. Lunev ]
  * [e370ad9] doc: sync help description for --trace with man for qemu.1
    [s/descriprion/description/ in commit message as suggested by Eric Blake
    <eblake@redhat.com>.
    --Stefan]
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1466174654-30130-2-git-send-email-den@openvz.org
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [eeb2b8f] doc: move text describing --trace to specific .texi file.
    This text will be included to qemu-nbd/qemu-img mans in the next patches.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1466174654-30130-3-git-send-email-den@openvz.org
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [e9e0bb2] trace: move qemu_trace_opts to trace/control.c.
    The patch also creates trace_opt_parse() helper in trace/control.c to reuse
    this code in next patches for qemu-nbd and qemu-io.
    The patch also makes trace_init_events() static, as this call is not used
    outside the module anymore.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1466174654-30130-4-git-send-email-den@openvz.org
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [e9a8085] trace: enable tracing in qemu-io.
    Moving trace_init_backends() into trace_opt_parse() is not possible. This
    should be called after daemonize() in vl.c.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1466174654-30130-5-git-send-email-den@openvz.org
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [39ca463] trace: enable tracing in qemu-nbd.
    Please note, trace_init_backends() must be called in the final process,
    i.e. after daemonization. This is necessary to keep tracing thread in
    the proper process.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1466174654-30130-6-git-send-email-den@openvz.org
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1098513] qemu-img: move common options parsing before commands processing.
    This is necessary to enable creation of common qemu-img options which will
    be specified before command.
    The patch also enables '-V' alias to '--version' (exactly like in other
    block utilities) and documents this change.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1466174654-30130-7-git-send-email-den@openvz.org
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [06a1e0c] trace: enable tracing in qemu-img.
    The command will work this way:
        qemu-img --trace "qcow2*" create -f qcow2 1.img 64G
    [Quote "qcow2*" to protect against shell globbing as suggested by Eric
    Blake <eblake@redhat.com>.
    --Stefan]
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1466174654-30130-8-git-send-email-den@openvz.org
    Suggested by: Daniel P. Berrange <berrange@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Lluís Vilanova ]
  * [9c15e70] trace: [*-user] Add events to trace guest syscalls in syscall emulation mode.
    Adds two events to trace syscalls in syscall emulation mode (*-user):
    * guest_user_syscall: Emitted before the syscall is emulated; contains
      the syscall number and arguments.
    * guest_user_syscall_ret: Emitted after the syscall is emulated;
      contains the syscall number and return value.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Message-id: 146651712411.12388.10024905980452504938.stgit@fimbulvetr.bsc.es
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Niels de Vos ]
  * [947eb20] block/gluster: add support for SEEK_DATA/SEEK_HOLE.
    GlusterFS 3.8 contains support for SEEK_DATA and SEEK_HOLE. This makes
    it possible to detect sparse areas in files.
    Signed-off-by: Niels de Vos <ndevos@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>

  [ Peter Lieven ]
  * [38f8d5e] block/nfs: refuse readahead if cache.direct is on
    if we open a NFS export with disabled cache we should refuse
    the readahead feature as it will cache data inside libnfs.
    If a export was opened with readahead enabled it should
    futher not be allowed to disable the cache while running.
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1463662083-20814-2-git-send-email-pl@kamp.de
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [d99b26c] block/nfs: add support for libnfs pagecache
    upcoming libnfs will have support for a read cache that can
    significantly help to speed up requests since libnfs by design
    circumvents the kernel cache.
    Example:
     qemu -cdrom nfs://127.0.0.1/iso/my.iso?pagecache=1024
    The pagecache parameters takes the maximum amount of pages to
    cache.  A page in libnfs is always the NFS_BLKSIZE which is
    4KB.
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1463662083-20814-3-git-send-email-pl@kamp.de
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ Denis V. Lunev ]
  * [ff04198] mirror: fix trace_mirror_yield_in_flight usage in mirror_iteration()
    trace_mirror_yield_in_flight accepts 2nd arguments in sectors while here
    we pass chunks instead.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1466518157-27140-1-git-send-email-den@openvz.org
    CC: Jeff Cody <jcody@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ Jeff Cody ]
  * [7eac868] block/gluster: add support for selecting debug logging level.
    This adds commandline support for the logging level of the
    gluster protocol driver, output to stdout.  The option is 'debug',
    e.g.:
    -drive filename=gluster://192.168.15.180/gv2/test.qcow2,debug=9
    Debug levels are 0-9, with 9 being the most verbose, and 0 representing
    no debugging output.  The default is the same as it was before, which
    is a level of 4.  The current logging levels defined in the gluster
    source are:
        0 - None
        1 - Emergency
        2 - Alert
        3 - Critical
        4 - Error
        5 - Warning
        6 - Notice
        7 - Info
        8 - Debug
        9 - Trace
    (From: glusterfs/logging.h)
    Reviewed-by: Niels de Vos <ndevos@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ John Snow ]
  * [1761295] mirror: clarify mirror_do_read return code
    mirror_do_read intends to return the number of sectors processed after
    the starting sector, without regard to how many sectors were processed
    before the starting sector due to alignment.
    Clean up the comments and code to hopefully illustrate this more clearly.
    This also fixes an issue in initialization where if the mirror buffer size
    is initialized to smaller than the number of sectors being requested for
    transfer, we report back an incorrectly large number to the caller.
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466625064-11280-2-git-send-email-jsnow@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [e480888] mirror: limit niov to IOV_MAX elements, again.
    During the refactor of mirror_iteration in e5b43573,
    we regressed the fix introduced in cae98cb8.
    This patch re-adds IOV_MAX checking to cases where we
    aren't checking alignment (and size) already.
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466625064-11280-3-git-send-email-jsnow@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [ccee3d8] iotests: add small-granularity mirror test.
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1466625064-11280-4-git-send-email-jsnow@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ Changlong Xie ]
  * [b48100c] blockjob: assert(cb) when create job.
    Callback for block job should always exist
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Suggested-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1466672241-22485-2-git-send-email-xiecl.fnst@cn.fujitsu.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [15d6729] mirror: fix misleading comments
    s/target bs/to_replace/, also we check to_replace bs is not
    blocked in qmp_drive_mirror() not here
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1466672241-22485-3-git-send-email-xiecl.fnst@cn.fujitsu.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ Efimov Vasily ]
  * [e8ad4d1] ide: move headers to include folder.
    The patch moves "hw/ide/achi.h", "hw/ide/pci.h" and "hw/ide/internal.h" headers
    to corresponding folders inside "include" folder alike other Qemu headers.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [873b4d3] pcspk: convert "pit" property type from ptr to link.
    The speaker device needs pointer to ISA PIT device to operate. But according to
    qdev-properties.h, properties of pointer type should be avoided. It seems a
    link type property is a good substitution.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [936a644] vmport: identify vmport type by macro TYPE_VMPORT.
    Currently vmport device is identified by the string literal. Using a
    preprocessor alias instead is preferable.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1a004c7] pflash: make TYPE_CFI_PFLASH0{1,2} macros public
    qdev API can be used to create CFI pflash devices despite existance of helper
    functions. The type name is needed in course of such creation. Using the
    preprocessor alias instead of the string literal itself is preferable.
    The patch makes the aliases accessible through the header.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [401f2f3] Q35: implement property interfece to several parameters.
    During creation of Q35 instance several parameters are set using direct access.
    It violates Qemu device model. Correctly, the parameters should be handled as
    object properties.
    The patch adds four link type properties for fields:
    mch.ram_memory
    mch.pci_address_space
    mch.system_memory
    mch.address_space_io
    And, it adds two size type properties for fields:
    mch.below_4g_mem_size
    mch.above_4g_mem_size
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8d1c715] pc_q35: configure Q35 instance using properties.
    Currently, Q35 instance is configured using direct access to structure fields.
    The patch uses property interface to set the fields.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [3115b9e] pckbd: handle A20 IRQ as GPIO.
    The i8042 device has outgouing IRQ line A20. Currently the IRQ is referenced
    by a pointer which normally is set during machine initialization. The pointer
    is never changed at runtime. So common GPIO model can be applied to A20 IRQ
    line. Note that checking for IRQ to be connected as in previous version
    of code is not required because qemu_set_irq will do it.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [d812b3d] port92: handle A20 IRQ as GPIO.
    The port92 device has outgouing IRQ line A20. Currently the IRQ is referenced
    by a pointer which normally is set during machine initialization. The
    pointer is never changed at runtime. Hence, common GPIO model can be applied
    to A20 IRQ line. Note that checking for IRQ to be connected as in
    previous version of code is not required qemu_set_irq will do it.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f2dd8eb] ICH9 SMB: make TYPE_ICH9_SMB_DEVICE macro public.
    ICH9 SMB bridge can be created using qdev API despite existence of helper
    function. The type name is needed for such creation. Using a preprocessor
    alias instead the string type name itself is preferable.
    The patch makes the alias accessible through the header.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [f62efca] ich9: call ich9_lpc_update_pic for disabled pirqs.
    An asserted pirq can be disabled and the corresponding GSIs
    should then go down to 0.  However, because of the conditional in
    ich9_lpc_update_by_pirq, the legacy 8259 pin could remain stuck to 1.
    Reviewed-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [a94dd6a] ich9: clean up ich9_lpc_update_pic/ich9_lpc_update_apic and callers.
    Make ich9_lpc_update_pic take care only of GSIs 0-15, and
    ich9_lpc_update_apic take care only of GSIs 16-23.  Assert
    that they are called with the correct GSI indices.
    Reviewed-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [35a6b23] ich9: unify pic and ioapic IRQ vectors
    ich9->pic and ich9->ioapic differ for the first 16 GSIs (because
    ich9->pic is wired to 8259+IOAPIC but ich9->ioapic is wired to
    IOAPIC only).  However, ich9->ioapic is never used for the first
    16 GSIs, so the two vectors can be merged.
    Reviewed-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Efimov Vasily ]
  * [f999c0d] ICH9 LPC: handle GSI as qdev GPIO.
    The ICH9 LPC bridge has 24 output IRQs connected to GSI. Currently the IRQs are
    referenced by pointers. The pointers are initialized at startup by direct access
    to the structure fields. This violates Qemu device model.
    The patch makes the IRQs handling to use GPIO model.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [ea5d425] ICH9 LPC: move call of isa_bus_irqs to 'realize' method.
    The isa_bus_irqs function initializes ISA bus IRQ array pointer with specified
    value.
    Previously the ICH9 LPC bridge model did not have its own IRQs but
    only IRQ pointer cache. And same GSI were used for ISA bus and other sources
    behind the bridge (PCI, SCI). Hence, the pc_q35_init was only possible place to
    setup both ISA bus IRQs and the bridge IRQ cache.
    As a result, the call of isa_bus_irqs was made from pc_q35_init.
    Now the ICH9 LPC bridge has its own output IRQs which are connected to GSI. The
    output IRQs are already used to route IRQs from PCI and SCI.
    The patch makes the ICH9 LPC bridge output IRQs to used for ISA bus too.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [2502630] isa: introduce wrapper isa_connect_gpio_out.
    Currently a direct access to the device structure field is used to connect ISA
    device IRQ to the bus. GPIO access should be used instead if possible.
    The patch adds wrapper isa_connect_gpio_out. The function connects specified
    output GPIO to specified ISA IRQ.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [3638439] MC146818 RTC: add GPIO access to output IRQ.
    The MC146818 RTC device has output IRQ line. Currently the corresponding field
    is only accessible through direct access. Such access violates Qemu model.
    The patch makes the field accessible through GPIO. It also updates the setting
    of the IRQ during initialization.
    Signed-off-by: Efimov Vasily <real@ispras.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [cc96677] scsi: esp: fix migration.
    Commit 926cde5 ("scsi: esp: make cmdbuf big enough for maximum CDB size",
    2016-06-16) changed the size of a migrated field.  Split it in two
    parts, and only migrate the second part in a new vmstate version.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [33df7bf] vnc: generalize "VNC server running on ..." message.
    The message is useful whenever the user specifies "-vnc to=XX".
    Move it to ui/vnc.c.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Lin Ma ]
  * [be968c7] pci-assign: Move "Invalid ROM" error message to pci-assign-load-rom.c.
    In function pci_assign_dev_load_option_rom, For those pci devices don't
    have 'rom' file under sysfs or if loading ROM from external file, The
    function returns NULL, and won't set the passed 'size' variable.
    In these 2 cases, qemu still reports "Invalid ROM" error message, Users
    may be confused by it.
    Signed-off-by: Lin Ma <lma@suse.com>
    Message-Id: <1466010327-22368-1-git-send-email-lma@suse.com>
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Crosthwaite ]
  * [8642c1b] target-*: Don't redefine cpu_exec()
    This function needs to be converted to QOM hook and virtualised for
    multi-arch. This rename interferes, as cpu-qom will not have access
    to the renaming causing name divergence. This rename doesn't really do
    anything anyway so just delete it.
    Signed-off-by: Peter Crosthwaite <crosthwaite.peter@gmail.com>
    Message-Id: <69bd25a8678b8b31b91cd9760c777bed1aafb44e.1437212383.git.crosthwaite.peter@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Peter Crosthwaite <crosthwaitepeter@gmail.com>

  [ Peter Lieven ]
  * [0ead931] iscsi: fix assertion in is_sector_request_lun_aligned.
    Commit 94d047a added an assertion the the request alignment check.
    This introduced 2 issues:
     a) A off-by-one error since a request of BDRV_REQUEST_MAX_SECTORS
        is actually allowed.
     b) The bdrv_get_block_status call in the read path to check the allocation
        status requests up to INT_MAX sectors which triggers the assertion.
    Fixes: 94d047a35bf663e28f8fef137544d8ea78165add
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Message-Id: <1466414680-18383-1-git-send-email-pl@kamp.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [807464d] serial: make tsr_retry unsigned.
    It can never become negative; reflect this in the type of the field
    and simplify the conditions.
    Tested-by: Bret Ketchum <bcketchum@gmail.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [bce933b] serial: simplify tsr_retry reset.
    Move common code outside the if, and reset tsr_retry even in loopback mode.
    Right now it cannot become non-zero, but it will be possible as soon as
    we start respecting the baud rate.
    Tested-by: Bret Ketchum <bcketchum@gmail.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [b0585e7] serial: separate serial_xmit and serial_watch_cb
    serial_xmit starts transmission of whatever is in the transmitter
    register, THR or FIFO; serial_watch_cb is a wrapper around it and is
    only used as a qemu_chr_fe_add_watch callback.
    Tested-by: Bret Ketchum <bcketchum@gmail.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [6f1de6b] char: change qemu_chr_fe_add_watch to return unsigned
    g_source_attach can return any value between 1 and UINT_MAX if you let
    QEMU run long enough.  However, qemu_chr_fe_add_watch can also return
    a negative errno value when the device is disconnected or does not
    support chr_add_watch.  Change it to return zero to avoid overloading
    these values.
    Fix the cadence_uart which asserts in this case (easily obtained with
    "-serial pty").
    Tested-by: Bret Ketchum <bcketchum@gmail.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [a1df76d] serial: remove watch on reset.
    Otherwise, this can cause serial_xmit to be entered with LSR.TEMT=0,
    which is invalid and causes an assertion failure.
    Reported-by: Bret Ketchum <bcketchum@gmail.com>
    Tested-by: Bret Ketchum <bcketchum@gmail.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [9f34a35] serial: reinstate watch after migration.
    Otherwise, a serial port can get stuck if it is migrated while flow control
    is in effect.
    Tested-by: Bret Ketchum <bcketchum@gmail.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [6d356c8] ich9: implement ACPI_EN register.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8f242cb] ich9: implement SCI_IRQ_SEL register.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Andrew Jones ]
  * [66f37d3] vl: smp_parse: fix regression.
    Commit 0544edd88a "vl: smp_parse: cleanups" regressed any -smp
    config that left either cores or threads unspecified, and specified
    a topology supporting more cpus than the given online cpus. The
    correct way to calculate the missing parameter would be to use
    maxcpus, but it's too late to change that now. Restore the old
    way, which is to calculate it with the online cpus (as is still
    done), but then, if the result is zero, just set it to one.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Message-Id: <1466526844-29245-1-git-send-email-drjones@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [634d39b] vhost-user-test: fix g_cond_wait_until compat implementation.
    This fixes compilation with glib versions up to 2.30, such
    as the one in CentOS 6.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [25f0d2a] vhost-user: disable chardev handlers on close.
    This otherwise causes a use-after-free if network backend cleanup
    is performed before character device cleanup.
    Cc: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Marc-André Lureau ]
  * [c1111a2] char: clean up remaining chardevs when leaving.
    This helps to remove various chardev resources leaks when leaving qemu.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <1466105332-10285-2-git-send-email-marcandre.lureau@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [3fa27a9] socket: add listen feature.
    Add a flag to tell whether the channel socket is listening.
    Signed-off-by: Marc-AndrÃ© Lureau <marcandre.lureau@redhat.com>
    Message-Id: <1466105332-10285-3-git-send-email-marcandre.lureau@redhat.com>
    Acked-by: Daniel P. Berrange <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
  * [74b6ce4] socket: unlink unix socket on remove
    qemu leaves unix socket files behind when removing a listening chardev
    or leaving. qemu could clean that up, even if doing so isn't race-free.
    Fixes:
    https://bugzilla.redhat.com/show_bug.cgi?id=1347077
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <1466105332-10285-4-git-send-email-marcandre.lureau@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Greg Kurz ]
  * [8c1cd71] MAINTAINERS: update email address for Greg Kurz.
    While here, also add a section for the tree I use for 9p.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Acked-by: Cédric Le Goater <clg@kaod.org>
    Acked-by: Cédric Le Goater <clg@fr.ibm.com>
    Acked-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Message-id: 146617410554.7281.1733165006203821878.stgit@bahia.lan
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Markus Armbruster ]
  * [297e800] MAINTAINERS: Remove Blue Swirl leftovers.
    Blue hasn't been active in the QEMU project for a long time.  Drop his
    last MAINTAINERS entries.
    As per Paolo's recommendation, downgrade status of "BSD user" from
    Maintained to Orphan since the FreeBSD guys effectively forked it, and
    "SPARC target" from Maintained to Odd Fixes, since we still have the
    overall TCG maintainer looking after it.
    I'm leaving Checkpatch's status at Odd Fixes.  Calling it Maintained
    wouldn't be wrong, but I'm not comfortable upgrading it while nobody
    is willing to have his name nailed to the thing.
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Eric Blake ]
  * [ba4dba5] json-streamer: Don't leak tokens on incomplete parse.
    Valgrind complained about a number of leaks in
    tests/check-qobject-json:
    ==12657==    definitely lost: 17,247 bytes in 1,234 blocks
    All of which had the same root cause: on an incomplete parse,
    we were abandoning the token queue without cleaning up the
    allocated data within each queue element.  Introduced in
    commit 95385fe, when we switched from QList (which recursively
    frees contents) to g_queue (which does not).
    We don't yet require glib 2.32 with its g_queue_free_full(),
    so open-code it instead.
    CC: qemu-stable@nongnu.org
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1463608012-12760-1-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [ff5394a] qobject: Correct JSON lexer grammar comments.
    Fix the regex comments describing what we parse as JSON.  No change
    to the lexer itself, just to the comments:
    - The "" and '' string construction was missing alternation between
    different escape sequences
    - The construction for numbers forgot to handle optional leading '-'
    - The construction for numbers was grouped incorrectly so that it
    didn't permit '0.1'
    - The construction for numbers forgot to mark the exponent as optional
    - No mention that our '' string and "\'" are JSON extensions
    - No mention of our %d and related extensions when constructing JSON
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465526889-8339-2-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    [Eric's regexp simplification squashed in]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [01fb8e1] checkpatch: There is no qemu_strtod()
    Maybe there should be; but until there is, we should not flag
    strtod() calls as something to replaced with qemu_strtod().
    We also lack qemu_strtof() and qemu_strtold(), but as no one
    has been using strtof() or strtold(), it's not worth complicating
    the regex for them.
    (Ironically, I had to use 'git commit -n' since checkpatch uses
    TAB indents, in violation of its own recommendations.)
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465526889-8339-3-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [9b4e38f] qapi: Fix crash on missing alternate member of QAPI struct.
    If a QAPI struct has a mandatory alternate member which is not
    present on input, the input visitor reports an error for the
    missing alternate without setting the discriminator, but the
    cleanup code for the struct still tries to use the dealloc
    visitor to clean up the alternate.
    Commit dbf11922 changed visit_start_alternate to set *obj to NULL
    when an error occurs, where it was previously left untouched.
    Thus, before the patch, the dealloc visitor is blindly trying to
    cleanup whatever branch corresponds to (*obj)->type == 0 (that is,
    QTYPE_NONE, because *obj still pointed to zeroed memory), which
    selects the default branch of the switch and sets an error, but
    this second error is ignored by the way the dealloc visitor is
    used; but after the patch, the attempt to switch dereferences NULL.
    When cleaning up after a partial object parse, we specifically
    check for !*obj after visit_start_struct() (see gen_visit_object());
    doing the same for alternates fixes the crash. Enhance the testsuite
    to give coverage for both missing struct and missing alternate
    members.
    Also add an abort - we expect visit_start_alternate() to either set an
    error or to set (*obj)->type to a valid QType that corresponds to
    actual user input, and QTYPE_NONE should never be reachable from valid
    input.  Had the abort() been in place earlier, we might have noticed
    the dealloc visitor dereferencing bogus zeroed memory prior to when
    commit dbf11922 forced our hand by setting *obj to NULL and causing a
    fault.
    Test case:
    {'execute':'blockdev-add', 'arguments':{'options':{'driver':'raw'}}}
    The choice of 'driver':'raw' selects a BlockdevOptionsGenericFormat
    struct, which has a mandatory 'file':'BlockdevRef' in QAPI.  Since
    'file' is missing as a sibling of 'driver', this should report a
    graceful error rather than fault.  After this patch, we are back to:
    {"error": {"class": "GenericError", "desc": "Parameter 'file' is missing"}}
    Generated code in qapi-visit.c changes as:
    |@@ -2444,6 +2444,9 @@ void visit_type_BlockdevRef(Visitor *v,
    |     if (err) {
    |         goto out;
    |     }
    |+    if (!*obj) {
    |+        goto out_obj;
    |+    }
    |     switch ((*obj)->type) {
    |     case QTYPE_QDICT:
    |         visit_start_struct(v, name, NULL, 0, &err);
    |@@ -2459,10 +2462,13 @@ void visit_type_BlockdevRef(Visitor *v,
    |     case QTYPE_QSTRING:
    |         visit_type_str(v, name, &(*obj)->u.reference, &err);
    |         break;
    |+    case QTYPE_NONE:
    |+        abort();
    |     default:
    |         error_setg(&err, QERR_INVALID_PARAMETER_TYPE, name ? name : "null",
    |                    "BlockdevRef");
    |     }
    |+out_obj:
    |     visit_end_alternate(v);
    Reported by Kashyap Chamarthy <kchamart@redhat.com>
    CC: qemu-stable@nongnu.org
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1466012271-5204-1-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Tested-by: Kashyap Chamarthy <kchamart@redhat.com>
    [Commit message tweaked]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [fec0fc0] range: Create range.c for code that should not be inline
    g_list_insert_sorted_merged() is rather large to be an inline
    function; move it to its own file.  range_merge() and
    ranges_can_merge() can likewise move, as they are only used
    internally.  Also, it becomes obvious that the condition within
    range_merge() is already satisfied by its caller, and that the
    return value is not used.
    The diffstat is misleading, because of the copyright boilerplate.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1464712890-14262-2-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [7c47959] qapi: Simplify use of range.h.
    Calling our function g_list_insert_sorted_merged is a misnomer,
    since we are NOT writing a glib function.  Furthermore, we are
    making every caller pass the same comparator function of
    range_merge(): any caller that would try otherwise would break
    in weird ways since our internal call to ranges_can_merge() is
    hard-coded to operate only on ranges, rather than paying
    attention to the caller's comparator.
    Better is to fix things so that callers don't have to care about
    our internal comparator, by picking a function name and updating
    the parameter type away from a gratuitous use of void*, to make
    it obvious that we are operating specifically on a list of ranges
    and not a generic list.  Plus, refactoring the code here will
    make it easier to plug a memory leak in the next patch.
    range_compare() is now internal only, and moves to the .c file.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1464712890-14262-3-git-send-email-eblake@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [db486cc] qapi: Fix memleak in string visitors on int lists.
    Commit 7f8f9ef1 introduced the ability to store a list of
    integers as a sorted list of ranges, but when merging ranges,
    it leaks one or more ranges.  It was also using range_get_last()
    incorrectly within range_compare() (a range is a start/end pair,
    but range_get_last() is for start/len pairs), and will also
    mishandle a range ending in UINT64_MAX (remember, we document
    that no range covers 2**64 bytes, but that ranges that end on
    UINT64_MAX have end < begin).
    The whole merge algorithm was rather complex, and included
    unnecessary passes over data within glib functions, and enough
    indirection to make it hard to easily plug the data leaks.
    Since we are already hard-coding things to a list of ranges,
    just rewrite the thing to open-code the traversal and
    comparisons, by making the range_compare() helper function give
    us an answer that is easier to use, at which point we avoid the
    need to pass any callbacks to g_list_*(). Then by reusing
    range_extend() instead of duplicating effort with range_merge(),
    we cover the corner cases correctly.
    Drop the now-unused range_merge() and ranges_can_merge().
    Doing this lets test-string-{input,output}-visitor pass under
    valgrind without leaks.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1464712890-14262-4-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    [Comment hoisted out of loop]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Paolo Bonzini ]
  * [8a0b4de] pcspk: fix KVM.
    The link property that was added to the pcspk device has the wrong type:
    it is only correct for TCG and for KVM's userspace or split irqchip
    options.  The default KVM option (fully in-kernel irqchip) breaks
    because it uses a PIT whose type is a sibling of TYPE_I8254.
    Fixes: 873b4d3f0571a1e415cf089a67a230ea8a12d059
    Tested-by: Peter Lieven <pl@kamp.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1467298657-6588-1-git-send-email-pbonzini@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [ddf31aa] linux-user: Fix compilation when F_SETPIPE_SZ isn't defined.
    Older kernels don't have F_SETPIPE_SZ and F_GETPIPE_SZ (in
    particular RHEL6's system headers don't define these). Add
    ifdefs so that we can gracefully fall back to not supporting
    those guest ioctls rather than failing to build.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-id: 1467304429-21470-1-git-send-email-peter.maydell@linaro.org

  [ Alex Williamson ]
  * [4d3fc4f] vfio/pci: Fix VGA quirks.
    Commit 2d82f8a3cdb2 ("vfio/pci: Convert all MemoryRegion to dynamic
    alloc and consistent functions") converted VFIOPCIDevice.vga to be
    dynamically allocted, negating the need for VFIOPCIDevice.has_vga.
    Unfortunately not all of the has_vga users were converted, nor was
    the field removed from the structure.  Correct these oversights.
    Reported-by: Peter Maloney <peter.maloney@brockmann-consult.de>
    Tested-by: Peter Maloney <peter.maloney@brockmann-consult.de>
    Fixes: 2d82f8a3cdb2 ("vfio/pci: Convert all MemoryRegion to dynamic alloc and consistent functions")
    Fixes: https://bugs.launchpad.net/qemu/+bug/1591628
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

  [ Chen Fan ]
  * [325ae8d] vfio: add pcie extended capability support.
    For vfio pcie device, we could expose the extended capability on
    PCIE bus. due to add a new pcie capability at the tail of the chain,
    in order to avoid config space overwritten, we introduce a copy config
    for parsing extended caps. and rebuild the pcie extended config space.
    Signed-off-by: Chen Fan <chen.fan.fnst@cn.fujitsu.com>
    Tested-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

  [ Alex Williamson ]
  * [e37dac0] vfio/pci: Hide SR-IOV capability.
    The kernel currently exposes the SR-IOV capability as read-only
    through vfio-pci.  This is sufficient to protect the host kernel, but
    has the potential to confuse guests without further virtualization.
    In particular, OVMF tries to size the VF BARs and comes up with absurd
    results, ending with an assert.  There's not much point in adding
    virtualization to a read-only capability, so we simply hide it for
    now.  If the kernel ever enables SR-IOV virtualization, we should
    easily be able to test it through VF BAR sizing or explicit flags.
    Testing whether we should parse extended capabilities is also pulled
    into the function to keep these assumptions in one place.
    Tested-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

  [ Alexey Kardashevskiy ]
  * [d22d895] memory: Add MemoryRegionIOMMUOps.notify_started/stopped callbacks.
    The IOMMU driver may change behavior depending on whether a notifier
    client is present.  In the case of POWER, this represents a change in
    the visibility of the IOTLB, for other drivers such as intel-iommu and
    future AMD-Vi emulation, notifier support is not yet enabled and this
    provides the opportunity to flag that incompatibility.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Tested-by: Peter Xu <peterx@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    [new log & extracted from [PATCH qemu v17 12/12] spapr_iommu, vfio, memory: Notify IOMMU about starting/stopping listening]
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

  [ Alex Williamson ]
  * [3cb3b15] intel_iommu: Throw hw_error on notify_started.
    We don't currently support the MemoryRegionIOMMUOps notifier, so throw
    an error should a device require it.
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Tested-by: Peter Xu <peterx@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

  [ Benjamin Herrenschmidt ]
  * [8eeb330] ppc: Add a bunch of hypervisor SPRs to Book3s.
    We don't give them a KVM reg number yet as no current KVM version
    supports HV mode.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: SPRs AMOR,DAWR,DARWX were already included in commit f401dd32cb8e9]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [8853693] ppc: Update LPCR definitions.
    Includes all the bits up to ISA 2.07
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [4b3fc37] ppc: Use a helper to filter writes to LPCR.
    This handles filtering bits based on what is implemented by a
    given architecture version. We also use it to copy to LPCR
    some of the relevant 970 HID4 bits.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [d1dbe37] ppc: Fix conditions for delivering external interrupts to a guest.
    External interrupts can bypass the MSR_EE test if they occur in guest
    mode and LPES0 is clear. In that case they are directed to the hypervisor
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [b378bb0] ppc: Enforce setting MSR:EE,IR and DR when MSR:PR is set.
    The architecture specifies that any instruction that sets MSR:PR will also
    set MSR:EE, IR and DR.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [4b236b6] ppc: Initial HDEC support.
    The current behaviour isn't completely right, as for the DEC, we
    don't properly re-arm when wrapping around, but I will fix this
    in a separate patch.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [635dff2] ppc: LPCR is a HV resource.
    Don't allow access in guest mode
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [f2b70fd] ppc: Print HSRR0/HSRR1 in "info registers"
    They are generally useful when debugging HV mode stuff
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Thomas Huth ]
  * [6cc09e2] hw/ppc/spapr: Add some missing hcall function set strings.
    Add "hcall-sprg0" (for H_SET_SPRG0), "hcall-copy" (for H_PAGE_INIT)
    and "hcall-debug" (for H_LOGICAL_CI_LOAD/STORE) to the property
    "ibm,hypertas-functions" to indicate that we support these hypercalls.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Greg Kurz ]
  * [dde35bc] spapr: fix write-past-end-of-array error in cpu core device init code.
    This fixes a potential QEMU crash introduced by commit 3b542549661.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [ff461b8] spapr: Restore support for older PowerPC CPU cores.
    Introduction of core based CPU hotplug for PowerPC sPAPR didn't
    add support for 970 and POWER5+ based core types. Add support for
    the same.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Aaron Larson ]
  * [a36848f] target-ppc: Eliminate redundant and incorrect function booke206_page_size_to_tlb.
    Eliminate redundant and incorrect booke206_page_size_to_tlb function
    from ppce500_spin.c in preference to previously existing but newly
    exported definition from e500.c
    Defect analysis:
    The booke206_page_size_to_tlb function in e500.c was updated in commit
    2bd9543 "ppc: booke206: use MAV=2.0 TSIZE definition, fix 4G pages" to
    reflect a change in the definition of MAS1_TSIZE_SHIFT from 8
    (corresponding to a min TLB page size of 4kb) to a value of 7 (TLB
    page size 2k).  The booke206_page_size_to_tlb() function defined in
    ppce500_spin.c was never updated to reflect the change in
    MAS1_TSIZE_SHIFT.
    In http://lists.nongnu.org/archive/html/qemu-ppc/2016-06/msg00533.html,
    Scott Wood suggested this "root cause" explanation:
    SW> The patch that changed MAS1_TSIZE_SHIFT from 8 to 7 was around the
    SW> same time as the patch that added this code, which is probably why
    SW> adjusting it got missed.  Commit 2bd9543cd3 did update the
    SW> equivalent code in ppce500_mpc8544ds.c, which now resides in
    SW> hw/ppc/e500.c and has been changed to not assume a power-of-2
    SW> size.  The ppce500_spin version should be eliminated.
    Signed-off-by: Aaron Larson <alarson@ddci.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [4322e8c] ppc: Fix 64K pages support in full emulation.
    We were always advertising only 4K & 16M. Additionally the code wasn't
    properly matching the page size with the PTE content, which meant we
    could potentially hit an incorrect PTE if the guest used multiple sizes.
    Finally, honor the CPU capabilities when decoding the size from the SLB
    so we don't try to use 64K pages on 970.
    This still doesn't add support for MPSS (Multiple Page Sizes per Segment)
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [clg: fixed checkpatch.pl errors
          commits 61a36c9b5a12 and 1114e712c998 reworked the hpte code
          doing insertion/removal in hw/ppc/spapr_hcall.c. The hunks
          modifying these areas were removed. ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [161deaf] ppc/xics: Rename existing xics to xics_spapr.
    The common class doesn't change, the KVM one is sPAPR specific. Rename
    variables and functions to xics_spapr.
    Retain the type name as "xics" to preserve migration for existing sPAPR
    guests.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Nikunj A Dadhania <nikunj@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [9c7027b] ppc/xics: Move SPAPR specific code to a separate file.
    Leave the core ICP/ICS logic in xics.c and move the top level
    class wrapper, hypercall and RTAS handlers to xics_spapr.c
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [add cpu.h in xics_spapr.c, move set_nr_irqs and set_nr_servers to
     xics_spapr.c]
    Signed-off-by: Nikunj A Dadhania <nikunj@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [1cbd222] ppc/xics: Implement H_IPOLL using an accessor.
    None of the other presenter functions directly mucks with the
    internal state, so don't do it there either.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Nikunj A Dadhania <nikunj@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [27f2458] ppc/xics: Replace "icp" with "xics" in most places.
    The "ICP" is a different object than the "XICS". For historical reasons,
    we have a number of places where we name a variable "icp" while it contains
    a XICSState pointer. There *is* an ICPState structure too so this makes
    the code really confusing.
    This is a mechanical replacement of all those instances to use the name
    "xics" instead. There should be no functional change.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [spapr_cpu_init has been moved to spapr_cpu_core.c, change there]
    Signed-off-by: Nikunj A Dadhania <nikunj@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Aaron Larson ]
  * [9e19693] target-ppc: gen_pause for instructions: yield, mdoio, mdoom, miso.
    Call gen_pause for all "or rx,rx,rx" encodings other nop.  This
    provides a reasonable implementation for yield, and a better
    approximation for mdoio, mdoom, and miso.  The choice to pause for all
    encodings !=0 leverages the PowerISA admonition that the reserved
    encodings might change program priority, providing a slight "future
    proofing".
    Signed-off-by: Aaron Larson <alarson@ddci.com>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [470f215] spapr: Restore support for 970MP and POWER8NVL CPU cores.
    Introduction of core based CPU hotplug for PowerPC sPAPR didn't
    add support for 970MP and POWER8NVL based core types. Add support for
    the same.
    While we are here, add support for explicit specification of POWER5+_v2.1
    core type.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Greg Kurz ]
  * [8e758de] spapr: drop reference on child object during core realization.
    When a core is being realized, we create a child object for each thread
    of the core.
    The child is first initialized with object_initialize() which sets its ref
    count to 1, and then added to the core with object_property_add_child()
    which bumps the ref count to 2.
    When the core gets released, object_unparent() decreases the ref count to 1,
    and we g_free() the object: we hence loose the reference on an unfinalized
    object. This is likely to cause random crashes.
    Let's drop the extra reference as soon as we don't need it, after the
    thread is added to the core.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [f11235b] spapr: do proper error propagation in spapr_cpu_core_realize_child()
    This patch changes spapr_cpu_core_realize_child() to have a local error
    pointer and use error_propagate() as it is supposed to be done.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [8a1eb71] spapr: drop duplicate variable in spapr_core_release()
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Igor Mammedov ]
  * [13f5e80] qmp: fix spapr example of query-hotpluggable-cpus.
    27393c33 qapi: keep names in 'CpuInstanceProperties' in sync with struct CPUCore
    added -id suffix to property names but forgot to fix example in qmp-commands.hx
    Fix example to have 'core-id' instead of 'core' to match current code
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Peter Krempa <pkrempa@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Gerd Hoffmann ]
  * [4502780] ipxe: add new roms to BLOBS.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [8df42d8] build: add pc-bios to config-host.mak deps
    ... so configure re-runs on pc-bios updates such as new pxe roms.
    Needed because configure symlinks the prebuilt roms from src
    into build tree.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Greg Kurz ]
  * [8d85a22] 9p: don't include <sys/uio.h>
    The <sys/uio.h> system header doesn't exist on all host platforms. Code
    should include "qemu/osdep.h" instead to avoid build breaks on plafforms
    that don't define CONFIG_IOVEC (like win32, if it is to support 9p one day).
    Acked-by: Cédric Le Goater <clg@kaod.org>
    Acked-by: Michael Fritscher <michael@fritscher.net>
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
  * [b05528b] 9p: synth: drop v9fs_ prefix.
    To have shorter lines and be consistent with other fs devices.
    Acked-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Greg Kurz <groug@kaod.org>

  [ Alexander Shopov ]
  * [9a48e36] Added Bulgarian translation.
    Signed-off-by: Alexander Shopov <ash@kambanaria.org>
    Message-id: 20160626105922.40590-2-ash@kambanaria.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Samuel Thibault ]
  * [972487b] slirp: Split get_dns_addr.
    Separate get_dns_addr into get_dns_addr_cached and get_dns_addr_resolv_conf
    to make conversion to IPv6 easier.
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
  * [1d17654] slirp: Add dns6 resolution.
    This makes get_dns_addr address family-agnostic, thus allowing to add the
    IPv6 case.
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
  * [ef763fa] slirp: Support link-local DNS addresses.
    They look like fe80::%eth0
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    ---
    Changes since last submission:
    - fix windows build
  * [f7725df] slirp: Add RDNSS advertisement.
    This adds the RDNSS option to IPv6 router advertisements, so that the guest
    can autoconfigure the DNS server address.
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    ---
    Changes since last submission:
    - Disable on windows, until we have support for it

  [ Thomas Huth ]
  * [e585706] slirp: Remove superfluous memset() calls from the TFTP code.
    Commit fad7fb9ccd8013ea03  ("Add IPv6 support to the TFTP code")
    refactored some common code for preparing the mbuf into a new
    function called tftp_prep_mbuf_data(). One part of this common
    code is to do a "memset(m->m_data, 0, m->m_size);" for the related
    buffer first. However, at two spots, the memset() was not removed
    from the calling function, so it currently done twice in these code
    paths. Thus let's delete these superfluous memsets in the calling
    functions now.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
  * [7b14399] slirp: Add support for stateless DHCPv6.
    Provide basic support for stateless DHCPv6 (see RFC 3736) so
    that guests can also automatically boot via IPv6 with SLIRP
    (for IPv6 network booting, see RFC 5970 for details).
    Tested with:
        qemu-system-ppc64 -nographic -vga none -boot n -net nic \
            -net user,ipv6=yes,ipv4=no,tftp=/path/to/tftp,bootfile=ppc64.img
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>

  [ Gerd Hoffmann ]
  * [8692aa2] seabios: update submodule from 1.9.1 to 1.9.3
    git shortlog
    ============
    Alex Williamson (1):
          fw/pci: Add support for mapping Intel IGD via QEMU
    Haozhong Zhang (1):
          fw/msr_feature_control: add support to set MSR_IA32_FEATURE_CONTROL
    Kevin O'Connor (1):
          build: fix .text section address alignment
    Marcel Apfelbaum (1):
          fw/pci: add Q35 S3 support
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Richard W.M. Jones ]
  * [4e04ab6] bios: Add fast variant of SeaBIOS for use with -kernel on x86.
    This commit adds a fast variant of SeaBIOS called 'bios-fast.bin'.
    It's designed to be the fastest (also the smallest, but that's not the
    main aim) SeaBIOS that is just enough to boot a Linux kernel using the
    -kernel option on i686 and x86_64.
    This commit does not modify the -kernel option to use this.  You have
    to specify it by doing something like this:
      -kernel vmlinuz -bios bios-fast.bin
    Signed-off-by: Richard W.M. Jones <rjones@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [ea996eb] seabios: update 128k config.
    Turn off mpt-scsi and bootsplash to keep size below 128k.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [6e03a28] seabios: update binaries from 1.9.1 to 1.9.3.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Daniel P. Berrange ]
  * [8b7cdba] crypto: fix handling of iv generator hash defaults.
    When opening an existing LUKS volume, if the iv generator is
    essiv, then the iv hash algorithm is mandatory to provide. We
    must report an error if it is omitted in the cipher mode spec,
    not silently default to hash 0 (md5).  If the iv generator is
    not essiv, then we explicitly ignore any iv hash algorithm,
    rather than report an error, for compatibility with dm-crypt.
    When creating a new LUKS volume, if the iv generator is essiv
    and no iv hsah algorithm is provided, we should default to
    using the sha256 hash.
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
  * [8cbfc94] crypto: rename OUT to out in xts test to avoid clash on MinGW.
    On MinGW one of the system headers already has "OUT" defined
    which causes a compile failure of the test suite. Rename the
    test suite var to 'out' to avoid this clash
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
  * [0c16c05] crypto: switch hash code to use nettle/gcrypt directly.
    Currently the internal hash code is using the gnutls hash APIs.
    GNUTLS in turn is wrapping either nettle or gcrypt. Not only
    were the GNUTLS hash APIs not added until GNUTLS 2.9.10, but
    they don't expose support for all the algorithms QEMU needs
    to use with LUKS.
    Address this by directly wrapping nettle/gcrypt in QEMU and
    avoiding GNUTLS's extra layer of indirection. This gives us
    support for hash functions on a much wider range of platforms
    and opens up ability to support more hash functions. It also
    avoids a GNUTLS bug which would not correctly handle hashing
    of large data blocks if int != size_t.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Gerd Hoffmann ]
  * [5ec7d09] xen: fix ram init regression.
    Commit "8156d48 pc: allow raising low memory via max-ram-below-4g
    option" causes a regression on xen, because it uses a different
    memory split.
    This patch initializes max-ram-below-4g to zero and leaves the
    initialization to the memory initialization functions.  That way
    they can pick different default values (max-ram-below-4g is zero
    still) or use the user supplied value (max-ram-below-4g is non-zero).
    Also skip the whole ram split calculation on Xen.  xen_ram_init()
    does its own split calculation anyway so it is superfluous, also
    this way xen_ram_init can actually see whenever max-ram-below-4g
    is zero or not.
    Reported-by: Anthony PERARD <anthony.perard@citrix.com>
    Tested-by: Anthony PERARD <anthony.perard@citrix.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Marcel Apfelbaum ]
  * [1b04cc8] hw/ppc: realize the PCI root bus as part of mac99 init.
    Mac99's PCI root bus is not part of a host bridge,
    realize it manually.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [b86eacb] hw/pci: delay bus_master_enable_region initialization.
    Skip bus_master_enable region creation on PCI device init
    in order to be sure the IOMMU device (if present) would
    be created in advance. Add this memory region at machine_done time.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [bf8d492] q35: allow dynamic sysbus.
    Allow adding sysbus devices with -device on Q35.
    At first Q35 will support only intel-iommu to be added this way,
    however the command line will support all sysbus devices.
    Mark with 'cannot_instantiate_with_device_add_yet' the ones
    causing immediate problems (e.g. crashes).
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [621d983] hw/iommu: enable iommu with -device.
    Use the standard '-device intel-iommu' to create the IOMMU device.
    The legacy '-machine,iommu=on' can still be used.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [10d01f7] machine: remove iommu property.
    Since iommu devices can be created with '-device' there is
    no need to keep iommu as machine and mch property.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Markus Armbruster ]
  * [97a83ec] piix: Set I440FXState member pci_info.w32 in one place.
    Range pci_info.w32 records the location of the PCI hole.
    It's initialized to empty when QOM zeroes I440FXState.  That's a fine
    value for a still unknown PCI hole.
    i440fx_init() sets pci_info.w32.begin = below_4g_mem_size.  Changes
    the PCI hole from empty to [below_4g_mem_size, UINT64_MAX].  That's a
    bogus value.
    i440fx_pcihost_initfn() sets pci_info.end = IO_APIC_DEFAULT_ADDRESS.
    Since i440fx_init() ran already, this changes the PCI hole to
    [below_4g_mem_size, IO_APIC_DEFAULT_ADDRESS-1].  That's the correct
    value.
    Setting the bounds of the PCI hole in two separate places is
    confusing, and begs the question whether the bogus intermediate value
    could be used by something, or what would happen if we somehow managed
    to realize an i440FX device without having run the board init function
    i440fx_init() first.
    Avoid the confusion by setting the (constant) upper bound along with
    the lower bound in i440fx_init().
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
  * [01c9742] pc: Eliminate PcPciInfo.
    PcPciInfo has two (ill-named) members: Range w32 is the PCI hole, and
    w64 is the PCI64 hole.
    Three users:
    * I440FXState and MCHPCIState have a member PcPciInfo pci_info, but
      only pci_info.w32 is actually used.  This is confusing.  Replace by
      Range pci_hole.
    * acpi_build() uses auto PcPciInfo pci_info to forward both PCI holes
      from acpi_get_pci_info() to build_dsdt().  Replace by two variables
      Range pci_hole, pci_hole64.  Rename acpi_get_pci_info() to
      acpi_get_pci_holes().
    PcPciInfo is now unused; drop it.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>

  [ Cornelia Huck ]
  * [0830c96] virtio: revert host notifiers to old semantics.
    The host notifier rework tried both to unify host notifiers across
    transports and plug a possible hole during host notifier
    re-assignment. Unfortunately, this meant a change in semantics that
    breaks vhost and iSCSI+dataplane.
    As the minimal fix, keep the common host notifier code but revert
    to the old semantics so that we have time to figure out the proper
    fix.
    Fixes: 6798e245a3 ("virtio-bus: common ioeventfd infrastructure")
    Reported-by: Peter Lieven <pl@kamp.de>
    Reported-by: Jason Wang <jasowang@redhat.com>
    Reported-by: Marc-André Lureau <marcandre.lureau@gmail.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Jason Wang <jasowang@redhat.com>
    Tested-by: Jason Wang <jasowang@redhat.com>
    Tested-by: Peter Lieven <pl@kamp.de>

  [ Michael S. Tsirkin ]
  * [62cee1a] virtio: set low features early on load
    virtio migrates the low 32 feature bits twice, the first copy is there
    for compatibility but ever since
    019a3edbb25f1571e876f8af1ce4c55412939e5d: ("virtio: make features 64bit
    wide") it's ignored on load. This is wrong since virtio_net_load tests
    self announcement and guest offloads before the second copy including
    high feature bits is loaded.  This means that self announcement, control
    vq and guest offloads are all broken after migration.
    Fix it up by loading low feature bits: somewhat ugly since high and low
    bits become out of sync temporarily, but seems unavoidable for
    compatibility.  The right thing to do for new features is probably to
    test the host features, anyway.
    Fixes: 019a3edbb25f1571e876f8af1ce4c55412939e5d
        ("virtio: make features 64bit wide")
    Cc: qemu-stable@nongnu.org
    Reported-by: Robin Geuze <robing@transip.nl>
    Tested-by: Robin Geuze <robing@transip.nl>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [6c66682] Revert "virtio-net: unbreak self announcement and guest offloads after migration"
    This reverts commit 1f8828ef573c83365b4a87a776daf8bcef1caa21.
    Cc: qemu-stable@nongnu.org
    Reported-by: Robin Geuze <robing@transip.nl>
    Tested-by: Robin Geuze <robing@transip.nl>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Peter Maydell ]
  * [d317091] linux-user: Make semihosting heap/stack fields abi_ulongs.
    The fields in the TaskState heap_base, heap_limit and stack_base
    are all guest addresses (representing the locations of the heap
    and stack for the guest binary), so they should be abi_ulong
    rather than uint32_t. (This only in practice affects ARM AArch64
    since all the other semihosting implementations are 32-bit.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Desnogues <laurent.desnogues@gmail.com>
    Message-id: 1466783381-29506-2-git-send-email-peter.maydell@linaro.org
  * [f566641] target-arm/arm-semi.c: Fix SYS_HEAPINFO for 64-bit guests.
    SYS_HEAPINFO is one of the few semihosting calls which has to write
    values back into a parameter block in memory.  When we added
    support for 64-bit semihosting we updated the code which reads from
    the parameter block to read 64-bit words but forgot to change the
    code that writes back into the block. Update it to treat the
    block as a set of words of the appropriate width for the guest.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1466783381-29506-3-git-send-email-peter.maydell@linaro.org
  * [a1777f7] memory: Provide memory_region_init_rom()
    Provide a new helper function memory_region_init_rom() for memory
    regions which are read-only (and unlike those created by
    memory_region_init_rom_device() don't have special behaviour
    for writes). This has the same behaviour as calling
    memory_region_init_ram() and then memory_region_set_readonly()
    (which is what we do today in boards with pure ROMs) but is a
    more easily discoverable API for the purpose.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1467122287-24974-2-git-send-email-peter.maydell@linaro.org
  * [a7aeb5f] imx: Use memory_region_init_rom() for ROMs.
    The imx boards were all incorrectly creating ROMs using
    memory_region_init_rom_device() with a NULL ops pointer. This
    will cause QEMU to abort if the guest tries to write to the
    ROM. Switch to the new memory_region_init_rom() instead.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1467122287-24974-3-git-send-email-peter.maydell@linaro.org
  * [39e0b03] memory: Assert that memory_region_init_rom_device() ops aren't NULL.
    It doesn't make sense to pass a NULL ops argument to
    memory_region_init_rom_device(), because the effect will
    be that if the guest tries to write to the memory region
    then QEMU will segfault. Catch the bug earlier by sanity
    checking the arguments to this function, and remove the
    misleading documentation that suggests that passing NULL
    might be sensible.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1467122287-24974-4-git-send-email-peter.maydell@linaro.org

  [ Andrey Smirnov ]
  * [a198616] armv7m_nvic: Use qemu_get_cpu(0) instead of current_cpu.
    Starting QEMU with -S results in current_cpu containing its initial
    value of NULL. It is however possible to connect to such QEMU instance
    and query various CPU registers, one example being CPUID, and doing that
    results in QEMU segfaulting.
    Using qemu_get_cpu(0) seem reasonable enough given that ARMv7M
    architecture is a single core architecture.
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Ard Biesheuvel ]
  * [5d636e2] hw/arm/virt: mark the PCIe host controller as DMA coherent in the DT.
    Since QEMU performs cacheable accesses to guest memory when doing DMA
    as part of the implementation of emulated PCI devices, guest drivers
    should use cacheable accesses as well when running under KVM. Since this
    essentially means that emulated PCI devices are DMA coherent, set the
    'dma-coherent' DT property on the PCIe host controller DT node.
    This brings the DT description into line with the ACPI description,
    which already marks the PCI bridge as cache coherent (see commit
    bc64b96c984abf).
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Message-id: 1467134090-5099-1-git-send-email-ard.biesheuvel@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Alistair Francis ]
  * [ae2923b] bitops: Add MAKE_64BIT_MASK macro.
    Add a macro that creates a 64bit value which has length number of ones
    shifted across by the value of shift.
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 9773244aa1c8c26b8b82cb261d8f5dd4b7b9fcf9.1467053537.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [1599121] register: Add Register API.
    This API provides some encapsulation of registers and factors out some
    common functionality to common code. Bits of device state (usually MMIO
    registers) often have all sorts of access restrictions and semantics
    associated with them. This API allows you to define what those
    restrictions are on a bit-by-bit basis.
    Helper functions are then used to access the register which observe the
    semantics defined by the RegisterAccessInfo struct.
    Some features:
    Bits can be marked as read_only (ro field)
    Bits can be marked as write-1-clear (w1c field)
    Bits can be marked as reserved (rsvd field)
    Reset values can be defined (reset)
    Bits can be marked clear on read (cor)
    Pre and post action callbacks can be added to read and write ops
    Verbose debugging info can be enabled/disabled
    Useful for defining device register spaces in a data driven way. Cuts
    down on a lot of the verbosity and repetition in the switch-case blocks
    in the standard foo_mmio_read/write functions.
    Also useful for automated generation of device models from hardware
    design sources.
    Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 40d62c7e1bf6e63bb4193ec46b15092a7d981e59.1467053537.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [0b73c9b] register: Add Memory API glue.
    Add memory io handlers that glue the register API to the memory API.
    Just translation functions at this stage. Although it does allow for
    devices to be created without all-in-one mmio r/w handlers.
    This patch also adds the RegisterInfoArray struct, which allows all of
    the individual RegisterInfo structs to be grouped into a single memory
    region.
    Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: f7704d8ac6ac0f469ed35401f8151a38bd01468b.1467053537.git.alistair.francis@xilinx.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Crosthwaite ]
  * [6842045] register: Define REG and FIELD macros.
    Define some macros that can be used for defining registers and fields.
    The REG32 macro will define A_FOO, for the byte address of a register
    as well as R_FOO for the uint32_t[] register number (A_FOO / 4).
    The FIELD macro will define FOO_BAR_MASK, FOO_BAR_SHIFT and
    FOO_BAR_LENGTH constants for field BAR in register FOO.
    Finally, there are some shorthand helpers for extracting/depositing
    fields from registers based on these naming schemes.
    Usage can greatly reduce the verbosity of device code.
    The deposit and extract macros (eg FIELD_EX32, FIELD_DP32  etc.) can be
    used to generate extract and deposits without any repetition of the name
    stems.
    Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Message-id: bbd87a3c03b1f173b1ed73a6d502c0196c18a72f.1467053537.git.alistair.francis@xilinx.com
    [ EI Changes:
      * Add Deposit macros
    ]
    Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Crosthwaite ]
  * [49e14dd] register: QOMify.
    QOMify registers as a child of TYPE_DEVICE. This allows registers to
    define GPIOs.
    Define an init helper that will do QOM initialisation.
    Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 2545f71db26bf5586ca0c08a3e3cf1b217450552.1467053537.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [a742295] register: Add block initialise helper.
    Add a helper that will scan a static RegisterAccessInfo Array
    and populate a container MemoryRegion with registers as defined.
    Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Message-id: 347b810b2799e413c98d5bbeca97bcb1557946c3.1467053537.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Alistair Francis ]
  * [034c2e6] dma: Add Xilinx Zynq devcfg device model.
    Add a minimal model for the devcfg device which is part of Zynq.
    This model supports DMA capabilities and interrupt generation.
    Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 83df49d8fa2d203a421ca71620809e4b04754e65.1467053537.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Crosthwaite ]
  * [f4b9953] xilinx_zynq: Connect devcfg to the Zynq machine model.
    Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 85f39c9a13569b1113dacac3b952b0af54fc1260.1467053537.git.alistair.francis@xilinx.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cédric Le Goater ]
  * [7673bb4] ssi: change ssi_slave_init to be a realize ops.
    This enables qemu to handle late inits and report errors. All the SSI
    slave routine names were changed accordingly. Code was modified to
    handle errors when possible (m25p80 and ssi-sd)
    Tested with the m25p80 slave object.
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-2-git-send-email-clg@kaod.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Paolo Bonzini ]
  * [cace7b8] m25p80: do not put iovec on the stack.
    When doing a read-modify-write cycle, QEMU uses the iovec after returning
    from blk_aio_pwritev.  m25p80 puts the iovec on the stack of blk_aio_pwritev's
    caller, which causes trouble in this case.  This has been a problem
    since commit 243e6f6 ("m25p80: Switch to byte-based block access",
    2016-05-12) started doing writes at a smaller granularity than 512 bytes.
    In principle however it could have broken before when using -drive
    if=mtd,cache=none on a disk with 4K native sectors.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-3-git-send-email-clg@kaod.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [b68cb06] m25p80: avoid out of bounds accesses
    s->cur_addr can be made to point outside s->storage, either by
    writing a value >= 128 to s->ear (because s->ear * MAX_3BYTES_SIZE
    is a signed integer and sign-extends into the 64-bit cur_addr),
    or just by writing an address beyond the size of the flash being
    emulated.  Avoid the sign extension to make the code cleaner, and
    on top of that mask s->cur_addr to s->size.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-4-git-send-email-clg@kaod.org
    Reviewed by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [b7f480c] m25p80: change cur_addr to 32 bit integer.
    The maximum amount of storage that can be addressed by the m25p80 command
    set is 4 GiB.  However, cur_addr is currently a 64-bit integer.  To avoid
    further problems related to sign extension of signed 32-bit integer
    expressions, change cur_addr to a 32 bit integer.  Preserve migration
    format by adding a dummy 4-byte field in place of the (big-endian)
    high four bytes in the formerly 64-bit cur_addr field.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-5-git-send-email-clg@kaod.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [73bce51] m25p80: qdev-ify drive property.
    This allows specifying the property via -drive if=none and creating
    the flash device with -device.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-6-git-send-email-clg@kaod.org
    [clg: added an extra fix for sabrelite_init()
          keeping the test on flash_dev did not seem necessary. ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cédric Le Goater ]
  * [7c1c69b] ast2400: add SMC controllers (FMC and SPI)
    The Aspeed AST2400 soc includes a static memory controller for the BMC
    which supports NOR, NAND and SPI flash memory modules. This controller
    has two modes : the SMC for the legacy interface which supports only
    one module and the FMC for the new interface which supports up to five
    modules. The AST2400 also includes a SPI only controller used for the
    host firmware, commonly called BIOS on Intel. It can be used in three
    mode : a SPI master, SPI slave and SPI pass-through
    Below is the initial framework for the SMC controller (FMC mode only)
    and the SPI controller: the sysbus object, MMIO for registers
    configuration and controls. Each controller has a SPI bus and a
    configurable number of CS lines for SPI flash slaves.
    The differences between the controllers are small, so they are
    abstracted using indirections on the register numbers.
    Only SPI flash modules are supported.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-7-git-send-email-clg@kaod.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: added one missing error_propagate]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [924ed16] ast2400: add SPI flash slaves.
    Each controller on the ast2400 has a memory range on which it maps its
    flash module slaves. Each slave is assigned a memory segment for its
    mapping that can be changed at bootime with the Segment Address
    Register. This is not supported in the current implementation so we
    are using the defaults provided by the specs.
    Each SPI flash slave can then be accessed in two modes: Command and
    User. When in User mode, accesses to the memory segment of the slaves
    are translated in SPI transfers. When in Command mode, the HW
    generates the SPI commands automatically and the memory segment is
    accessed as if doing a MMIO. Other SPI controllers call that mode
    linear addressing mode.
    For this purpose, we are adding below each crontoller an array of
    structs gathering for each SPI flash module, a segment rank, a
    MemoryRegion to handle the memory accesses and the associated SPI
    slave device, which should be a m25p80.
    Only the User mode is supported for now but we are preparing ground
    for the Command mode. The framework is sufficient to support Linux.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-8-git-send-email-clg@kaod.org
    [PMM: Use g_new0() rather than g_malloc0()]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [e1ad9bc] ast2400: create SPI flash slaves.
    A set of SPI flash slaves is attached under the flash controllers of
    the palmetto platform. "n25q256a" flash modules are used for the BMC
    and "mx25l25635e" for the host. These types are common in the
    OpenPower ecosystem.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467138270-32481-9-git-send-email-clg@kaod.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cao jin ]
  * [5178ecd] pci_register_bar: cleanup
    place relevant code tegother, make the code easier to read
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Markus Armbruster ]
  * [58e19e6] log: Clean up misuse of Range for -dfilter.
    Range encodes an integer interval [a,b] as { begin = a, end = b + 1 },
    where a \in [0,2^64-1] and b \in [1,2^64].  Thus, zero end is to be
    interpreted as 2^64.
    The implementation of -dfilter (commit 3514552) uses Range
    differently: it encodes [a,b] as { begin = a, end = b }.  The code
    works, but it contradicts the specification of Range in range.h.
    Switch to the specified representation.  Since it can't represent
    [0,UINT64_MAX], we have to reject that now.  Add a test for it.
    While we're rejecting anyway: observe that we reject -dfilter LOB..UPB
    where LOB > UPB when UPB is zero, but happily create an empty Range
    when it isn't.  Reject it then, too, and add a test for it.
    While there, add a positive test for the problematic upper bound
    UINT64_MAX.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [a0efbf1] range: Eliminate direct Range member access.
    Users of struct Range mess liberally with its members, which makes
    refactoring hard.  Create a set of methods, and convert all users to
    call them instead of accessing members.  The methods have carefully
    worded contracts, and use assertions to check them.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [6dd726a] range: Replace internal representation of Range.
    Range represents a range as follows.  Member @start is the inclusive
    lower bound, member @end is the exclusive upper bound.  Zero @end is
    special: if @start is also zero, the range is empty, else @end is to
    be interpreted as 2^64.  No other empty ranges may occur.
    The range [0,2^64-1] cannot be represented.  If you try to create it
    with range_set_bounds1(), you get the empty range instead.  If you try
    to create it with range_set_bounds() or range_extend(), assertions
    fail.  Before range_set_bounds() existed, the open-coded creation
    usually got you the empty range instead.  Open deathtrap.
    Moreover, the code dealing with the janus-faced @end is too clever by
    half.
    Dumb this down to a more pedestrian representation: members @lob and
    @upb are inclusive lower and upper bounds.  The empty range is encoded
    as @lob = 1, @upb = 0.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [58eeb83] log: Permit -dfilter 0..0xffffffffffffffff.
    Works fine since the previous commit fixed the underlying range data
    type.  Of course it filters out nothing, but so does
    0..1,2..0xffffffffffffffff, and we don't bother rejecting that either.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Igor Mammedov ]
  * [6b9c1dd] tests: acpi: add CPU hotplug testcase.
    Test with:
        -smp 2,cores=3,sockets=2,maxcpus=6
    to capture sparse APIC ID values that default
    AMD CPU has in above configuration.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Daniel P. Berrange ]
  * [9164b89] crypto: implement sha224, sha384, sha512 and ripemd160 hashes.
    Wire up the nettle and gcrypt hash backends so that they can
    support the sha224, sha384, sha512 and ripemd160 hash algorithms.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
  * [13f1243] crypto: add support for TLS priority string override.
    The gnutls default priority is either "NORMAL" (most historical
    versions of gnutls) which is a built-in label in gnutls code,
    or "@SYSTEM" (latest gnutls on Fedora at least) which refers
    to an admin customizable entry in a gnutls config file.
    Regardless of which default is used by a distro, they are both
    global defaults applying to all applications using gnutls. If
    a single application on the system needs to use a weaker set
    of crypto priorities, this potentially forces the weakness onto
    all applications. Or conversely if a single application wants a
    strong default than all others, it can't do this via the global
    config file.
    This adds an extra parameter to the tls credential object which
    allows the mgmt app / user to explicitly provide a priority
    string to QEMU when configuring TLS.
    For example, to use the "NORMAL" priority, but disable SSL 3.0
    one can now configure QEMU thus:
      $QEMU -object tls-creds-x509,id=tls0,dir=/home/berrange/qemutls,\
                    priority="NORMAL:-VERS-SSL3.0" \
            ..other args...
    If creating tls-creds-anon, whatever priority the user specifies
    will always have "+ANON-DH" appended to it, since that's mandatory
    to make the anonymous credentials work.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
  * [a1c5e94] crypto: allow default TLS priority to be chosen at build time.
    Modern gnutls can use a global config file to control the
    crypto priority settings for TLS connections. For example
    the priority string "@SYSTEM" instructs gnutls to find the
    priority setting named "SYSTEM" in the global config file.
    Latest gnutls GIT codebase gained the ability to reference
    multiple priority strings in the config file, with the first
    one that is found to existing winning. This means it is now
    possible to configure QEMU out of the box with a default
    priority of "@QEMU,SYSTEM", which says to look for the
    settings "QEMU" first, and if not found, use the "SYSTEM"
    settings.
    To make use of this facility, we introduce the ability to
    set the QEMU default priority at build time via a new
    configure argument.  It is anticipated that distro vendors
    will set this when building QEMU to a suitable value for
    use with distro crypto policy setup. eg current Fedora
    would run
     ./configure --tls-priority=@SYSTEM
    while future Fedora would run
     ./configure --tls-priority=@QEMU,SYSTEM
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Gerd Hoffmann ]
  * [3b1154f] Revert "bios: Add fast variant of SeaBIOS for use with -kernel on x86."
    This reverts commit 4e04ab6a63ebe9fb4305e7e8e49cc8b0095db8fb.
    Also remove pc-bios/bios-fast.bin.
    Commit was merged by mistake.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Igor Mammedov ]
  * [600426f] tests: add APIC.cphp and DSDT.cphp blobs.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Anton Blanchard ]
  * [158c87e] ppc: Fix xsrdpi, xvrdpi and xvrspi rounding
    xsrdpi, xvrdpi and xvrspi use the round ties away method, not round
    nearest even.
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [7093645] spapr: Ensure thread0 of CPU core is always realized first.
    During CPU core realization, we create all the thread objects and parent
    them to the core object in a loop. However, the realization of thread
    objects is done separately by walking the threads of a core using
    object_child_foreach(). With this, there is no guarantee on the order
    in which the child thread objects get realized. Since CPU device tree
    properties are currently derived from the CPU thread object, we assume
    thread0 of the core to be the representative thread of the core when
    creating device tree properties for the core. If thread0 is not the
    first thread that gets realized, then we would end up having an
    incorrect dt_id for the core and this causes hotplug failures from
    the guest.
    Fix this by realizing each thread object by walking the core's thread
    object list thereby ensuring that thread0 and other threads are always
    realized in the correct order.
    Future TODO: CPU DT nodes are per-core properties and we should
    ideally base the creation of CPU DT nodes on core objects rather than
    the thread objects.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Greg Kurz ]
  * [c4e6c42] ppc: simplify max_smt initialization in ppc_cpu_realizefn()
    kvmppc_smt_threads() returns 1 if KVM is not enabled.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Alexey Kardashevskiy ]
  * [606b549] spapr_iommu: Realloc guest visible TCE table when starting/stopping listening.
    The sPAPR TCE tables manage 2 copies when VFIO is using an IOMMU -
    a guest view of the table and a hardware TCE table. If there is no VFIO
    presense in the address space, then just the guest view is used, if
    this is the case, it is allocated in the KVM. However since there is no
    support yet for VFIO in KVM TCE hypercalls, when we start using VFIO,
    we need to move the guest view from KVM to the userspace; and we need
    to do this for every IOMMU on a bus with VFIO devices.
    This implements the callbacks for the sPAPR IOMMU - notify_started()
    reallocated the guest view to the user space, notify_stopped() does
    the opposite.
    This removes explicit spapr_tce_set_need_vfio() call from PCI hotplug
    path as the new callbacks do this better - they notify IOMMU at
    the exact moment when the configuration is changed, and this also
    includes the case of PCI hot unplug.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [318f67c] vfio: spapr: Add DMA memory preregistering (SPAPR IOMMU v2)
    This makes use of the new "memory registering" feature. The idea is
    to provide the userspace ability to notify the host kernel about pages
    which are going to be used for DMA. Having this information, the host
    kernel can pin them all once per user process, do locked pages
    accounting (once) and not spent time on doing that in real time with
    possible failures which cannot be handled nicely in some cases.
    This adds a prereg memory listener which listens on address_space_memory
    and notifies a VFIO container about memory which needs to be
    pinned/unpinned. VFIO MMIO regions (i.e. "skip dump" regions) are skipped.
    The feature is only enabled for SPAPR IOMMU v2. The host kernel changes
    are required. Since v2 does not need/support VFIO_IOMMU_ENABLE, this does
    not call it when v2 is detected and enabled.
    This enforces guest RAM blocks to be host page size aligned; however
    this is not new as KVM already requires memory slots to be host page
    size aligned.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    [dwg: Fix compile error on 32-bit host]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [f4ec5e2] vfio: Add host side DMA window capabilities.
    There are going to be multiple IOMMUs per a container. This moves
    the single host IOMMU parameter set to a list of VFIOHostDMAWindow.
    This should cause no behavioral change and will be used later by
    the SPAPR TCE IOMMU v2 which will also add a vfio_host_win_del() helper.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [2e4109d] vfio/spapr: Create DMA window dynamically (SPAPR IOMMU v2)
    New VFIO_SPAPR_TCE_v2_IOMMU type supports dynamic DMA window management.
    This adds ability to VFIO common code to dynamically allocate/remove
    DMA windows in the host kernel when new VFIO container is added/removed.
    This adds a helper to vfio_listener_region_add which makes
    VFIO_IOMMU_SPAPR_TCE_CREATE ioctl and adds just created IOMMU into
    the host IOMMU list; the opposite action is taken in
    vfio_listener_region_del.
    When creating a new window, this uses heuristic to decide on the TCE table
    levels number.
    This should cause no guest visible change in behavior.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    [dwg: Added some casts to prevent printf() warnings on certain targets
     where the kernel headers' __u64 doesn't match uint64_t or PRIx64]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [ae4de14] spapr_pci/spapr_pci_vfio: Support Dynamic DMA Windows (DDW)
    This adds support for Dynamic DMA Windows (DDW) option defined by
    the SPAPR specification which allows to have additional DMA window(s)
    The "ddw" property is enabled by default on a PHB but for compatibility
    the pseries-2.6 machine and older disable it.
    This also creates a single DMA window for the older machines to
    maintain backward migration.
    This implements DDW for PHB with emulated and VFIO devices. The host
    kernel support is required. The advertised IOMMU page sizes are 4K and
    64K; 16M pages are supported but not advertised by default, in order to
    enable them, the user has to specify "pgsz" property for PHB and
    enable huge pages for RAM.
    The existing linux guests try creating one additional huge DMA window
    with 64K or 16MB pages and map the entire guest RAM to. If succeeded,
    the guest switches to dma_direct_ops and never calls TCE hypercalls
    (H_PUT_TCE,...) again. This enables VFIO devices to use the entire RAM
    and not waste time on map/unmap later. This adds a "dma64_win_addr"
    property which is a bus address for the 64bit window and by default
    set to 0x800.0000.0000.0000 as this is what the modern POWER8 hardware
    uses and this allows having emulated and VFIO devices on the same bus.
    This adds 4 RTAS handlers:
    * ibm,query-pe-dma-window
    * ibm,create-pe-dma-window
    * ibm,remove-pe-dma-window
    * ibm,reset-pe-dma-window
    These are registered from type_init() callback.
    These RTAS handlers are implemented in a separate file to avoid polluting
    spapr_iommu.c with PCI.
    This changes sPAPRPHBState::dma_liobn to an array to allow 2 LIOBNs
    and updates all references to dma_liobn. However this does not add
    64bit LIOBN to the migration stream as in fact even 32bit LIOBN is
    rather pointless there (as it is a PHB property and the management
    software can/should pass LIOBNs via CLI) but we keep it for the backward
    migration support.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Cédric Le Goater ]
  * [1f0252e] ppc: simplify ppc_hash64_hpte_page_shift_noslb()
    The segment page shift parameter is never used. Let's remove it.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ David Gibson ]
  * [651060a] target-ppc: Correct page size decoding in ppc_hash64_pteg_search()
    The architecture specifies that when searching a PTEG for PTEs, entries
    with a page size encoding that's not valid for the current segment should
    be ignored, continuing the search.
    The current implementation does this with ppc_hash64_pte_size_decode()
    which is a very incomplete implementation of this check.  We already have
    code to do a full and correct page size decode in hpte_page_shift().
    This patch moves hpte_page_shift() so it can be used in
    ppc_hash64_pteg_search() and adjusts the latter's parameters to include
    a full SLBE instead of just a segment page shift.
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
  * [073de86] target-ppc: Simplify HPTE matching
    ppc_hash64_pteg_search() explicitly checks each HPTE's VALID and
    SECONDARY bits, then uses the HPTE64_V_COMPARE() macro to check the B field
    and AVPN.  However, a small tweak to HPTE64_V_COMPARE() means we can check
    all of these bits at once with a suitable ptem value.  So, consolidate all
    the comparisons for simplicity.
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
  * [9498686] target-ppc: Return page shift from PTEG search
    ppc_hash64_pteg_search() now decodes a PTEs page size encoding, which it
    didn't previously do.  This means we're now double decoding the page size
    because we check it int he fault path after ppc64_hash64_htab_lookup()
    returns.
    To avoid this duplication have ppc_hash64_pteg_search() and
    ppc_hash64_htab_lookup() return the page size from the PTE and use that in
    the callers instead of decoding again.
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

  [ Benjamin Herrenschmidt ]
  * [912acdf] ppc/hash64: Add proper real mode translation support.
    This adds proper support for translating real mode addresses based
    on the combination of HV and LPCR bits. This handles HRMOR offset
    for hypervisor real mode, and both RMA and VRMA modes for guest
    real mode. PAPR mode adjusts the offsets appropriately to match the
    RMA used in TCG, but we need to limit to the max supported by the
    implementation (16G).
    This includes some fixes by Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [dwg: Adjusted for differences in my version of the prereq patches]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [2c7ad80] ppc/hash64: Fix support for LPCR:ISL.
    We need to ignore the segment page size and essentially treat
    all pages as coming from a 4K segment.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [dwg: Adjusted for differences in my version of the prereq patches]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Cao jin ]
  * [b2e1fff] change pvscsi_init_msi() type to void.
    Nobody use its return value, so change the type to void.
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [290fd20] usb xhci: change msi/msix property type
    >From bit to enum OnOffAuto
    cc: Gerd Hoffmann <kraxel@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [c0f2abf] intel-hda: change msi property type
    >From uint32 to enum OnOffAuto.
    cc: Gerd Hoffmann <kraxel@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [444dd1a] mptsas: change msi property type
    >From uint32 to enum OnOffAuto, and give it a shorter name.
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [b4b4a57] megasas: change msi/msix property type
    >From bit to enum OnOffAuto.
    cc: Hannes Reinecke <hare@suse.de>
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
  * [69b205b] pci bridge dev: change msi property type
    >From bit to enum OnOffAuto.
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [1108b2f] pci: Convert msi_init() to Error and fix callers to check it
    msi_init() reports errors with error_report(), which is wrong
    when it's used in realize().
    Fix by converting it to Error.
    Fix its callers to handle failure instead of ignoring it.
    For those callers who don't handle the failure, it might happen:
    when user want msi on, but he doesn't get what he want because of
    msi_init fails silently.
    cc: Gerd Hoffmann <kraxel@redhat.com>
    cc: John Snow <jsnow@redhat.com>
    cc: Dmitry Fleytman <dmitry@daynix.com>
    cc: Jason Wang <jasowang@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    cc: Hannes Reinecke <hare@suse.de>
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Alex Williamson <alex.williamson@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
  * [afea4e1] megasas: remove unnecessary megasas_use_msi()
    megasas overwrites user configuration when msi_init fail to flag internal msi
    state, which is unsuitable. megasa_use_msi() is unnecessary, we can call
    msi_uninit() directly when unrealize, even no need to call msi_enabled() first.
    cc: Hannes Reinecke <hare@suse.de>
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [2e2aa31] mptsas: remove unnecessary internal msi state flag
    internal flag msi_in_use in unnecessary, msi_uninit() could be called
    directly, and msi_enabled() is enough to check device msi state.
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [1070048] vmxnet3: remove unnecessary internal msi state flag.
    Internal flag msi_used is unnecessary, it has the same effect as msi_enabled().
    msi_uninit() could be called directly without risk.
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Dmitry Fleytman <dmitry@daynix.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [66bf7d5] e1000e: remove unnecessary internal msi state flag.
    Internal big flag E1000E_USE_MSI is unnecessary, also is the helper
    function: e1000e_init_msi(), e1000e_cleanup_msi(), so, remove them all.
    cc: Dmitry Fleytman <dmitry@daynix.com>
    cc: Jason Wang <jasowang@redhat.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
  * [269fe4c] vmw_pvscsi: remove unnecessary internal msi state flag.
    Internal flag msi_used is uncesessary, msi_uninit() could be called
    directly, msi_enabled() is enough to check device msi state.
    But for migration compatibility, keep the field in structure.
    cc: Paolo Bonzini <pbonzini@redhat.com>
    cc: Dmitry Fleytman <dmitry@daynix.com>
    cc: Markus Armbruster <armbru@redhat.com>
    cc: Marcel Apfelbaum <marcel@redhat.com>
    cc: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>

  [ Denis V. Lunev ]
  * [cfef6a4] qemu-img: fix failed autotests.
    There are 9 iotests failed on Ubuntu 15.10 at the moment.
    The problem is that options parsing in qemu-img is broken by the
    following commit:
        commit 10985131e337a0c52c5bd1e191fd7867a6ff8d02
        Author: Denis V. Lunev <den@openvz.org>
        Date:   Fri Jun 17 17:44:13 2016 +0300
        qemu-img: move common options parsing before commands processing
    This strange command line reports error
      ./qemu-img create -f qcow2 TEST_DIR/t.qcow2 -- 1024
      qemu-img: Invalid image size specified!
    while original code parses it successfully.
    The problem is that getopt_long state should be reset. This could be done
    using this assignment according to the manual:
        optind = 0
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Eric Blake <eblake@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Eric Blake ]
  * [cff86b3] block: Tighter assertions on bdrv_aligned_pwritev()
    For symmetry with bdrv_aligned_preadv(), assert that the caller
    really has aligned things properly. This requires adding an align
    parameter, which is used now only in the new asserts, but will
    come in handy in a later patch that adds auto-fragmentation to the
    max transfer size, since that value need not always be a multiple
    of the alignment, and therefore must be rounded down.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a604fa2] block: Document supported flags during bdrv_aligned_preadv()
    We don't pass any flags on to drivers to handle.  Tighten an
    assert to explain why we pass 0 to bdrv_driver_preadv(), and add
    some comments on things to be aware of if we want to turn on
    per-BDS BDRV_REQ_FUA support during reads in the future.  Also,
    document that we may want to consider using unmap during
    copy-on-read operations where the read is all zeroes.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [8252427] block: Fix harmless off-by-one in bdrv_aligned_preadv()
    If the amount of data to read ends exactly on the total size
    of the bs, then we were wasting time creating a local qiov
    to read the data in preparation for what would normally be
    appending zeroes beyond the end, even though this corner case
    has nothing further to do.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [476b923] nbd: Allow larger requests.
    The NBD layer was breaking up request at a limit of 2040 sectors
    (just under 1M) to cater to old qemu-nbd. But the server limit
    was raised to 32M in commit 2d8214885 to match the kernel, more
    than three years ago; and the upstream NBD Protocol is proposing
    documentation that without any explicit communication to state
    otherwise, a client should be able to safely assume that a 32M
    transaction will work.  It is time to rely on the larger sizing,
    and any downstream distro that cares about maximum
    interoperability to older qemu-nbd servers can just tweak the
    value of #define NBD_MAX_SECTORS.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Cc: qemu-stable@nongnu.org
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [2022047] nbd: Advertise realistic limits to block layer.
    We were basing the advertisement of maximum discard and transfer
    length off of UINT32_MAX, but since the rest of the block layer
    has signed int limits on a transaction, nothing could ever reach
    that maximum, and we risk overflowing an int once things are
    converted to byte-based rather than sector-based limits.  What's
    more, we DO have a much smaller limit: both the current kernel
    and qemu-nbd have a hard limit of 32M on a read or write
    transaction, and while they may also permit up to a full 32 bits
    on a discard transaction, the upstream NBD protocol is proposing
    wording that without any explicit advertisement otherwise,
    clients should limit ALL requests to the same limits as read and
    write, even though the other requests do not actually require as
    many bytes across the wire.  So the better limit to tell the
    block layer is 32M for both values.
    Behavior doesn't actually change with this patch (the block layer
    is currently ignoring the max_transfer advertisements); but when
    that problem is fixed in a later series, this patch will prevent
    the exposure of a latent bug.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [f9e95af] iscsi: Advertise realistic limits to block layer.
    The function sector_limits_lun2qemu() returns a value in units of
    the block layer's 512-byte sector, and can be as large as
    0x40000000, which is much larger than the block layer's inherent
    limit of BDRV_REQUEST_MAX_SECTORS.  The block layer already
    handles '0' as a synonym to the inherent limit, and it is nicer
    to return this value than it is to calculate an arbitrary
    maximum, for two reasons: we want to ensure that the block layer
    continues to special-case '0' as 'no limit beyond the inherent
    limits'; and we want to be able to someday expand the block
    layer to allow 64-bit limits, where auditing for uses of
    BDRV_REQUEST_MAX_SECTORS will help us make sure we aren't
    artificially constraining iscsi to old block layer limits.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [efaf478] scsi: Advertise limits by blocksize, not 512
    s->blocksize may be larger than 512, in which case our
    tweaks to max_xfer_len and opt_xfer_len must be scaled
    appropriately.
    CC: qemu-stable@nongnu.org
    Reported-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [24ce9a2] block: Give nonzero result to blk_get_max_transfer_length()
    Making all callers special-case 0 as unlimited is awkward,
    and we DO have a hard maximum of BDRV_REQUEST_MAX_SECTORS given
    our current block layer API limits.
    In the case of scsi, this means that we now always advertise a
    limit to the guest, even in cases where the underlying layers
    previously use 0 for no inherent limit beyond the block layer.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [835db3e] blkdebug: Set request_alignment during .bdrv_refresh_limits()
    We want to eventually stick request_alignment alongside other
    BlockLimits, but first, we must ensure it is populated at the
    same time as all other limits, rather than being a special case
    that is set only when a block is first opened.
    Note that when the user does not provide "align", then we were
    defaulting to bs->request_alignment - but at this stage in the
    initialization, that was always 512.  We were also rejecting an
    explicit "align":0 from the user; this patch now allows that,
    as an explicit request for the default alignment (which may not
    always be 512 in the future).
    qemu-iotests 77 is particularly sensitive to the fact that we
    can specify an artificial alignment override in blkdebug, and
    that override must continue to work even when limits are
    refreshed on an already open device.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [c8b3b99] iscsi: Set request_alignment during .bdrv_refresh_limits()
    We want to eventually stick request_alignment alongside other
    BlockLimits, but first, we must ensure it is populated at the
    same time as all other limits, rather than being a special case
    that is set only when a block is first opened.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a84178c] qcow2: Set request_alignment during .bdrv_refresh_limits()
    We want to eventually stick request_alignment alongside other
    BlockLimits, but first, we must ensure it is populated at the
    same time as all other limits, rather than being a special case
    that is set only when a block is first opened.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [2914a1d] raw-win32: Set request_alignment during .bdrv_refresh_limits()
    We want to eventually stick request_alignment alongside other
    BlockLimits, but first, we must ensure it is populated at the
    same time as all other limits, rather than being a special case
    that is set only when a block is first opened.
    In this case, raw_probe_alignment() already did what we needed,
    so just fix its signature and wire it in correctly.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a650648] block: Set request_alignment during .bdrv_refresh_limits()
    We want to eventually stick request_alignment alongside other
    BlockLimits, but first, we must ensure it is populated at the
    same time as all other limits, rather than being a special case
    that is set only when a block is first opened.
    Add a .bdrv_refresh_limits() to all four of our legacy devices
    that will always be sector-only (bochs, cloop, dmg, vvfat), in
    spite of their recent conversion to expose a byte interface.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [79ba8c9] block: Set default request_alignment during bdrv_refresh_limits()
    We want to eventually stick request_alignment alongside other
    BlockLimits, but first, we must ensure it is populated at the
    same time as all other limits, rather than being a special case
    that is set only when a block is first opened.
    Now that all drivers have been updated to supply an override
    of request_alignment during their .bdrv_refresh_limits(), as
    needed, the block layer itself can defer setting the default
    alignment until part of the overall bdrv_refresh_limits().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [5def6b8] block: Switch transfer length bounds to byte-based.
    Sector-based limits are awkward to think about; in our on-going
    quest to move to byte-based interfaces, convert max_transfer_length
    and opt_transfer_length.  Rename them (dropping the _length suffix)
    so that the compiler will help us catch the change in semantics
    across any rebased code, and improve the documentation.  Use unsigned
    values, so that we don't have to worry about negative values and
    so that bit-twiddling is easier; however, we are still constrained
    by 2^31 of signed int in most APIs.
    When a value comes from an external source (iscsi and raw-posix),
    sanitize the results to ensure that opt_transfer is a power of 2.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [29cc6a6] block: Wording tweaks to write zeroes limits.
    Improve the documentation of the write zeroes limits, to mention
    additional constraints that drivers should observe.  Worth squashing
    into commit cf081fca, if that hadn't been pushed already :)
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [b9f7855] block: Switch discard length bounds to byte-based.
    Sector-based limits are awkward to think about; in our on-going
    quest to move to byte-based interfaces, convert max_discard and
    discard_alignment.  Rename them, using 'pdiscard' as an aid to
    track which remaining discard interfaces need conversion, and so
    that the compiler will help us catch the change in semantics
    across any rebased code.  The BlockLimits type is now completely
    byte-based; and in iscsi.c, sector_limits_lun2qemu() is no
    longer needed.
    pdiscard_alignment is made unsigned (we use power-of-2 alignments
    as bitmasks, where unsigned is easier to think about) while
    leaving max_pdiscard signed (since we still have an 'int'
    interface); this is comparable to what commit cf081fc did for
    write zeroes limits.  We may later want to make everything an
    unsigned 64-bit limit - but that requires a bigger code audit.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [ad82be2] block: Drop raw_refresh_limits()
    The raw block driver was blindly copying all limits from bs->file,
    even though: 1. the main bdrv_refresh_limits() already does this
    for many of the limits, and 2. blindly copying from the children
    can weaken any stricter limits that were already inherited from
    the backing chain during the main bdrv_refresh_limits().  Also,
    a future patch is about to move .request_alignment into
    BlockLimits, and that is a limit that should NOT be copied from
    other layers in the BDS chain.
    Thus, we can completely drop raw_refresh_limits(), and rely on
    the block layer setting up the proper limits.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [d9e0dfa] block: Split bdrv_merge_limits() from bdrv_refresh_limits()
    During bdrv_merge_limits(), we were computing initial limits
    based on another BDS in two places.  At first glance, the two
    computations are not identical (one is doing straight copying,
    the other is doing merging towards or away from zero) - but
    when you realize that the first round is starting with all-0
    memory, all of the merging happens to work.  Factoring out the
    merging makes it easier to track how two BDS limits are merged,
    in case we have future reasons to merge in even more limits.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a5b8dd2] block: Move request_alignment into BlockLimit.
    It makes more sense to have ALL block size limit constraints
    in the same struct.  Improve the documentation while at it.
    Simplify a couple of conditionals, now that we have audited and
    documented that request_alignment is always non-zero.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [8cc9c6e] block: Fix error message style
    error_setg() is not supposed to be used for multi-sentence
    messages; tweak the message to append a hint instead.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [5411541] block: Use bool as appropriate for BDS members.
    Using int for values that are only used as booleans is confusing.
    While at it, rearrange a couple of members so that all the bools
    are contiguous.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Denis V. Lunev ]
  * [1c42f14] block: fix return code for partial write for Linux AIO.
    Partial write most likely means that there is not space rather than
    "something wrong happens". Thus it would be more natural to return
    ENOSPC rather than EINVAL.
    The problem actually happens with NBD server, which has reported EINVAL
    rather then ENOSPC on the first error using its protocol, which makes
    report to the user wrong.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Pavel Borzenkov <pborzenkov@virtuozzo.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [a9d52a7] block/qdev: Fix NULL access when using BB twice.
    BlockBackend has only a single pointer to its guest device, so it makes
    sure that only a single guest device is attached to it. device-add
    returns an error if you try to attach a second device to a BB. In order
    to make the error message nicer, -device that manually connects to a
    if=none block device get a different message than -drive that implicitly
    creates a guest device. The if=... option is stored in DriveInfo.
    However, since blockdev-add exists, not every BlockBackend has a
    DriveInfo any more. Check that it exists before we dereference it.
    QMP reproducer resulting in a segfault:
    {"execute":"blockdev-add","arguments":{"options":{"id":"disk","driver":"file","filename":"/tmp/test.img"}}}
    {"execute":"device_add","arguments":{"driver":"virtio-blk-pci","drive":"disk"}}
    {"execute":"device_add","arguments":{"driver":"virtio-blk-pci","drive":"disk"}}
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [eecc774] vvfat: Use BdrvChild for s->qcow
    vvfat uses a temporary qcow file to cache written data in read-write
    mode. In order to do things properly, this should show up in the BDS
    graph and I/O should go through BdrvChild like for every other node.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [e858a97] blkreplay: Convert to byte-based I/O.
    The blkreplay driver only forwards the requests it gets, so converting
    it to byte granularity is trivial.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [db1e80e] vhdx: Some more BlockBackend use in vhdx_create()
    This does some easy conversions from bdrv_* to blk_* functions in
    vhdx_create(). We should avoid bypassing the BlockBackend layer whenever
    possible.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [28b04a8] block: Convert bdrv_co_readv() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [25ec177] block: Convert bdrv_co_writev() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [ebb7af2] block: Convert bdrv_aio_readv() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [0d1049c] block: Convert bdrv_aio_writev() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [adad649] block: Convert bdrv_co_do_readv/writev to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [83fd6dd] block: Move bdrv_commit() to block/commit.c.
    No code changes, just moved from one file to another.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [f8e2bd5] block: Use BlockBackend for I/O in bdrv_commit()
    Just like block jobs, the HMP commit command should use its own
    BlockBackend for doing I/O on BlockDriverStates.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [fbcbbf4] block: Convert bdrv_read() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [18d51c4] block: Convert bdrv_write() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [cf2ab8f] block: Convert bdrv_pread(v) to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [d9ca2ea] block: Convert bdrv_pwrite(v/_sync) to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [720ff28] block: Convert bdrv_pwrite_zeroes() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [e293b7a] block: Convert bdrv_prwv_co() to BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [a03ef88] block: Convert bdrv_co_preadv/pwritev to BdrvChild.
    This is the final patch for converting the common I/O path to take
    a BdrvChild parameter instead of BlockDriverState.
    The completion of this conversion means that all users that perform I/O
    on an image need to actually hold a reference (in the form of BdrvChild,
    possible as part of a BlockBackend) to that image. This also protects
    against inconsistent use of BlockBackend vs. BlockDriverState functions
    because direct use of a BlockDriverState isn't possible any more and
    blk->root is private for block-backends.c.
    In addition, we can now distinguish different users in the I/O path,
    and the future op blockers work is going to add assertions based on
    permissions stored in BdrvChild.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Peter Maydell ]
  * [f1f7a1d] block/qcow2: Don't use cpu_to_*w()
    Don't use the cpu_to_*w() functions, which we are trying to deprecate.
    Instead either just use cpu_to_*() to do the byteswap, or use
    st*_be_p() if we need to do the store somewhere other than to a
    variable that's already the correct type.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1466093177-17890-1-git-send-email-peter.maydell@linaro.org
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Richard Henderson ]
  * [5f6f0e2] build: Use $(CCAS) for compiling .S files.
    We fail to pass to $(AS) all of the different flags that may be required
    for a given set of CFLAGS.  Rather than figuring out the host-specific
    mapping, it's better to allow the compiler driver to do that.
    However, simply using $(CC) runs afoul of clang trying to build the
    option roms.  C.f. 3dd46c78525a30e98c68, wherein we changed from
    using $(CC) to using $(AS) in the first place.
    Work around this by passing -fno-integrated-as to clang, so that we use
    the external assembler, and the clang driver still passes along all of
    the options that the assembler might require.
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    Message-Id: <1466703558-7723-1-git-send-email-rth@twiddle.net>
  * [120c108] tcg: Fix name for high-half register.
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [59d7c14] tcg: Optimize spills of constants.
    While we can store constants via constrants on INDEX_op_st_i32 et al,
    we weren't able to spill constants to backing store.
    Add a new backend interface, tcg_out_sti, which may store the constant
    (and is allowed to fail).  Rearrange the temp_* helpers so that we only
    attempt to directly store a constant when the temp is becoming dead/free.
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Sergey Sorokin ]
  * [1f00b27] tcg: Improve the alignment check infrastructure.
    Some architectures (e.g. ARMv8) need the address which is aligned
    to a size more than the size of the memory access.
    To support such check it's enough the current costless alignment
    check implementation in QEMU, but we need to support
    an alignment size specifying.
    Signed-off-by: Sergey Sorokin <afarallax@yandex.ru>
    Message-Id: <1466705806-679898-1-git-send-email-afarallax@yandex.ru>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
    [rth: Assert in tcg_canonicalize_memop.  Leave get_alignment_bits
    available for, though unused by, user-mode.  Retain logging difference
    based on ALIGNED_ONLY.]

  [ Changlong Xie ]
  * [ada03a0] qom: Fix comment typo.
    It's qom_unref, not qdef_unref.
    Signed-off-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Reviewed-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Andreas Färber <afaerber@suse.de>

  [ Gerd Hoffmann ]
  * [de1b9b8] qxl: use uint64_t for vram size.
    This allows for the 64bit vram bar to become larger than 2G
    (try -device qxl-vga,vram64_size_mb=8192).
    https://bugzilla.redhat.com/show_bug.cgi?id=1340439
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1465389648-5179-1-git-send-email-kraxel@redhat.com
  * [2f5ae77] qxl: handle no updates in interface_update_area_complete.
    Simply return early in case there are no updated rects.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1465395101-13580-1-git-send-email-kraxel@redhat.com
  * [726bdf6] qxl: factor out qxl_get_check_slot_offset.
    New helper function which translates a qxl physical address into
    memory slot and offset.  Also applies sanity checks.  Factored out
    from qxl_phys2virt.  No functional change.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466597244-5938-1-git-send-email-kraxel@redhat.com
  * [3cb5158] qxl: store memory region and offset instead of pointer for guest slots.
    Store MemoryRegion and offset instead of a pointer for each qxl memory
    slot, so we can easily figure in which memory region an qxl object
    stored.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466597244-5938-2-git-send-email-kraxel@redhat.com
  * [1331eab] qxl: fix surface migration.
    Create a helper function qxl_dirty_one_surface() to mark a single qxl
    surface as dirty.  Use the new qxl_get_check_slot_offset function and
    lookup the memory region from the slot instead of assuming the surface
    is stored in vram.
    Use the new helper function in qxl_dirty_surfaces, for both primary and
    off-screen surfaces.  For off-screen surfaces this is no functional
    change.  For primary surfaces this will dirty only the memory actually
    used instead of the whole surface0 region.  It will also work correctly
    in case the guest places the primary surface in vram instead of the
    surface0 region (linux kms driver does that).
    https://bugzilla.redhat.com/show_bug.cgi?id=1235732
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466597244-5938-3-git-send-email-kraxel@redhat.com

  [ John Snow ]
  * [015e02f] spice: avoid .set_mm_time on >= 0.12.6.
    Spice deprecated this callback in 0.12.6.
    It's not a problem yet, but it will cause Clang to fail in a -Werror
    build due to the deprecated tag.
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 1467240095-12507-2-git-send-email-jsnow@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Marc-André Lureau ]
  * [c540128] virgl: count the calls to gl_block.
    In virgl_cmd_resource_flush(), when several consoles are updated, it
    needs to keep blocking until all spice gl draws are done. This fixes an
    assert() in spice when using multiple monitors with virgl.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1465911849-30423-2-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [c61d812] spice: use the right head for multi-monitor.
    Look up the associated head monitor config.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1465911849-30423-3-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [9d8256e] virgl: pass whole GL scanout dimensions.
    Spice client needs the whole GL texture dimension to be able to show a
    scanout with a monitor offset (different than +0+0).
    Furthermore, this fixes a crash when calling surface_{width,height}()
    after dpy_gfx_replace_surface(con, NULL) was called in
    virgl_cmd_set_scanout()
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-id: 1465911849-30423-4-git-send-email-marcandre.lureau@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Eric Blake ]
  * [c7eb39c] qapi: Improve use of qmp/types.h
    'qjson.h' is not a QObject subtype; include this file directly in
    .c files that are using it, rather than abusing qmp/types.h for
    that purpose.
    Meanwhile, for files that include a list of individual QObject
    subtypes, it's easier to just use qmp/types.h for that purpose.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-2-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [911ee36] qemu-img: Don't leak errors when outputting JSON.
    If our JSON output ever encounters an error, we would just silently
    leak the error object.  Instead, assert that our usage won't fail.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-3-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [1158bb2] qapi: Add parameter to visit_end_*
    Rather than making the dealloc visitor track of stack of pointers
    remembered during visit_start_* in order to free them during
    visit_end_*, it's a lot easier to just make all callers pass the
    same pointer to visit_end_*.  The generated code has access to the
    same pointer, while all other users are doing virtual walks and
    can pass NULL.  The dealloc visitor is then greatly simplified.
    All three visit_end_*() functions intentionally take a void**,
    even though the visit_start_*() functions differ between void**,
    GenericList**, and GenericAlternate**.  This is done for several
    reasons: when doing a virtual walk, passing NULL doesn't care
    what the type is, but when doing a generated walk, we already
    have to cast the caller's specific FOO* to call visit_start,
    while using void** lets us use visit_end without a cast. Also,
    an upcoming patch will add a clone visitor that wants to use
    the same implementation for all three visit_end callbacks,
    which is made easier if all three share the same signature.
    For visitors with already track per-object state (the QMP visitors
    via a stack, and the string visitors which do not allow nesting),
    add an assertion that the caller is indeed passing the same
    pointer to paired calls.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-4-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [2c0ef9f] qapi: Add new visit_free() function.
    Making each visitor provide its own (awkwardly-named) FOO_cleanup()
    is unusual, when we can instead have a polymorphic visit_free()
    interface.  Over the next few patches, we can use the polymorphic
    functions to eliminate the need for a FOO_get_visitor() function
    for accessing specific visitor functionality, once everything can
    be accessed directly through the Visitor* interfaces.
    The dealloc visitor is the first one converted to completely use
    the new entry point, since qapi_dealloc_visitor_cleanup() was the
    only reason that qapi_dealloc_get_visitor() existed, and only
    generated and testsuite code was even using it.  With the new
    visit_free() entry point in place, we no longer need to expose
    the QapiDeallocVisitor subtype through qapi_dealloc_visitor_new(),
    and can get by with less generated code, with diffs that look like:
    | void qapi_free_ACPIOSTInfo(ACPIOSTInfo *obj)
    | {
    |-    QapiDeallocVisitor *qdv;
    |     Visitor *v;
    |
    |     if (!obj) {
    |         return;
    |     }
    |
    |-    qdv = qapi_dealloc_visitor_new();
    |-    v = qapi_dealloc_get_visitor(qdv);
    |+    v = qapi_dealloc_visitor_new();
    |     visit_type_ACPIOSTInfo(v, NULL, &obj, NULL);
    |-    qapi_dealloc_visitor_cleanup(qdv);
    |+    visit_free(v);
    |}
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-5-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [09204ea] opts-visitor: Favor new visit_free() function.
    Now that we have a polymorphic visit_free(), we no longer need
    opts_visitor_cleanup(); which in turn means we no longer need
    to return a subtype from opts_visitor_new() nor a public upcast
    function.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-6-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [7a0525c] string-input-visitor: Favor new visit_free() function.
    Now that we have a polymorphic visit_free(), we no longer need
    string_input_visitor_cleanup(); which in turn means we no longer
    need to return a subtype from string_input_visitor_new() nor a
    public upcast function.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-7-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [b70ce10] qmp-input-visitor: Favor new visit_free() function.
    Now that we have a polymorphic visit_free(), we no longer need
    qmp_input_visitor_cleanup(); which in turn means we no longer
    need to return a subtype from qmp_input_visitor_new() nor a
    public upcast function.
    Generated code changes to qmp-marshal.c look like:
    |@@ -52,11 +52,10 @@ void qmp_marshal_add_fd(QDict *args, QOb
    | {
    |     Error *err = NULL;
    |     AddfdInfo *retval;
    |-    QmpInputVisitor *qiv = qmp_input_visitor_new(QOBJECT(args), true);
    |     Visitor *v;
    |     q_obj_add_fd_arg arg = {0};
    |
    |-    v = qmp_input_get_visitor(qiv);
    |+    v = qmp_input_visitor_new(QOBJECT(args), true);
    |     visit_start_struct(v, NULL, NULL, 0, &err);
    |     if (err) {
    |         goto out;
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-8-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [e7ca565] string-output-visitor: Favor new visit_free() function.
    Now that we have a polymorphic visit_free(), we no longer need
    string_output_visitor_cleanup(); however, we still need to
    expose the subtype for string_output_get_string().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-9-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [1830f22] qmp-output-visitor: Favor new visit_free() function.
    Now that we have a polymorphic visit_free(), we no longer need
    qmp_output_visitor_cleanup(); however, we still need to
    expose the subtype for qmp_output_get_qobject().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-10-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [a8fff94] tests: Clean up test-string-output-visitor.
    Use &error_abort and error_free_or_abort() in more places, use
    the generated qapi_free_intList() instead of open-coding it,
    reduce the scope of some variables, avoid code duplication
    during test setup with visitor_output_setup_internal(), and
    copy the visitor_reset() concept from the qmp-output test to
    the string-output test.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-11-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [23d1705] tests: Factor out common code in qapi output tests.
    Create a new visitor_get() function to capture common
    actions taken in collecting output from an output visitor,
    to make it easier to refactor the output visitors in a
    later patch.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-12-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [3b098d5] qapi: Add new visit_complete() function.
    Making each output visitor provide its own output collection
    function was the only remaining reason for exposing visitor
    sub-types to the rest of the code base.  Add a polymorphic
    visit_complete() function which is a no-op for input visitors,
    and which populates an opaque pointer for output visitors.  For
    maximum type-safety, also add a parameter to the output visitor
    constructors with a type-correct version of the output pointer,
    and assert that the two uses match.
    This approach was considered superior to either passing the
    output parameter only during construction (action at a distance
    during visit_free() feels awkward) or only during visit_complete()
    (defeating type safety makes it easier to use incorrectly).
    Most callers were function-local, and therefore a mechanical
    conversion; the testsuite was a bit trickier, but the previous
    cleanup patch minimized the churn here.
    The visit_complete() function may be called at most once; doing
    so lets us use transfer semantics rather than duplication or
    ref-count semantics to get the just-built output back to the
    caller, even though it means our behavior is not idempotent.
    Generated code is simplified as follows for events:
    |@@ -26,7 +26,7 @@ void qapi_event_send_acpi_device_ost(ACP
    |     QDict *qmp;
    |     Error *err = NULL;
    |     QMPEventFuncEmit emit;
    |-    QmpOutputVisitor *qov;
    |+    QObject *obj;
    |     Visitor *v;
    |     q_obj_ACPI_DEVICE_OST_arg param = {
    |         info
    |@@ -39,8 +39,7 @@ void qapi_event_send_acpi_device_ost(ACP
    |
    |     qmp = qmp_event_build_dict("ACPI_DEVICE_OST");
    |
    |-    qov = qmp_output_visitor_new();
    |-    v = qmp_output_get_visitor(qov);
    |+    v = qmp_output_visitor_new(&obj);
    |
    |     visit_start_struct(v, "ACPI_DEVICE_OST", NULL, 0, &err);
    |     if (err) {
    |@@ -55,7 +54,8 @@ void qapi_event_send_acpi_device_ost(ACP
    |         goto out;
    |     }
    |
    |-    qdict_put_obj(qmp, "data", qmp_output_get_qobject(qov));
    |+    visit_complete(v, &obj);
    |+    qdict_put_obj(qmp, "data", obj);
    |     emit(QAPI_EVENT_ACPI_DEVICE_OST, qmp, &err);
    and for commands:
    | {
    |     Error *err = NULL;
    |-    QmpOutputVisitor *qov = qmp_output_visitor_new();
    |     Visitor *v;
    |
    |-    v = qmp_output_get_visitor(qov);
    |+    v = qmp_output_visitor_new(ret_out);
    |     visit_type_AddfdInfo(v, "unused", &ret_in, &err);
    |-    if (err) {
    |-        goto out;
    |+    if (!err) {
    |+        visit_complete(v, ret_out);
    |     }
    |-    *ret_out = qmp_output_get_qobject(qov);
    |-
    |-out:
    |     error_propagate(errp, err);
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-13-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [a15fcc3] qapi: Add new clone visitor.
    We have a couple places in the code base that want to deep-clone
    one QAPI object into another, and they were resorting to serializing
    the struct out to QObject then reparsing it.  A much more efficient
    version can be done by adding a new clone visitor.
    Since cloning is still relatively uncommon, expose the use of the
    new visitor via a QAPI_CLONE() macro that takes care of type-punning
    the underlying function pointer, rather than generating lots of
    unused functions for types that won't be cloned.  And yes, we're
    relying on the compiler treating all pointers equally, even though
    a strict C program cannot portably do so - but we're not the first
    one in the qemu code base to expect it to work (hello, glib!).
    The choice of adding a fourth visitor type deserves some explanation.
    On the surface, the clone visitor is mostly an input visitor (it
    takes arbitrary input - in this case, another QAPI object - and
    creates a new QAPI object during the course of the visit).  But
    ever since commit da72ab0 consolidated enum visits based on the
    visitor type, using VISITOR_INPUT would cause us to run
    visit_type_str(), even though for cloning there is nothing to do
    (we just copy the enum value across, without regards to its mapping
    to strings).   Also, since our input happens to be a QAPI object,
    we can also satisfy the internal checks for VISITOR_OUTPUT.  So in
    the end, I settled with a new VISITOR_CLONE, and chose its value
    such that many internal checks can use 'v->type & mask', sticking
    to 'v->type == value' where the difference matters.
    Note that we can only clone objects (including alternates) and lists,
    not built-ins or enums.  The visitor core hides integer width from
    the actual visitor (since commit 04e070d), and as long as that's the
    case, we can't clone top-level integers.  Then again, those can
    always be cloned by direct copy, since they are not objects with
    deep pointers, so it's no real loss.  And restricting cloning to
    just objects and lists is cleaner than restricting it to non-integers.
    As such, I documented that the clone visitor is for direct use only
    by code internal to QAPI, and should not be used on incomplete objects
    (other than a hack to work around the fact that we allow NULL in place
    of "" in visit_type_str() in other output visitors).  Note that as
    written, the clone visitor will never fail on a complete object.
    Scalars (including enums) not at the root of the clone copy just fine
    with no additional effort while visiting the scalar, by virtue of a
    g_memdup() each time we push another struct onto the stack.  Cloning
    a string requires deduplication of a pointer, which means it can also
    provide the guarantee of an input visitor of never producing NULL
    even when still accepting NULL in place of "" the way the QMP output
    visitor does.
    Cloning an 'any' type could be possible by incrementing the QObject
    refcnt, but it's not obvious whether that is better than implementing
    a QObject deep clone.  So for now, we document it as unsupported,
    and intentionally omit the .type_any() callback to let a developer
    know their usage needs implementation.
    Add testsuite coverage for several different clone situations, to
    ensure that the code is working.  I also tested that valgrind was
    happy with the test.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-14-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [37f9e0a] sockets: Use new QAPI cloning.
    Rather than rolling our own clone via an expensive conversion
    in and back out of QObject, use the new clone visitor.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-15-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [b695471] replay: Use new QAPI cloning.
    Rather than rolling our own clone via an expensive conversion
    in and back out of QObject, use the new clone visitor.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1465490926-28625-16-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Jason Wang ]
  * [69e87b3] tap: vhost busy polling support.
    This patch add the capability of basic vhost net busy polling which is
    supported by recent kernel. User could configure the maximum number of
    us that could be spent on busy polling through a new property of tap
    "poll-us".
    Cc: Greg Kurz <groug@kaod.org>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Peter Maydell ]
  * [90e26f5] target-arm/arm-semi.c: In SYS_HEAPINFO use correct type for 'limit'
    In commit f5666418c4 most of the SYS_HEAPINFO implementation was
    fixed to use target_ulong rather than uint32_t, but the 'limit'
    variable was not changed.
    Reported-by: Laurent Desnogues <laurent.desnogues@gmail.com>
    Reviewed-by: Laurent Desnogues <laurent.desnogues@gmail.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1467650942-28706-1-git-send-email-peter.maydell@linaro.org

  [ Paolo Bonzini ]
  * [bb14a1e] xlnx_dp: fix iffy xlnx_dp_aux_push_tx_fifo
    xlnx_dp_aux_push_tx_fifo takes an immediate uint8_t and a buffer length,
    which must be 1 because that is how many uint8_t's fit in a uint8_t.
    Sure enough, that is what xlnx_dp_write passes to it, but the function
    is just weird.  Therefore, make xlnx_dp_aux_push_tx_fifo look like
    xlnx_dp_aux_push_rx_fifo, taking a pointer to the buffer.
    Reported by Coverity.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [5229f45] aux: fix break that wanted to break two levels out.
    The last "ret = AUX_I2C_NACK;" is dead, because it is always overridden
    by AUX_I2C_ACK.  What really the code wants is to jump out of the switch
    statement, and a "return" will not cut it because it would omit a debug
    printf.
    Change the logic so that we can break out of the while loop.  For clarity,
    hoist the bus->last_* assignments up, right after i2c_start_transfer.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [e0dadc1] aux: Rename aux.[ch] to auxbus.[ch] for the benefit of Windows.
    On Windows 'aux.*' is a reserved name and cannot be used for
    filenames; see
      https://msdn.microsoft.com/en-gb/library/windows/desktop/aa365247(v=vs.85).aspx
    This prevents cloning the QEMU git repo on Windows:
    C:\Java\sources\kvm> git clone https://github.com/qemu/qemu.git
    Cloning into 'qemu'...
    remote: Counting objects: 279563, done.
    remote: Total 279563 (delta 0), reused 0 (delta 0), pack-reused 279563R
    Receiving objects: 100% (279563/279563), 122.45 MiB | 3.52 MiB/s, done.
    Resolving deltas: 100% (221942/221942), done.
    Checking connectivity... done.
    error: unable to create file hw/misc/aux.c (No such file or directory)
    error: unable to create file include/hw/misc/aux.h (No such file or directory)
    Checking out files: 100% (4795/4795), done.
    fatal: unable to checkout working tree
    warning: Clone succeeded, but checkout failed.
    You can inspect what was checked out with 'git status'
    and retry the checkout with 'git checkout -f HEAD'
    (bug https://bugs.launchpad.net/bugs/1595240)
    Rename the offending files for the benefit of Windows.
    Reported-by: Алексей Курган <akurgan@yandex.ru>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Wei Huang <wei@redhat.com>
    Tested-by: KONRAD Frederic <fred.konrad@greensocs.com>
    Message-id: 1467377145-32385-1-git-send-email-peter.maydell@linaro.org

  [ Shannon Zhao ]
  * [eef9f19] hw/block/m25p80: fix resource leak.
    These two are spot by Coverity 1357232 and 1357233.
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1467684998-12076-1-git-send-email-zhaoshenglong@huawei.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Jean-Christophe Dubois ]
  * [66542f6] i.MX: split the GPT timer implementation into per SOC definitions.
    In various Freescale SOCs, the GPT timers can be configured to select
    its input clock.
    Depending on the SOC the set of available input clocks may vary.
    The actual single GPT definition was no good enough and because of it
    booting the sabrelite board with a i.MX6DL device tree would fail
    because of an incorrect input clock definition for the i.MX6DL SOC.
    This patch fixes the i.MX6DL boot failure by adding the ability to
    define a different set of input clocks depending on the considered SOC.
    A different class has been defined for i.MX25, i.MX31 and i.MX6 each with
    its specific set of input clocks.
    The patch has been tested by booting KZM, i.MX25 PDK, i.MX6Q sabrelite
    and i.MX6DL sabrelite.
    Signed-off-by: Jean-Christophe Dubois <jcd@tribudubois.net>
    Message-id: 1467325619-8374-1-git-send-email-jcd@tribudubois.net
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    [PMM: fixed spacing round '/' operator]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Eduardo Habkost ]
  * [823efc5] qdev: Don't stop applying globals on first error
    qdev_prop_set_globals_for_type() stops applying global properties
    on the first error. It is a leftover from when QEMU exited on any
    error when applying global property. Commit 25f8dd9 changed the
    fatal error to a warning, but neglected to drop the stopping.
    Fix that.
    For example, the following command-line will not set CPUID level
    to 3, but will warn only about "x86_64-cpu.vendor" being ignored.
      $ ./x86_64-softmmu/qemu-system-x86_64 \
          -global x86_64-cpu.vendor=x \
          -global x86_64-cpu.level=3
      qemu-system-x86_64: Warning: global x86_64-cpu.vendor=x ignored: Property '.vendor' doesn't take value 'x'
    Fix this by not returning from qdev_prop_set_globals_for_type()
    on the first error.
    Cc: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [8d76bfe] qdev: Eliminate qemu_add_globals() function.
    The function is just a helper to handle the -global options, it
    can stay in vl.c like most qemu_opts_foreach() calls.
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [77280ad] qdev: GlobalProperty.errp field.
    The new field will allow error handling to be configured by
    qdev_prop_register_global() callers: &error_fatal and
    &error_abort can be used to make QEMU exit or abort if any errors
    are reported when applying the properties.
    While doing it, change the error message from "global %s.%s=%s
    ignored" to "can't apply global %s.%s=%s".
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [39a3b37] machine: Add machine_register_compat_props() function.
    Move the compat_props handling to core machine code.
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [adae837] vl: Set errp to &error_abort on machine compat_props.
    Use the new GlobalProperty.errp field to handle compat_props
    errors.
    Example output before this change:
    (with an intentionally broken entry added to PC_COMPAT_1_3 just
    for testing)
      $ qemu-system-x86_64 -machine pc-1.3
      qemu-system-x86_64: hw/core/qdev-properties.c:1091: qdev_prop_set_globals_for_type: Assertion `prop->user_provided' failed.
      Aborted (core dumped)
    After:
      $ qemu-system-x86_64 -machine pc-1.3
      Unexpected error in x86_cpuid_set_vendor() at /home/ehabkost/rh/proj/virt/qemu/target-i386/cpu.c:1688:
      qemu-system-x86_64: can't apply global cpu.vendor=x: Property '.vendor' doesn't take value 'x'
      Aborted (core dumped)
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [fb02d56] target-sparc: Use sparc_cpu_parse_features() directly.
    Make SPARC target use sparc_cpu_parse_features() directly
    so it won't get in the way of switching other propertified
    targets to handling features as global properties.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Paolo Bonzini ]
  * [7eb2438] target-i386: TCG can support CPUID.07H:EBX.erms.
    ERMS just says "rep movsb" and "rep stosb" are fast.  It does not
    imply any new instruction, so we can support it easily.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [cf2887c] target-i386: Avoid using locals outside their scope
    x86_cpu_parse_featurestr has a "val = num;" assignment just before num
    goes out of scope.  Push num up to fix the issue.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [62a48a2] cpu: Use CPUClass->parse_features() as convertor to global properties.
    Currently CPUClass->parse_features() is used to parse -cpu
    features string and set properties on created CPU instances.
    But considering that features specified by -cpu apply to every
    created CPU instance, it doesn't make sense to parse the same
    features string for every CPU created. It also makes every target
    that cares about parsing features string explicitly call
    CPUClass->parse_features() parser, which gets in a way if we
    consider using generic device_add for CPU hotplug as device_add
    has not a clue about CPU specific hooks.
    Turns out we can use global properties mechanism to set
    properties on every created CPU instance for a given type. That
    way it's possible to convert CPU features into a set of global
    properties for CPU type specified by -cpu cpu_model and common
    Device.device_post_init() will apply them to CPU of given type
    automatically regardless whether it's manually created CPU or CPU
    created with help of device_add.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [09f71b0] arm: virt: Parse cpu_model only once.
    Considering that features are converted to global properties and
    global properties are automatically applied to every new instance
    of created CPU (at object_new() time), there is no point in
    parsing cpu_model string every time a CPU created. So move
    parsing outside CPU creation loop and do it only once.
    Parsing also should be done before any CPU is created so that
    features would affect the first CPU a well.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [6aff24c] pc: Parse CPU features only once.
    Considering that features are converted to global properties and
    global properties are automatically applied to every new instance
    of created CPU (at object_new() time), there is no point in
    parsing cpu_model string every time a CPU created. So move
    parsing outside CPU creation loop and do it only once.
    Parsing also should be done before any CPU is created so that
    features would affect the first CPU a well.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Eduardo Habkost ]
  * [d6276d2] target-i386: Show host and VM TSC frequencies on mismatch.
    Improve the TSC frequency mismatch warning to show the host and
    VM TSC frequencies.
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Evgeny Yakovlev ]
  * [c35bd19] target-i386: Report hyperv feature words through qom.
    This change adds hyperv feature words report through qom rpc.
    When VM is configured with hyperv features enabled
    libvirt will check that required feature words are set
    in cpuid leaf 40000003 through qom request.
    Currently qemu does not report hyperv feature words
    which prevents windows guests from starting with libvirt.
    To avoid conflicting with current hyperv properties all added feature
    words cannot be set directly with -cpu +feature yet.
    Signed-off-by: Evgeny Yakovlev <eyakovlev@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Richard Henderson <rth@twiddle.net>
    CC: Eduardo Habkost <ehabkost@redhat.com>
    CC: Marcelo Tosatti <mtosatti@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Ashok Raj ]
  * [87f8b62] target-i386: kvm: Add basic Intel LMCE support.
    This patch adds the support to inject SRAR and SRAO as LMCE, i.e. they
    are injected to only one VCPU rather than broadcast to all VCPUs. As KVM
    reports LMCE support on Intel platforms, this features is only available
    on Intel platforms.
    LMCE is disabled by default and can be enabled/disabled by cpu option
    'lmce=on/off'.
    Signed-off-by: Ashok Raj <ashok.raj@intel.com>
    [Haozhong: Enable LMCE only on Intel platforms
               Disable LMCE by default and add a cpu option 'lmce'
               Handle the error if LMCE is enabled w/o host support
               Remove MCG_LMCE_P from MCE_CAP_DEF
               Add migration support for LMCE
               Minor code style changes]
    Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Haozhong Zhang ]
  * [217f1b4] target-i386: Publish advised value of MSR_IA32_FEATURE_CONTROL via fw_cfg.
    It's a prerequisite that certain bits of MSR_IA32_FEATURE_CONTROL should
    be set before some features (e.g. VMX and LMCE) can be used, which is
    usually done by the firmware. This patch adds a fw_cfg file
    "etc/msr_feature_control" which contains the advised value of
    MSR_IA32_FEATURE_CONTROL and can be used by guest firmware (e.g. SeaBIOS).
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [40bfe48] target-i386: Enable LMCE for '-cpu host' if supported by host.
    If -cpu host is used, LMCE will be automatically enabled when it's
    supported by host.
    Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Richard Henderson ]
  * [4aa3f4d] linux-user: Fix i386 safe-syscall.S.
    Clang insists that "cmp" is ambiguous with a memory destination,
    requiring an explicit size suffix.
    There was a true error in the use of .cfi_def_cfa_offset in the
    epilogue, but changing to use the proper .cfi_adjust_cfa_offset
    runs afoul of a clang bug wrt .cfi_restore_state.  Better to
    fold the two epilogues so that we don't trigger the bug.
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [7e9a7c5] cputlb: Move VICTIM_TLB_HIT out of line.
    There are currently 22 invocations of this function,
    and we're about to increase that number.
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Samuel Damashek ]
  * [a390284] cputlb: Add address parameter to VICTIM_TLB_HIT
    [rth: Split out from the original patch.]
    Signed-off-by: Samuel Damashek <samuel.damashek@invincea.com>
    Message-Id: <20160706182652.16190-1-samuel.damashek@invincea.com>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [81daaba] cputlb: Fix for self-modifying writes across page boundaries.
    As it currently stands, QEMU does not properly handle self-modifying code
    when the write is unaligned and crosses a page boundary. The procedure
    for handling a write to the current translation block is to write-protect
    the current translation block, catch the write, split up the translation
    block into the current instruction (which remains write-protected so that
    the current instruction is not modified) and the remaining instructions
    in the translation block, and then restore the CPU state to before the
    write occurred so the write will be retried and successfully executed.
    However, since unaligned writes across pages are split into one-byte
    writes for simplicity, writes to the second page (which is not the
    current TB) may succeed before a write to the current TB is attempted,
    and since these writes are not invalidated before resuming state after
    splitting the TB, these writes will be performed a second time, thus
    corrupting the second page. Credit goes to Patrick Hulin for
    discovering this.
    In recent 64-bit versions of Windows running in emulated mode, this
    results in either being very unstable (a BSOD after a couple minutes of
    uptime), or being entirely unable to boot. Windows performs one or more
    8-byte unaligned self-modifying writes (xors) which intersect the end
    of the current TB and the beginning of the next TB, which runs into the
    aforementioned issue. This commit fixes that issue by making the
    unaligned write loop perform the writes in forwards order, instead of
    reverse order. This way, QEMU immediately tries to write to the current
    TB, and splits the TB before any write to the second page is executed.
    The write then proceeds as intended. With this patch applied, I am able
    to boot and use Windows 7 64-bit and Windows 10 64-bit in QEMU without
    KVM.
    Per Richard Henderson's input, this patch also ensures the second page
    is in the TLB before executing the write loop, to ensure the second
    page is mapped.
    The original discussion of the issue is located at
    http://lists.nongnu.org/archive/html/qemu-devel/2014-08/msg02161.html.
    Signed-off-by: Samuel Damashek <samuel.damashek@invincea.com>
    Message-Id: <20160706182652.16190-1-samuel.damashek@invincea.com>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Stanislav Shmarov ]
  * [7399a33] translate-all: Fix user-mode self-modifying code in 2 page long TB.
    In user-mode emulation Translation Block can consist of 2 guest pages.
    In that case QEMU also mprotects 2 host pages that are dedicated for
    guest memory, containing instructions. QEMU detects self-modifying code
    with SEGFAULT signal processing.
    In case if instruction in 1st page is modifying memory of 2nd
    page (or vice versa) QEMU will mark 2nd page with PAGE_WRITE,
    invalidate TB, generate new TB contatining 1 guest instruction and
    exit to CPU loop. QEMU won't call mprotect, and new TB will cause
    same SEGFAULT. Page will have both PAGE_WRITE_ORG and PAGE_WRITE
    flags, so QEMU will handle the signal as guest binary problem,
    and exit with guest SEGFAULT.
    Solution is to do following: In case if current TB was invalidated
    continue to invalidate TBs from remaining guest pages and mark pages
    as PAGE_WRITE. After that disable host page protection with mprotect.
    If current tb was invalidated longjmp to main loop. That is more
    efficient, since we won't get SEGFAULT when executing new TB.
    Reviewed-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Signed-off-by: Stanislav Shmarov <snarpix@gmail.com>
    Message-Id: <1467880392-1043630-1-git-send-email-snarpix@gmail.com>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Richard Henderson ]
  * [cdbd727] build: Use $(AS) for optionrom explicitly.
    For clang before 3.5, -fno-integrated-as does not exist,
    so the workaround in 5f6f0e27fb24 fails to build.
    Use clang's default assembler for linux-user/safe-syscall.S,
    and explicitly change to use the system assembler for the
    option roms.
    Tested-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Eugene (jno) Dvurechenski ]
  * [b39b771] pc-bios/s390-ccw: Pass selected SCSI device to IPL.
    There is ,bootindex=%d argument to specify the lookup order of
    boot devices.
    If a bootindex assigned to the device, then IPL Parameter Info Block
    is created for that device when it is IPLed from.
    If it is a mere SCSI device (not FCP), then IPIB is created with a
    special SCSI type and its fields are used to store SCSI address of the
    device. This new ipl block is private to qemu for now.
    If the device to IPL from is specified this way, then SCSI bus lookup
    is bypassed and prescribed devices uses the address specified.
    Signed-off-by: Eugene (jno) Dvurechenski <jno@linux.vnet.ibm.com>
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Cornelia Huck ]
  * [07c6f32] pc-bios/s390-ccw.img: rebuild image.
    Contains:
    - pc-bios/s390-ccw: Pass selected SCSI device to IPL
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Alexander Yarygin ]
  * [e468b67] s390x/ipl: Support IPL from selected SCSI device.
    If bootindex is specified for a device, we need to IPL from
    it. Currently it works for ccw devices, but not for SCSI. To be able to
    IPL from the specific device, pc-bios needs to know its address.
    For this reason we add special QEMU_SCSI IPL type into the IPLB
    structure, that contains the scsi device address.
    We enhance the ipl block with a currently qemu-only parameter block
    that allows us to specify a concrete scsi device.
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Reviewed-by: Eric Farman <farman@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ David Hildenbrand ]
  * [bb09954] s390x/ipl: fix reboots for migration from different bios.
    When migrating from a different QEMU version, the start_address and
    bios_start_address may differ. During migration these values are migrated
    and overwrite the values that were detected by QEMU itself.
    On a reboot, QEMU will reload its own BIOS, but use the migrated start
    addresses, which does not work if the values differ.
    Fix this by not relying on the migrated values anymore, but still
    provide them during migration, so existing QEMUs continue to work.
    Signed-off-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Sascha Silbe ]
  * [cf24993] s390x/css: factor out some generic code from virtio_ccw_device_realize()
    A lot of what virtio_ccw_device_realize() does isn't specific to
    virtio; it would apply to emulated CCW as well. Factor it out to make
    it easier to implement emulated CCW devices later on.
    Signed-off-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Reviewed-by: Dong Jia Shi <bjsdjshi@linux.vnet.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [3f9e485] s390x/css: use define for "virtual-css-bridge" literal.
    Introduce a TYPE_* define (like we already use for a couple of other
    QOM types) for the name of the virtual CSS bridge QOM type instead of
    sprinkling the same string literal over several source files.
    Signed-off-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Jing Liu ]
  * [dd70bd0] s390x/css: Factor out virtual css bridge and bus.
    Currently, common base layers virtual css bridge and bus are
    defined in hw/s390x/virtio-ccw.c(h). In order to support
    multiple types of devices in the virtual channel subsystem,
    especially non virtio-ccw, refactoring work needs to be done.
    This work is just a pure code move without any functional change
    except dropping an empty function virtual_css_bridge_init() and
    virtio_ccw_busdev_unplug() changing. virtio_ccw_busdev_unplug()
    is specific to virtio-ccw but gets referenced from the common
    virtual css bridge code. To keep the functional changes to a
    minimum we export this function from virtio-ccw.c and continue
    to reference it inside virtual_css_bridge_class_init()
    (now living in hw/s390x/css-bridge.c). A follow-up patch will
    clean this up.
    Signed-off-by: Jing Liu <liujbjl@linux.vnet.ibm.com>
    Reviewed-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Reviewed-by: Dong Jia Shi <bjsdjshi@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [b804e8a] s390x/css: Unplug handler of virtual css bridge.
    The previous patch moved virtual css bridge and bus out from
    virtio-ccw, but kept the direct reference of virtio-ccw specific
    unplug function inside css-bridge.c.
    To make the virtual css bus and bridge useful for non-virtio devices,
    this introduces a common unplug function pointer "unplug" to call
    specific virtio-ccw unplug parts. Thus, the tight coupling to
    virtio-ccw can be removed.
    This unplug pointer is a member of CCWDeviceClass, which is introduced
    as an abstract device layer called "ccw-device". This layer is between
    DeviceState and specific devices which are plugged in virtual css bus,
    like virtio-ccw device. The specific unplug handlers should be assigned
    to "unplug" during initialization.
    Signed-off-by: Jing Liu <liujbjl@linux.vnet.ibm.com>
    Reviewed-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Reviewed-by: Dong Jia Shi <bjsdjshi@linux.vnet.ibm.com>
    Reviewed-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Yi Min Zhao ]
  * [f7c40aa] s390x/pci: fix failures of dma map/unmap.
    In commit d78c19b5cf4821d0c198f4132a085bdbf19dda4c, vfio code stores
    the IOMMU's offset_within_address_space and adjusts the IOVA before
    calling vfio_dma_map/vfio_dma_unmap. But s390_translate_iommu already
    considers the base address of an IOMMU memory region.
    Thus we use pal as the size and 0x0 as the base address to initialize
    IOMMU memory subregion.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [e7d3369] s390x/pci: acceleration for getting S390pciState.
    There are a number of places where the code needs to get the instance
    of S390pciState. It calls object_resolve_path() every time. This
    wastes a lot of time and leads to low performance. Thus we add
    s390_get_phb() to improve it.
    Because we always have a phb, we remove all return checkings in the
    callers and add an assert in s390_get_phb() to make sure that phb is
    getted successfully.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [67aad50] s390x/pci: write fid in CLP_QUERY_PCI_FN.
    We forgot to write the fid; fix that.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Acked-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [c188e30] s390x/pci: unify FH_ macros.
    Present code uses some macros to structure PCI Function Handle. But
    their names don't have a uniform format. Let's use FH_MASK_ as the
    unified prefix.
    While we're at it, differentiate the SHM bits: use different bits for
    vfio and emulated devices.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [06a96da] s390x/pci: refactor s390_pci_find_dev_by_fh.
    Because this function is called very frequently, we should use a more
    effective way to find the zpci device. So we use the FH's index to get
    the device directly.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [5d1abf2] s390x/pci: enforce zPCI state checking.
    Current code uses some fields combinatorially to indicate the state of
    a s390 pci device. This patch introduces device states in order to make
    the code more readable and more logical.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [90a0f9a] s390x/pci: introduce S390PCIBus.
    To enable S390PCIBusDevice as qdev, there should be a new bus to
    plug and manage all instances of S390PCIBusDevice. Due to this,
    S390PCIBus is introduced.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [67d5cd9] s390x/pci: introduce S390PCIIOMMU.
    Currently each zpci device holds its own DMA address space and memory
    region. At the same time, all instances of zpci device are stored in
    S390pciState. So duirng the initialization of S390pciState, all zpci
    devices are created and then all DMA address spaces are created. Thus,
    when initializing pci devices, their corresponding DMA address spaces
    could be found.
    But zpci qdev will be introduced later. Zpci device may be initialized
    and plugged afterwards generic pci device. So we should initialize all
    DMA address spaces and memory regions before initializing zpci devices.
    We introduce a new struct named S390PCIIOMMU. And a new field of
    S390pciState, which is an array to store all instances of S390PCIIOMMU,
    is added so that qemu pci code could find the corresponding DMA
    address space when initializing a generic pci device. And this should
    be done before the connection of a zpci device and a generic pci
    device is built.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Acked-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [3e5cfba] s390x/pci: introduce S390PCIBusDevice qdev.
    To support definitions of s390 pci attributes in Qemu cmdline, we have
    to make current S390PCIBusDevice struct inherit DeviceState and add
    three properties for it. Currently we only support definitions of uid
    and fid.
    'uid' is optionally defined by users, identifies a zpci device and
    must be defined with a 16-bit and non-zero unique value.
    'fid' ranges from 0x0 to 0xFFFFFFFF. For fid property, we introduce a
    new PropertyInfo by the name of s390_pci_fid_propinfo with our special
    setter and getter. As 'fid' is optional, introduce 'fid_defined' to
    track whether the user specified a fid.
    'target' field is to direct qemu to find the corresponding generic PCI
    device. It is equal to the 'id' value of one of generic pci devices.
    If the user doesn't specify 'id' parameter for a generic pci device,
    its 'id' value will be generated automatically and use this value as
    'target' to create an associated zpci device.
    If the user did not specify 'uid' or 'fid', values are generated
    automatically. 'target' is required.
    In addition, if a pci device has no associated zpci device, the code
    will generate a zpci device automatically for it.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [bf32839] s390x/pci: enable uid-checking.
    The uid-checking facility guarantees uniqueness of the uid within the
    vm and exposes the real uid to the guest when listing pci devices.
    Let's always enable it and present it to the guest in the response to
    the list pci clp command.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [af9ed37] s390x/pci: enable zpci hot-plug/hot-unplug.
    We need to support hot-plug/hot-unplug for the new zpci devices as
    well. This patch enables the present hot-plug/hot-unplug handlers
    to support not only generic pci devices but also zpci devices.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [bd49768] s390x/pci: add checkings in CLP_SET_PCI_FN.
    The code in CLP_SET_PCI_FN case misses some checkings. Let's add
    them.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [ab97465] s390x/pci: refactor s390_pci_find_dev_by_idx
    s390_find_dev_by_idx() only indexes usable zpci devices. It implies
    that the index value of each zpci device is dynamic and may change if
    a new zpci device is plugged. So we have to use a constant index to
    look up the device.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [4e3bfc1] s390x/pci: refactor list_pci.
    Because of the refactor of s390_pci_find_dev_by_idx(), list_pci()
    should be updated. We introduce a new function to get the next
    available zpci device. It simplifies the code of looking up zpci
    devices.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Acked-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [0a608a6] s390x/pci: fix stpcifc_service_call.
    Firstly the function misses dmaas checking. This patch adds it.
    Secondly the function uses s390_pci_find_dev_by_fh() to look up the
    zpci device. This may fail if the guest provides a valid and disabled
    fh but fh of the associated zpci device is enabled. Thus we use
    s390_pci_find_dev_by_idx() instead.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [cdd85eb] s390x/pci: replace fid with idx in msg data of msix.
    Present code uses fid as the part of message data of msix for looking
    up the specific zpci device. However it limits the usable range of fid,
    and the code looking up the zpci device may fail due to truncation of
    the fid.
    In addition, fh is composed of enabled bit, FH_VIRT and the array index.
    So we can use the array index as the identifier to store in msg data.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [93d16d8] s390x/pci: make hot-unplug handler smoother.
    The current implementation of hot-unplug handler is abrupt. Any pci
    operation will be just rejected if pci device is unconfigured. Thus a
    pci device can not be reset or destroyed in a right, smooth and safe
    way.
    Improve this as follows:
    - Notify the guest via a HP_EVENT_DECONFIGURE_REQUEST(0x303) event in
      the unplug handler, giving it a chance to deconfigure the device via
      sclp and allowing us to continue hot-unplug afterwards.
    - Set up a timer that will generate the HP_EVENT_CONFIGURE_TO_STBRES
      (0x304) event as before if the guest did not react after an adequate
      time.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Gerd Hoffmann ]
  * [f7d3f8c] gtk: fix build.
    Commit "9d8256e virgl: pass whole GL scanout dimensions" missed the
    opengl code path for gtk versions >= 3.16.  Update that one too and
    fix the build with recent gtk versions.
    Reported-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1467876563-1351-1-git-send-email-kraxel@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Gonglei ]
  * [5a693ef] vnc: fix incorrect checking condition when updating client
    vs->disconnecting is set to TRUE and vs->ioc is closed, but
    vs->ioc isn't set to NULL, so that the vnc_disconnect_finish()
    isn't invoked when you update client in vnc_update_client()
    after vnc_disconnect_start invoked. Let's using change the checking
    condition to avoid resource leak.
    Signed-off-by: Haibin Wang <wanghaibin.wang@huawei.com>
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Reviewed-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1467949056-81208-1-git-send-email-arei.gonglei@huawei.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Peter Lieven ]
  * [095497f] vnc-enc-tight: use thread local storage for palette
    currently the color counting palette is allocated from heap, used and destroyed
    for each single subrect. Use a static palette per thread for this purpose and
    avoid the malloc and free for each update.
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1467280846-9674-1-git-send-email-pl@kamp.de
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Daniel P. Berrange ]
  * [ea69744] ui: avoid crash if vnc client disconnects with writes pending.
    The vnc_client_read() function is called from the vnc_client_io()
    event handler callback when there is incoming data to process.
    If it detects that the client has disconnected, then it will
    trigger cleanup and free'ing of the VncState client struct at
    a safe time.
    Unfortunately, the vnc_client_io() event handler will also call
    vnc_client_write() to handle any outgoing data writes. So if
    vnc_client_io() was invoked with both G_IO_IN and G_IO_OUT
    events set, and the client disconnects, we may try to write to
    a client which has just been freed.
    https://bugs.launchpad.net/qemu/+bug/1594861
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1467042529-3372-1-git-send-email-berrange@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [cde8dcb] msmouse: add MouseState, unregister handler on close.
    Add struct to track serial mouse state.  Store mouse event handler
    there.  Unregister properly on chardev close.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1467625375-31774-2-git-send-email-kraxel@redhat.com
  * [57a4e3b] msmouse: fix buffer handling.
    The msmouse chardev backend writes data without checking whenever there
    is enough space.
    That happens to work with linux guests, probably by pure luck because
    the linux driver enables the fifo and the serial port emulation accepts
    more data than announced via qemu_chr_be_can_write() in that case.
    Handle this properly by adding a buffer to MouseState.  Hook up a
    CharDriverState->accept_input() handler which feeds the buffer to the
    serial port.  msmouse_event() only fills the buffer now, and calls the
    accept_input handler too to kick off the transmission.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1467625375-31774-3-git-send-email-kraxel@redhat.com
  * [96d7c07] msmouse: switch to new input interface.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1467625375-31774-4-git-send-email-kraxel@redhat.com
  * [d7b7f52] msmouse: send short messages if possible.
    Keep track of button changes.  Send the extended 4-byte messages for
    three button mice only in case we have something to report for the
    middle button.  Use the short 3-byte messages (original protocol for
    two-button microsoft mouse) otherwise.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1467625375-31774-5-git-send-email-kraxel@redhat.com
  * [c80276b] input: add trace events for full queues.
    It isn't unusual to happen, for example during reboot when the guest
    doesn't reveice events for a while.  So better don't flood stderr
    with alarming messages.  Turn them into tracepoints instead so they
    can be enabled in case they are needed for trouble-shooting.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466675495-28797-1-git-send-email-kraxel@redhat.com
  * [d4df42c] input-linux: factor out input_linux_handle_mouse.
    No functional change.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466067800-25434-2-git-send-email-kraxel@redhat.com
  * [2330e9e] input-linux: factor out input_linux_handle_keyboard.
    No functional change.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466067800-25434-3-git-send-email-kraxel@redhat.com
  * [2e6a64c] input-linux: better capability checks, merge input_linux_event_{mouse, keyboard}
    Improve capability checks (count keys and buttons), store results.
    Merge the input_linux_event_mouse and input_linux_event_keyboard
    functions into one, dispatch into input_linux_handle_mouse and
    input_linux_handle_keyboard depending on device capabilities.
    Allow calling both handle functions, so we can handle mice which
    also send key events, by routing those key events to the keyboard.
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466067800-25434-4-git-send-email-kraxel@redhat.com

  [ Yongbok Kim ]
  * [4051405] hw/mips: implement GIC Interval Timer.
    The interval timer is similar to the CP0 Count/Compare timer within
    each processor. The difference is the GIC_SH_COUNTER register is global
    to the system so that all processors have the same time reference.
    To ease implementation, all VPs are having its own QEMU timer but sharing
    global settings and registers such as GIC_SH_CONFIG.COUTNSTOP and
    GIC_SH_COUNTER.
    MIPS GIC Interval Timer does support upto 64 bits of Count register but
    in this implementation it is limited to 32 bits only.
    Signed-off-by: Yongbok Kim <yongbok.kim@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [e8bd336] hw/mips: implement Global Interrupt Controller.
    The Global Interrupt Controller (GIC) is responsible for mapping each
    internal and external interrupt to the correct location for servicing.
    The internal representation of registers is different from the specification
    in order to consolidate information for each GIC Interrupt Sources and Virtual
    Processors with same functionalities. For example SH_MAP00_VP00 registers are
    defined like each bit represents a VP but in this implementation the equivalent
    map_vp contains VP number in integer form for ease accesses. When it is being
    accessed via read write functions an internal data is converted back into the
    original format as the specification.
    Limitations:
    Level triggering only
    GIC CounterHi not implemented (Countbits = 32bits)
    DINT not implemented
    Local WatchDog, Fast Debug Channel, Perf Counter not implemented
    Signed-off-by: Yongbok Kim <yongbok.kim@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Leon Alrae ]
  * [19494f8] hw/mips/cps: create GIC block inside CPS.
    Add GIC to CPS and expose its interrupt pins instead of CPU's.
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [89777fd] target-mips: add exception base to MIPS CPU.
    Replace hardcoded 0xbfc00000 with exception_base which is initialized with
    this default address so there is no functional change here.
    However, it is now exposed and consequently it will be possible to modify
    it from outside of the CPU.
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [dff9425] hw/mips_cpc: make VP correctly start from the reset vector.
    When VP enters the Run state it starts execution from the reset vector.
    Currently used CPU_INTERRUPT_WAKE does not do that if reset exception
    base has been modified. Therefore fix that by simply resetting given VP.
    Drop the usage of CPU_INTERRUPT_WAKE also in VP_STOP and instead raise
    the CPU_INTERRUPT_HALT to halt a VP.
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [c09199f] hw/mips_cmgcr: implement RESET_BASE register in CM GCR.
    Implement RESET_BASE register which is local to each VP and a write to
    it changes VP's reset exception base. Also, add OTHER register to
    allow a software running on one VP to access other VP's local registers.
    Guest can use this mechanism to specify custom address from which a VP
    will start execution.
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [8f95ad1] target-mips: replace MIPS64R6-generic with the real I6400 CPU model.
    MIPS64R6-generic gradually gets closer to I6400 CPU, feature-wise. Rename
    it to make it clear which MIPS processor it is supposed to emulate.
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Paul Burton ]
  * [6ec98bd] target-mips: add ASID mask field and replace magic values.
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [2d72e7b] target-mips: change ASID type to hold more than 8 bits.
    ASID currently has uint8_t type which is too small since some processors
    support more than 8 bits ASID. Therefore change its type to uint16_t.
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>
  * [a0c8060] target-mips: support CP0.Config4.AE bit.
    The read-only Config4.AE bit set denotes extended 10 bits ASID.
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Leon Alrae ]
  * [cdc46fa] target-mips: enable 10-bit ASIDs in I6400 CPU.
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Zhang Shuaiyi ]
  * [a4055d8] nec-usb-xhci: set the device state to USB_STATE_DEFAULT.
    This patch is a rough fix to "hw/usb/core.c:401: usb_handle_packet:
     Assertion `dev->state == 3' failed.". Qemu will crash when a usb3
    device redirect to Windows7 VM via nec-usb-xhci.
    In extensible-host-controler-interface-usb-xhci.pdf P94(4.6.5
    Address Device):
        • If the Block Set Address Request (BSR) flag = ‘1’
            • If the slot is in the Enabled state:
                ...
                • Set the Slot State in the Output Slot Context to Default.
    BSR = ‘1’: Enabled state to Default state; BSR = ‘0’: Default state
    to Addressed state. Try to call usb_device_reset to set device state
    to USB_STATE_DEFAULT in xhci_address_slot wether bsr is zero.
    Signed-off-by: Zhang Shuaiyi <zhang_syi@massclouds.com>
    Message-id: 1467258640-11921-1-git-send-email-zhang_syi@massclouds.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [b91e013] usb: add storage hotplug documentation.
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1466667901-1341-1-git-send-email-kraxel@redhat.com

  [ Anthony PERARD ]
  * [042ec47] xen-usb: Fix 32bit build.
    Signed-off-by: Anthony PERARD <anthony.perard@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Message-id: 20160623110829.22671-1-anthony.perard@citrix.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Sergey Sorokin ]
  * [b35399b] Fix confusing argument names in some common functions.
    There are functions tlb_fill(), cpu_unaligned_access() and
    do_unaligned_access() that are called with access type and mmu index
    arguments. But these arguments are named 'is_write' and 'is_user' in their
    declarations. The patches fix the arguments to avoid a confusion.
    Signed-off-by: Sergey Sorokin <afarallax@yandex.ru>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Message-id: 1465907177-1399402-1-git-send-email-afarallax@yandex.ru
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [b442642] fsdev/9p-iov-marshal.c: Don't use cpu_to_*w() functions.
    Don't use the cpu_to_*w() functions, which we are trying to deprecate.
    Instead just use cpu_to_*() to do the byteswap, which brings the
    code in the marshal function in line with that in the unmarshal.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1467908460-27048-2-git-send-email-peter.maydell@linaro.org
  * [4312057] hw/bt: Don't use cpu_to_*w() and *_to_cpup()
    Don't use cpu_to_*w() and *_to_cpup() to do byte-swapped loads
    and stores; instead use ld*_p() and st*_p() which correctly handle
    misaligned accesses.
    Bring the HNDL() macro into line with how we deal with
    PARAMHANDLE(), by using cpu_to_le16() rather than an ifdef
    HOST_WORDS_BIGENDIAN.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1467908460-27048-3-git-send-email-peter.maydell@linaro.org
  * [f76bde7] bswap.h: Remove unused cpu_to_*w() and *_to_cpup()
    Now that all uses of cpu_to_*w() and *_to_cpup() have been replaced
    with either ld*_p()/st*_p() or by doing direct dereferences and
    using the cpu_to_*()/*_to_cpu() byteswap functions, we can remove
    the unused implementations.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1467908460-27048-4-git-send-email-peter.maydell@linaro.org
  * [cbe967f] bswap.h: Fix comment typo.
    Fix a typo in a comment.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefan Weil <sw@weilnetz.de>
    Message-id: 1467908460-27048-5-git-send-email-peter.maydell@linaro.org
  * [7d820b7] bswap.h: Document cpu_to_* and *_to_cpu conversion functions.
    Add a documentation comment describing the functions for
    converting between the cpu and little or bigendian formats.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1467908460-27048-6-git-send-email-peter.maydell@linaro.org

  [ Markus Armbruster ]
  * [a9c9427] Use #include "..." for our own headers, <...> for others.
    Tracked down with an ugly, brittle and probably buggy Perl script.
    Also move includes converted to <...> up so they get included before
    ours where that's obviously okay.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Tested-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [2dbc4eb] scripts: New clean-header-guards.pl.
    The conventional way to ensure a header can be included multiple times
    is to bracket it like this:
        #ifndef HEADER_NAME_H
        #define HEADER_NAME_H
        ...
        #endif
    where HEADER_NAME_H is a symbol unique to this header.
    The endif may be optionally decorated like this:
        #endif /* HEADER_NAME_H */
    Unconventional ways present in our code:
    * Identifiers reserved for any use:
        #define _FILEOP_H
    * Lowercase (bad idea for object-like macros):
        #define __linux_video_vga_h__
    * Roundabout ways to say the same thing (and hide from grep):
        #if !defined(__PPC_MAC_H__)
        #endif /* !defined(__PPC_MAC_H__) */
    * Redundant values:
        #define HW_ALPHA_H 1
    * Funny redundant values:
        # define PXA_H                 "pxa.h"
    * Decorations with bangs:
        #endif /* !QEMU_ARM_GIC_INTERNAL_H */
      The negation actually makes sense, but almost all our header guard
      #endif decorations don't negate.
    * Useless decorations:
       #endif  /* audio.h */
    Header guards are not the place to show off creativity.  This script
    normalizes them to the conventional way, and cleans up whitespace
    while there.  It warns when it renames guard symbols, and explains how
    to find occurences of these symbols that may have to be updated
    manually.
    Another issue is use of the same guard symbol in multiple headers.
    That's okay only for headers that cannot be used together, such as the
    *-user/*/target_syscall.h.  This script can't tell, so it warns when
    it sees a reuse.
    The script also warns when preprocessing a header with its guard
    symbol defined produces anything but whitespace.
    The next commits will put the script to use.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [07f5a25] target-*: Clean up cpu.h header guards.
    Most of them use guard symbols like CPU_$target_H, but we also have
    __MIPS_CPU_H__ and __TRICORE_CPU_H__.  They all upset
    scripts/clean-header-guards.pl.
    The script dislikes CPU_$target_H because they don't match their file
    name (they should, to make guard collisions less likely).  The others
    are reserved identifiers.
    Clean them all up: use guard symbol $target_CPU_H for
    target-$target/cpu.h.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [3622634] linux-user: Clean up target_syscall.h header guards.
    Some of them use guard symbol TARGET_SYSCALL_H, but we also have
    CRIS_SYSCALL_H, MICROBLAZE_SYSCALLS_H, TILEGX_SYSCALLS_H and
    __UC32_SYSCALL_H__.  They all upset scripts/clean-header-guards.pl.
    Reuse of the same guard symbol TARGET_SYSCALL_H in multiple headers is
    okay as long as they cannot be included together.  The script can't
    tell, so it warns.
    The script dislikes the other guard symbols, too.  They don't match
    their file name (they should, to make guard collisions less likely),
    and __UC32_SYSCALL_H__ is a reserved identifier.
    Clean them all up: use guard symbol $target_TARGET_SYSCALL_H for
    linux-user/$target/target_sycall.h.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [55c5063] linux-user: Clean up target_cpu.h header guards.
    These headers all use TARGET_CPU_H as header guard symbol.  Reuse of
    the same guard symbol in multiple headers is okay as long as they
    cannot be included together.
    Since we can avoid guard symbol reuse easily, do so: use guard symbol
    $target_TARGET_CPU_H for linux-user/$target/target_cpu.h.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [9c93ae1] linux-user: Clean up target_signal.h header guards.
    These headers all use TARGET_SIGNAL_H as header guard symbol.  Reuse
    of the same guard symbol in multiple headers is okay as long as they
    cannot be included together.
    Since we can avoid guard symbol reuse easily, do so: use guard symbol
    $target_TARGET_SIGNAL_H for linux-user/$target/target_signal.h.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [3500385] linux-user: Clean up target_structs.h header guards.
    These headers all use TARGET_STRUCTS_H as header guard symbol.  Reuse
    of the same guard symbol in multiple headers is okay as long as they
    cannot be included together.
    Since we can avoid guard symbol reuse easily, do so: use guard symbol
    $target_TARGET_STRUCTS_H for linux-user/$target/target_structs.h.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [59e96bc] linux-user: Clean up hostdep.h header guards.
    These headers all use QEMU_HOSTDEP_H as header guard symbol.  Reuse of
    the same guard symbol in multiple headers is okay as long as they
    cannot be included together.
    Since we can avoid guard symbol reuse easily, do so: use guard symbol
    $target_HOSTDEP_H for linux-user/host/$target/hostdep.h.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [1b3c4fd] linux-user: Fix broken header guard in syscall_defs.h.
    Found with scripts/clean-header-guards.pl.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [14e54f8] tcg: Clean up tcg-target.h header guards.
    These use guard symbols like TCG_TARGET_$target.
    scripts/clean-header-guards.pl doesn't like them because they don't
    match their file name (they should, to make guard collisions less
    likely).
    Clean them up: use guard symbol $target_TCG_TARGET_H for
    tcg/$target/tcg-target.h.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [20668fd] spapr_pci: Include spapr.h instead of playing games with #error
    include/hw/pci-host/spapr.h needs hw/ppc/spapr.h.  It checks whether
    its header guard is defined, and errors out if it isn't.
    Playing games with some other header's guard symbol is not a good
    idea.  Just include the frackin' header already.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [85aad98] Drop Emacs local variables lists redundant with .dir-locals.el.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [121d071] Clean up header guards that don't match their file name.
    Header guard symbols should match their file name to make guard
    collisions less likely.  Offenders found with
    scripts/clean-header-guards.pl -vn.
    Cleaned up with scripts/clean-header-guards.pl, followed by some
    renaming of new guard symbols picked by the script to better ones.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [6031a51] libdecnumber: Don't fool around with guards to avoid #include.
    Some libdecnumber headers avoid including decNumber.h or decContext.h
    again by checking their header guards.  Don't.  Including them
    multiple times is safe, and the compiler can do it efficiently.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [965379b] libdecnumber: Don't error out on decNumberLocal.h re-inclusion
    decNumberLocal.h errors out when it's included with its header guard
    defined.  This catches multiple inclusions.
    Drop that.  Including it multiple times is safe, and the compiler can
    do it efficiently.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [2a6a407] Clean up ill-advised or unusual header guards.
    Cleaned up with scripts/clean-header-guards.pl.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [175de52] Clean up decorations and whitespace around header guards.
    Cleaned up with scripts/clean-header-guards.pl.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
  * [82751a3] cris: Fix broken header guard in hw/cris/boot.h.
    Found with scripts/clean-header-guards.pl.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>

  [ Jarkko Lavinen ]
  * [297b044] scsi-bus: Add SCSI scanner support.
    Add support for missing scanner specific SCSI commands and their xfer
    lenghts as per ANSI spec section 15.
    Signed-off-by: Jarkko Lavinen <jarkko.lavinen@iki.fi>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [6959e50] scsi-bus: Use longer sense buffer with scanners.
    Scanners can provide additional sense bytes beyond 18 bytes.
    VueScan uses 32 bytes alloc length with Request Sense command.
    Signed-off-by: Jarkko Lavinen <jarkko.lavinen@iki.fi>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Sean Bruno ]
  * [540aecd] Use "-s" instead of "--quiet" to resolve non-fatal build error on FreeBSD.
    The --quiet argument is not available on all operating systems.  Use -s
    instead to match the rest of the Makefile uses.  This fixes a non-fatal
    error seen on FreeBSD.
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Sean Bruno <sbruno@freebsd.org>
    Message-Id: <20160614180734.8782-1-sbruno@freebsd.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Cao jin ]
  * [28ba61e] main-loop: check return value before using pointer
    pointer 'qemu_aio_context' should be checked first before it is used.
    qemu_bh_new() will use it.
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-Id: <1467799740-26079-2-git-send-email-caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [a942d8f] json-streamer: fix double-free on exiting during a parse.
    Now that json-streamer tries not to leak tokens on incomplete parse,
    the tokens can be freed twice if QEMU destroys the json-streamer
    object during the parser->emit call.  To fix this, create the new
    empty GQueue earlier, so that it is already in place when the old
    one is passed to parser->emit.
    Reported-by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <1467636059-12557-1-git-send-email-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1e13c01] disas: avoid including everything in headers compiled from C++
    disas/arm-a64.cc is careful to include only the bare minimum that
    it needs---qemu/osdep.h and disas/bfd.h.  Unfortunately, disas/bfd.h
    then includes qemu-common.h, which brings in qemu/option.h and from
    there we get the kitchen sink.
    This causes problems because for example QEMU's atomic macros
    conflict with C++ atomic types.  But really all that bfd.h needs
    is the fprintf_function typedef, so replace the inclusion of
    qemu-common.h with qemu/fprintf-fn.h.
    Reported-by: Sean Bruno <sbruno@freebsd.org>
    Tested-by: Sean Bruno <sbruno@freebsd.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Cc: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Marc-André Lureau ]
  * [73f40c1] qemu-sockets: use qapi_free_SocketAddress in cleanup.
    Commit 74b6ce43e3 uses the wrong free API for a SocketAddress, that
    may leak some linked data.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20160706164246.22116-1-marcandre.lureau@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Richard Henderson ]
  * [be72f9f] target-sparc: Mark more flags for helpers.
    Quite a few helpers do not modify tcg globals but did not so indicate.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [e86ceb0] target-sparc: Remove softint as a TCG global.
    The global is only ever read for one insn; we can just as well
    use a load from env instead and generate the same code.  This
    also allows us to indicate the the associated helpers do not
    touch TCG globals.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [99a2306] target-sparc: Store mmu index in TB flags.
    Doing this instead of saving the raw PS_PRIV and TL.  This means
    that all nucleus mode TBs (TL > 0) can be shared.  This fixes a
    bug in that we didn't include HS_PRIV in the TB flags, and so could
    produce incorrect TB matches for hypervisor state.
    The LSU and DMMU states were unused by the translator.  Including
    them in TB flags meant unnecessary mismatches from tb_find_fast.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [4fbe006] target-sparc: Create gen_exception.
    This unifies quite a few duplicate code fragments.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [22e7006] target-sparc: Unify asi handling between 32 and 64-bit.
    We now have a single copy of gen_ld_asi, gen_st_asi,
    gen_swap_asi, and everything uses gen_get_asi.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [a6d567e] target-sparc: Store %asi in TB flags.
    Knowing the value of %asi at translation time means that we
    can handle the common settings without a function call.
    The steady state appears to be %asi == ASI_P, so that sparcv9
    code can use offset forms of lda/sta.  The %asi register gets
    pushed and popped on entry to certain functions, but it rarely
    takes on values other than ASI_P or ASI_AIUP.  Therefore we're
    unlikely to be expanding the set of TBs created.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [7ec1e5e] target-sparc: Introduce get_asi.
    Replace gen_get_asi, and use it for both 32-bit and 64-bit.
    For v8, do supervisor and immediate checks here.
    Also, move save_state and TB ending into the respective
    subroutines, out of disas_sparc_insn.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [1d65b0f] target-sparc: Pass TCGMemOp to gen_ld/st_asi.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [68a03b8] target-sparc: Import linux/arch/sparc/include/uapi/asm/asi.h.
    Copied from tag v4.2, 64291f7db5bd8150a74ad2036f1037e6a0428df2.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [1d85496] target-sparc: Add UA2005 defines to asi.h.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [0cc1f4b] target-sparc: Use defines from asi.h.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [f0913be] target-sparc: Directly implement easy ld/st asis.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [3f4288e] target-sparc: Use QT0 to return results from ldda.
    Also implement a few more twinx asis.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [35e9490] target-sparc: Introduce gen_check_align.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [e4dc005] target-sparc: Directly implement easy ldd/std asis.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [c095b83] target-sparc: Fix obvious error in ASI_M_BFILL.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [6850811] target-sparc: Pass TCGMemOp constants to helper_ld/st_asi.
    Reduces the argument count for helper_ld_asi; do helper_st_asi
    for consistency.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [7705091] target-sparc: Directly implement easy ldf/stf asis.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [ca5ce57] target-sparc: Directly implement block and short ldf/stf asis.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [f2fe396] target-sparc: Remove helper_ldf_asi, helper_stf_asi.
    We've now implemented all fp asis inline, except for the no-fault
    memory reads.  The latter can be passed directly to helper_ld_asi.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [7385aed] target-sparc: Use explicit writes to cpu_fsr.
    By arranging for explicit writes to cpu_fsr after floating point
    operations, we are able to mark the helpers as not writing to
    tcg globals, which means that we don't need to invalidate the
    integer register set across said calls.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [ba2397d] target-sparc: Use cpu_fsr in stfsr.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [02c79d7] target-sparc: Use cpu_loop_exit_restore from helper_check_ieee_exceptions.
    This avoids needing to save state before every FP operation.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [f9c816c] target-sparc: Elide duplicate updates to fprs.
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Mark Cave-Ayland ]
  * [fa3007e] OpenBIOS: switch over to official OpenBIOS git repo.
    This update should preserve git history, and switches git.qemu-project.org
    over to be a mirror of the new official git repo hosted at
    https://github.com/openbios from a git-svn import of the old coreboot SVN
    repository. All prior history from the SVN repository should still be preserved
    (i.e. commit hashes are the same for historical commits).
    No other source changes are made by this commit since both the old and new
    HEADs contain the same source tree (albeit with difference metadata) whilst the
    previous git-svn HEAD can be retrieved via the svn-head branch.
    Proposed-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>

  [ Fam Zheng ]
  * [d27ba62] util: Fix MIN_NON_ZERO.
    MIN_NON_ZERO(1, 0) is evaluated to 0. Rewrite the macro to fix it.
    Reported-by: Miroslav Rezanina <mrezanin@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1468306113-847-1-git-send-email-famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Alberto Garcia ]
  * [2933800] stream: Fix prototype of stream_start()
    'stream-start' has a parameter called 'backing-file', which is the
    string to be written to bs->backing when the job finishes.
    In the stream_start() implementation it is called 'backing_file_str',
    but it the prototype in the header file it is called 'base_id'.
    This patch fixes it so the name is the same in both cases and is
    consistent with other cases (like commit_start()).
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [9df229c] blockjob: Update description of the 'id' field.
    The 'id' field of the BlockJob structure will be able to hold any ID,
    not only a device name. This patch updates the description of that
    field and the error messages where it is being used.
    Soon we'll add the ability to set an arbitrary ID when creating a
    block job.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [ffb1f10] blockjob: Add block_job_get()
    Currently the way to look for a specific block job is to iterate the
    list manually using block_job_next().
    Since we want to be able to identify a job primarily by its ID it
    makes sense to have a function that does just that.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [3ddf3ef] block: Use block_job_get() in find_block_job()
    find_block_job() looks for a block backend with a specified name,
    checks whether it has a block job and acquires its AioContext.
    We want to identify jobs by their ID and not by the block backend
    they're attached to, so this patch ignores the backends altogether and
    gets the job directly. Apart from making the code simpler, this will
    allow us to find block jobs once they start having user-specified IDs.
    To ensure backward compatibility we keep ERROR_CLASS_DEVICE_NOT_ACTIVE
    as the error class if the job doesn't exist. In subsequent patches
    we'll also need to keep the device name as the default job ID if the
    user doesn't specify a different one.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [7f0317c] blockjob: Add 'job_id' parameter to block_job_create()
    When a new job is created, the job ID is taken from the device name of
    the BDS. This patch adds a new 'job_id' parameter to let the caller
    provide one instead.
    This patch also verifies that the ID is always unique and well-formed.
    This causes problems in a couple of places where no ID is being set,
    because the BDS does not have a device name.
    In the case of test_block_job_start() (from test-blockjob-txn.c) we
    can simply use this new 'job_id' parameter to set the missing ID.
    In the case of img_commit() (from qemu-img.c) we still don't have the
    API to make commit_active_start() set the job ID, so we solve it by
    setting a default value. We'll get rid of this as soon as we extend
    the API.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [71aa986] mirror: Add 'job-id' parameter to 'blockdev-mirror' and 'drive-mirror'
    This patch adds a new optional 'job-id' parameter to 'blockdev-mirror'
    and 'drive-mirror', allowing the user to specify the ID of the block
    job to be created.
    The HMP 'drive_mirror' command remains unchanged.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [70559d4] backup: Add 'job-id' parameter to 'blockdev-backup' and 'drive-backup'
    This patch adds a new optional 'job-id' parameter to 'blockdev-backup'
    and 'drive-backup', allowing the user to specify the ID of the block
    job to be created.
    The HMP 'drive_backup' command remains unchanged.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [2323322] stream: Add 'job-id' parameter to 'block-stream'
    This patch adds a new optional 'job-id' parameter to 'block-stream',
    allowing the user to specify the ID of the block job to be created.
    The HMP 'block_stream' command remains unchanged.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [fd62c60] commit: Add 'job-id' parameter to 'block-commit'
    This patch adds a new optional 'job-id' parameter to 'block-commit',
    allowing the user to specify the ID of the block job to be created.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a5d5a3b] qemu-img: Set the ID of the block job in img_commit()
    img_commit() creates a block job without an ID. This is no longer
    allowed now that we require it to be unique and well-formed. We were
    solving this by having a fallback in block_job_create(), but now that
    we extended the API of commit_active_start() we can finally set an
    explicit ID and revert that change.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [6aae5be] blockjob: Update description of the 'device' field in the QMP API.
    The 'device' field in all BLOCK_JOB_* events and 'block-job-*' command
    is no longer the device name, but the ID of the job. This patch
    updates the documentation to clarify that.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Fam Zheng ]
  * [761d1dd] osdep: Introduce qemu_dup.
    And use it in qemu_dup_flags.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [5af7045] raw-posix: Use qemu_dup.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Paolo Bonzini ]
  * [7d9c858] coroutine: use QSIMPLEQ instead of QTAILQ.
    CoQueue do not need to remove any element but the head of the list;
    processing is always strictly FIFO.  Therefore, the simpler singly-linked
    QSIMPLEQ can be used instead.
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [7e70cdb] test-coroutine: prepare for the next patch.
    The next patch moves the coroutine argument from first-enter to
    creation time.  In this case, coroutine has not been initialized
    yet when the coroutine is created, so change to a pointer.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [0b8b875] coroutine: move entry argument to qemu_coroutine_create.
    In practice the entry argument is always known at creation time, and
    it is confusing that sometimes qemu_coroutine_enter is used with a
    non-NULL argument to re-enter a coroutine (this happens in
    block/sheepdog.c and tests/test-coroutine.c).  So pass the opaque value
    at creation time, for consistency with e.g. aio_bh_new.
    Mostly done with the following semantic patch:
    @ entry1 @
    expression entry, arg, co;
    @@
    - co = qemu_coroutine_create(entry);
    + co = qemu_coroutine_create(entry, arg);
      ...
    - qemu_coroutine_enter(co, arg);
    + qemu_coroutine_enter(co);
    @ entry2 @
    expression entry, arg;
    identifier co;
    @@
    - Coroutine *co = qemu_coroutine_create(entry);
    + Coroutine *co = qemu_coroutine_create(entry, arg);
      ...
    - qemu_coroutine_enter(co, arg);
    + qemu_coroutine_enter(co);
    @ entry3 @
    expression entry, arg;
    @@
    - qemu_coroutine_enter(qemu_coroutine_create(entry), arg);
    + qemu_coroutine_enter(qemu_coroutine_create(entry, arg));
    @ reentry @
    expression co;
    @@
    - qemu_coroutine_enter(co, NULL);
    + qemu_coroutine_enter(co);
    except for the aforementioned few places where the semantic patch
    stumbled (as expected) and for test_co_queue, which would otherwise
    produce an uninitialized variable warning.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Kevin Wolf ]
  * [8daea51] block/qdev: Allow node name for drive properties.
    If a node name instead of a BlockBackend name is specified as the driver
    for a guest device, an anonymous BlockBackend is created now.
    The order of operations in release_drive() must be reversed in order to
    avoid a use-after-free bug because now blk_detach_dev() frees the last
    reference if an anonymous BlockBackend is used.
    usb-storage uses a hack where it forwards its BlockBackend as a property
    to another device that it internally creates. This hack must be updated
    so that it doesn't drop its original BB before it can be passed to the
    other device. This used to work because we always had the monitor
    reference around, but with node-names the device reference is the only
    one now.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>

  [ Marc-André Lureau ]
  * [9e32ff3] tap: use an exit notifier to call down_script.
    We would like to move back net_cleanup() at the end of main function,
    like it used to be until f30dbae63a46f23116715dff8d130c, but minimum
    tap cleanup is necessary regarless at exit() time. Use an exit notifier
    to call TAP down_script. If net_cleanup() is called first, then remove
    the exit notifier as it will become a dangling pointer otherwise.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20160711144847.16651-1-marcandre.lureau@redhat.com>
    Reviewed-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [f6c2e66] slirp: use exit notifier for slirp_smb_cleanup.
    We would like to move back net_cleanup() at the end of main function,
    like it used to be until f30dbae63a46f23116715dff8d130c, but minimum
    cleanup is needed regardless at exit() time for slirp's SMB
    functionality.  Use an exit notifier to call slirp_smb_cleanup.
    If net_cleanup() is called first, then remove the exit notifier as it
    will become a dangling pointer otherwise.
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8caf911] net: do not use atexit for cleanup.
    This will be necessary in the next patch, which stops using atexit for
    character devices; without it, vhost-user and the redirector filter
    will cause a use-after-free.  Relying on the ordering of atexit calls
    is also brittle, even now that both the network and chardev
    subsystems are using atexit.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Marc-André Lureau ]
  * [aa5cb7f] char: do not use atexit cleanup handler.
    It turns out qemu is calling exit() in various places from various
    threads without taking much care of resources state. The atexit()
    cleanup handlers cannot easily destroy resources that are in use (by
    the same thread or other).
    Since c1111a24a3, TCG arm guests run into the following abort() when
    running tests, the chardev mutex is locked during the write, so
    qemu_mutex_destroy() returns an error:
     #0  0x00007fffdbb806f5 in raise () at /lib64/libc.so.6
     #1  0x00007fffdbb822fa in abort () at /lib64/libc.so.6
     #2  0x00005555557616fe in error_exit (err=<optimized out>, msg=msg@entry=0x555555c38c30 <__func__.14622> "qemu_mutex_destroy")
         at /home/drjones/code/qemu/util/qemu-thread-posix.c:39
     #3  0x0000555555b0be20 in qemu_mutex_destroy (mutex=mutex@entry=0x5555566aa0e0) at /home/drjones/code/qemu/util/qemu-thread-posix.c:57
     #4  0x00005555558aab00 in qemu_chr_free_common (chr=0x5555566aa0e0) at /home/drjones/code/qemu/qemu-char.c:4029
     #5  0x00005555558b05f9 in qemu_chr_delete (chr=<optimized out>) at /home/drjones/code/qemu/qemu-char.c:4038
     #6  0x00005555558b05f9 in qemu_chr_delete (chr=<optimized out>) at /home/drjones/code/qemu/qemu-char.c:4044
     #7  0x00005555558b062c in qemu_chr_cleanup () at /home/drjones/code/qemu/qemu-char.c:4557
     #8  0x00007fffdbb851e8 in __run_exit_handlers () at /lib64/libc.so.6
     #9  0x00007fffdbb85235 in  () at /lib64/libc.so.6
     #10 0x00005555558d1b39 in testdev_write (testdev=0x5555566aa0a0) at /home/drjones/code/qemu/backends/testdev.c:71
     #11 0x00005555558d1b39 in testdev_write (chr=<optimized out>, buf=0x7fffc343fd9a "", len=0) at /home/drjones/code/qemu/backends/testdev.c:95
     #12 0x00005555558adced in qemu_chr_fe_write (s=0x5555566aa0e0, buf=buf@entry=0x7fffc343fd98 "0q", len=len@entry=2) at /home/drjones/code/qemu/qemu-char.c:282
    Instead of using a atexit() handler, only run the chardev cleanup as
    initially proposed at the end of main(), where there are less chances
    (hic) of conflicts or other races.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reported-by: Andrew Jones <drjones@redhat.com>
    Message-Id: <20160704153823.16879-1-marcandre.lureau@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Xiao Guangrong ]
  * [1454d33] hostmem: fix QEMU crash by 'info memdev'
    'info memdev' crashes QEMU:
       (qemu) info memdev
       Unexpected error in parse_str() at qapi/string-input-visitor.c:111:
       Parameter 'null' expects an int64 value or range
    It is caused by null uint16List is returned if 'host-nodes' is the default
    value
    Return MAX_NODES under this case to fix this bug
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [2aece63] hostmem: detect host backend memory is being used properly.
    Currently, we use memory_region_is_mapped() to detect if the host
    backend memory is being used. This works if the memory is directly
    mapped into guest's address space, however, it is not true for
    nvdimm as it uses aliased memory region to map the memory. This is
    why this bug can happen:
       https://bugzilla.redhat.com/show_bug.cgi?id=1352769
    Fix it by introduce a new filed, is_mapped, to HostMemoryBackend,
    we set/clear this filed accordingly when the device link/unlink to
    host backend memory
    Signed-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Kevin Wolf ]
  * [f6166a0] block/qdev: Allow configuring WCE with qdev properties.
    As cache.writeback is a BlockBackend property and as such more related
    to the guest device than the BlockDriverState, we already removed it
    from the blockdev-add interface. This patch adds the new way to set it,
    as a qdev property of the corresponding guest device.
    For example: -drive if=none,file=test.img,node-name=img
                 -device ide-hd,drive=img,write-cache=off
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [1e8fb7f] commit: Fix use of error handling policy.
    Commit implemented the 'enospc' policy as 'ignore' if the error was not
    ENOSPC. The QAPI documentation promises that it's treated as 'stop'.
    Using the common block job error handling function fixes this and also
    adds the missing QMP event.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [8c39825] block/qdev: Allow configuring rerror/werror with qdev properties.
    The rerror/werror policies are implemented in the devices, so that's
    where they should be configured. In comparison to the old options in
    -drive, the qdev properties are only added to those devices that
    actually support them.
    If the option isn't given (or "auto" is specified), the setting of the
    BlockBackend is used for compatibility with the old options. For block
    jobs, "auto" is the same as "enospc".
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [62ed9fa] qemu-iotests: Test setting WCE with qdev.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
  * [35fedb7] block: Remove BB options from blockdev-add
    werror/rerror are now available as qdev options. The stats-* options are
    removed without an existing replacement; they should probably be
    configurable with a separate QMP command like I/O throttling settings.
    Removing id is left for another day because this involves updating
    qemu-iotests cases to use node-name for everything. Before we can do
    that, however, all QMP commands must support node-name.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>

  [ Max Reitz ]
  * [bcf2348] qemu-img: Use strerror() for generic resize error.
    Emitting the plain error number is not very helpful. Use strerror()
    instead.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160615153630.2116-2-mreitz@redhat.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [84c2652] qcow2: Avoid making the L1 table too big.
    We refuse to open images whose L1 table we deem "too big". Consequently,
    we should not produce such images ourselves.
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160615153630.2116-3-mreitz@redhat.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    [mreitz: Added QEMU_BUILD_BUG_ON()]
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [a367467] qemu-io: Use correct range limitations
    create_iovec() has a comment lamenting the lack of SIZE_T_MAX. Since
    there actually is a SIZE_MAX, use it.
    Two places use INT_MAX for checking the upper bound of a sector count
    that is used as an argument for a blk_*() function (blk_discard() and
    blk_write_compressed(), respectively). BDRV_REQUEST_MAX_SECTORS should
    be used instead.
    And finally, do_co_pwrite_zeroes() used to similarly check that the
    sector count does not exceed INT_MAX. However, this function is now
    backed by blk_co_pwrite_zeroes() which takes bytes as an argument
    instead of sectors. Therefore, it should be the byte count that does not
    exceed INT_MAX, not the sector count.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [c834cba] qcow2: Fix qcow2_get_cluster_offset()
    Recently, qcow2_get_cluster_offset() has been changed to work with bytes
    instead of sectors. This invalidated some assertions and introduced a
    possible integer multiplication overflow.
    This could be reproduced using e.g.
    $ qemu-img create -f qcow2 -o cluster_size=1M blub.qcow2 8G
    Formatting 'foo.qcow2', fmt=qcow2 size=8589934592 encryption=off
    cluster_size=1048576 lazy_refcounts=off refcount_bits=16
    $ qemu-io -c map blub.qcow2
    qemu-io: qemu/block/qcow2-cluster.c:504: qcow2_get_cluster_offset:
    Assertion `bytes_needed <= INT_MAX' failed.
    [1]    20775 abort (core dumped)  qemu-io -c map foo.qcow2
    This patch removes the now wrong assertion, adding comments and more
    assertions to prove its correctness (and fixing the overflow which would
    become apparent with the original assertion removed).
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160620142623.24471-3-mreitz@redhat.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Sascha Silbe ]
  * [f14a39c] Improve block job rate limiting for small bandwidth values
    ratelimit_calculate_delay() previously reset the accounting every time
    slice, no matter how much data had been processed before. This had (at
    least) two consequences:
    1. The minimum speed is rather large, e.g. 5 MiB/s for commit and stream.
       Not sure if there are real-world use cases where this would be a
       problem. Mirroring and backup over a slow link (e.g. DSL) would
       come to mind, though.
    2. Tests for block job operations (e.g. cancel) were rather racy
       All block jobs currently use a time slice of 100ms. That's a
       reasonable value to get smooth output during regular
       operation. However this also meant that the state of block jobs
       changed every 100ms, no matter how low the configured limit was. On
       busy hosts, qemu often transferred additional chunks until the test
       case had a chance to cancel the job.
    Fix the block job rate limit code to delay for more than one time
    slice to address the above issues. To make it easier to handle
    oversized chunks we switch the semantics from returning a delay
    _before_ the current request to a delay _after_ the current
    request. If necessary, this delay consists of multiple time slice
    units.
    Since the mirror job sends multiple chunks in one go even if the rate
    limit was exceeded in between, we need to keep track of the start of
    the current time slice so we can correctly re-compute the delay for
    the updated amount of data.
    The minimum bandwidth now is 1 data unit per time slice. The block
    jobs are currently passing the amount of data transferred in sectors
    and using 100ms time slices, so this translates to 5120
    bytes/second. With chunk sizes usually being O(512KiB), tests have
    plenty of time (O(100s)) to operate on block jobs. The chance of a
    race condition now is fairly remote, except possibly on insanely
    loaded systems.
    Signed-off-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Message-id: 1467127721-9564-2-git-send-email-silbe@linux.vnet.ibm.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Reda Sallahi ]
  * [524089b] vmdk: fix metadata write regression.
    Commit "cdeaf1f vmdk: add bdrv_co_write_zeroes" causes a regression on
    writes. It writes metadata after every write instead of doing it only once
    for each cluster.
    vmdk_pwritev() writes metadata whenever m_data is set as valid so this patch
    sets m_data as valid only when we have a new cluster which hasn't been
    allocated before or a zero grain.
    Signed-off-by: Reda Sallahi <fullmanet@gmail.com>
    Message-id: 20160707084249.29084-1-fullmanet@gmail.com
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Alberto Garcia ]
  * [ff356ee] blockdev: Fix regression with the default naming of throttling groups.
    When I/O limits are set for a block device, the name of the throttling
    group is taken from the BlockBackend if the user doesn't specify one.
    Commit efaa7c4eeb7490c6f37f3 moved the naming of the BlockBackend in
    blockdev_init() to the end of the function, after I/O limits are set.
    The consequence is that the throttling group gets an empty name.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reported-by: Stefan Hajnoczi <stefanha@redhat.com>
    Cc: Max Reitz <mreitz@redhat.com>
    Cc: qemu-stable@nongnu.org
    Message-id: af5cd58bd2c4b9f6c57f260d9cfe586b9fb7d34d.1467986342.git.berto@igalia.com
    [mreitz: Use existing "id" variable instead of new "blk_id"]
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [435d5ee] qemu-iotests: Test naming of throttling groups.
    Throttling groups are named using the 'group' parameter of the
    block_set_io_throttle command and the throttling.group command-line
    option. If that parameter is unspecified the groups get the name of
    the block device.
    This patch adds a new test to check the naming of throttling groups.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Message-id: d87d02823a6b91609509d8bb18e2f5dbd9a6102c.1467986342.git.berto@igalia.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Lin Ma ]
  * [3a1ee71] hmp: use snapshot name to determine whether a snapshot is 'fully available'
    Currently qemu uses snapshot id to determine whether a snapshot is fully
    available, It causes incorrect output in some scenario.
    For instance:
    (qemu) info block
    drive_image1 (#block113): /opt/vms/SLES12-SP1-JeOS-x86_64-GM/disk0.qcow2
    (qcow2)
        Cache mode:       writeback
    drive_image2 (#block349): /opt/vms/SLES12-SP1-JeOS-x86_64-GM/disk1.qcow2
    (qcow2)
        Cache mode:       writeback
    (qemu)
    (qemu) info snapshots
    There is no snapshot available.
    (qemu)
    (qemu) snapshot_blkdev_internal drive_image1 snap1
    (qemu)
    (qemu) info snapshots
    There is no suitable snapshot available
    (qemu)
    (qemu) savevm checkpoint-1
    (qemu)
    (qemu) info snapshots
    ID        TAG                 VM SIZE                DATE       VM CLOCK
    1         snap1                     0 2016-05-22 16:57:31   00:01:30.567
    (qemu)
    $ qemu-img snapshot -l disk0.qcow2
    Snapshot list:
    ID        TAG                 VM SIZE                DATE       VM CLOCK
    1         snap1                     0 2016-05-22 16:57:31   00:01:30.567
    2         checkpoint-1           165M 2016-05-22 16:58:07   00:02:06.813
    $ qemu-img snapshot -l disk1.qcow2
    Snapshot list:
    ID        TAG                 VM SIZE                DATE       VM CLOCK
    1         checkpoint-1              0 2016-05-22 16:58:07   00:02:06.813
    The patch uses snapshot name instead of snapshot id to determine whether a
    snapshot is fully available and uses '--' instead of snapshot id in output
    because the snapshot id is not guaranteed to be the same on all images.
    For instance:
    (qemu) info snapshots
    List of snapshots present on all disks:
     ID        TAG                 VM SIZE                DATE       VM CLOCK
     --        checkpoint-1           165M 2016-05-22 16:58:07   00:02:06.813
    Signed-off-by: Lin Ma <lma@suse.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Message-id: 1467869164-26688-2-git-send-email-lma@suse.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [0c204cc] hmp: show all of snapshot info on every block dev in output of 'info snapshots'
    Currently, the output of 'info snapshots' shows fully available snapshots.
    It's opaque, hides some snapshot information to users. It's not convenient
    if users want to know more about all of snapshot information on every block
    device via monitor.
    Follow Kevin's and Max's proposals, The patch makes the output more detailed:
    (qemu) info snapshots
    List of snapshots present on all disks:
     ID        TAG                 VM SIZE                DATE       VM CLOCK
     --        checkpoint-1           165M 2016-05-22 16:58:07   00:02:06.813
    List of partial (non-loadable) snapshots on 'drive_image1':
     ID        TAG                 VM SIZE                DATE       VM CLOCK
     1         snap1                     0 2016-05-22 16:57:31   00:01:30.567
    Signed-off-by: Lin Ma <lma@suse.com>
    Message-id: 1467869164-26688-3-git-send-email-lma@suse.com
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Max Reitz ]
  * [c4b48bf] vvfat: Fix qcow write target driver specification.
    First, bdrv_open_child() expects all options for the child to be
    prefixed by the child's name (and a separating dot). Second,
    bdrv_open_child() does not take ownership of the QDict passed to it but
    only extracts all options for the child, so if a QDict is created for
    the sole purpose of passing it to bdrv_open_child(), it needs to be
    freed afterwards.
    This patch makes vvfat adhere to both of these rules.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160711135452.11304-1-mreitz@redhat.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [42190dc] iotests: Make 157 actually format-agnostic
    iotest 157 pretends not to care about the image format used, but in fact
    it does due to the format name not being filtered in its output. This
    patch adds filtering and changes the reference output accordingly.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-id: 20160711132246.3152-1-mreitz@redhat.com
    Reviewed-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Max Filippov ]
  * [f9a555e] target-xtensa: xtfpga: fix FLASH interface width.
    FLASH chip on XTFPGA boards is connected with 16-bit-wide interface.
    Latest U-Boot can see the difference and does not work correctly with
    32-bit-wide interface.
    Set FLASH chip 'width' property to 2.
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>

  [ Marc Marí ]
  * [b2a575a] Add optionrom compatible with fw_cfg DMA version.
    This optionrom is based on linuxboot.S.
    Signed-off-by: Marc Marí <markmb@redhat.com>
    Signed-off-by: Richard W.M. Jones <rjones@redhat.com>
    Message-Id: <1464027093-24073-2-git-send-email-rjones@redhat.com>
    [Add -fno-toplevel-reorder, support clang without -m16. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Laszlo Ersek ]
  * [f58b39d] virtio-mmio: format transport base address in BusClass.get_dev_path.
    At the moment the following QEMU command line triggers an assertion
    failure (minimal reproducer by Cole):
      qemu-system-aarch64 \
        -machine virt-2.6,accel=tcg \
        -nodefaults \
        -no-user-config \
        -nographic -monitor stdio \
        -device virtio-scsi-device,id=scsi0 \
        -device virtio-scsi-device,id=scsi1 \
        -drive file=foo.img,format=raw,if=none,id=d0 \
        -device scsi-hd,bus=scsi0.0,drive=d0 \
        -drive file=foo.img,format=raw,if=none,id=d1 \
        -device scsi-hd,bus=scsi1.0,drive=d1
      qemu-system-aarch64: migration/savevm.c:615:
      vmstate_register_with_alias_id:
      Assertion `!se->compat || se->instance_id == 0' failed.
    The reason is that the vmstate sections for the two scsi-hd devices are
    not uniquely identifiable by name.
    The direct parent buses of the scsi-hd devices -- scsi0.0 and scsi1.0 --
    support the BusClass.get_dev_path member function. scsibus_get_dev_path()
    formats a device path prefix with the help of its topologically parent
    bus, and then appends the chan:id:lun triplet to it. For both scsi-hd
    devices, this triplet is 0:0:0.
    (Here we use "device path" in the QEMU migration sense, for vmstate
    section identification, not in the OFW or UEFI device path senses.)
    The virtio-scsi HBA is plugged into the virtio-mmio bus (implemented by
    the internal VirtIOMMIOProxy device). This bus class
    (TYPE_VIRTIO_MMIO_BUS) inherits, as its get_dev_path() member function,
    the virtio_bus_get_dev_path() method from its parent class
    (TYPE_VIRTIO_BUS).
    virtio_bus_get_dev_path() does not format any kind of device address on
    its own; "virtio addresses" are transport-specific. Therefore
    virtio_bus_get_dev_path() asks the topologically parent bus of the proxy
    object (implementing the specific virtio transport) to format the address
    of the proxy object.
    (For virtio-pci devices (where the proxy is an instance of VirtIOPCIProxy,
    plugged into a PCI bus), this ends up in pcibus_get_dev_path().)
    However, VirtIOMMIOProxy is usually (in practice: always) plugged into
    "main-system-bus", the singleton TYPE_SYSTEM_BUS object. This BusClass
    does not support formatting QEMU vmstate device paths at all (as
    SysBusDevice objects can have zero or more IO ports and zero or more MMIO
    regions). Hence the formatting request delegated from
    virtio_bus_get_dev_path() gets answered with NULL.
    The end result is that the two scsi-hd devices end up with the same device
    path "0:0:0", which triggers the assert.
    We can solve this by recognizing that virtio-mmio transports are
    distinguished from each other by their base addresses in MMIO address
    space. Implement virtio_mmio_bus_get_dev_path() as follows:
    (1) The virtio device whose devpath is to be formatted resides on a
        virtio-mmio bus that is implemented by a VirtIOMMIOProxy object. Ask
        the parent bus of VirtIOMMIOProxy to format the device path of
        VirtIOMMIOProxy, as a path prefix. (This is identical to what
        virtio_bus_get_dev_path() does.)
    (2) Append the base address of VirtIOMMIOProxy to the device path, such
        as:
        - virtio-mmio@000000000a003e00,
        - virtio-mmio@000000000a003c00.
    Given that these device paths are placed in the migration stream, step (2)
    above, if done unconditionally, would break migration. So make that step
    conditional on a new VirtIOMMIOProxy property, which is enabled for 2.7
    machine types and later.
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Cole Robinson <crobinso@redhat.com>
    Cc: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Cc: Kevin Zhao <kevin.zhao@linaro.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Cc: Tom Hanson <thomas.hanson@linaro.org>
    Reported-by: Kevin Zhao <kevin.zhao@linaro.org>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Laszlo Ersek <lersek@redhat.com>
    Message-id: 1467739394-28357-1-git-send-email-lersek@redhat.com
    Fixes: https://bugs.launchpad.net/qemu/+bug/1594239
    Signed-off-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Dmitry Osipenko ]
  * [56215da] Revert "hw/ptimer: Perform counter wrap around if timer already expired"
    Software should see timer counter wraparound only after IRQ being triggered.
    This fixes regression introduced by the commit 5a50307 ("hw/ptimer: Perform
    counter wrap around if timer already expired"), resulting in monotonic timer
    jumping backwards on SPARC emulated machine running NetBSD guest OS, as
    reported by Mark Cave-Ayland.
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Message-id: 20160708132206.2080-1-digetx@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Vijay ]
  * [7069532] target-arm: Use Neon for zero checking.
    Use Neon instructions to perform zero checking of
    buffer. This is helps in reducing total migration time.
    Use case: Idle VM live migration with 4 VCPUS and 8GB ram
    running CentOS 7.
    Without Neon, the Total migration time is 3.5 Sec
    Migration status: completed
    total time: 3560 milliseconds
    downtime: 33 milliseconds
    setup: 5 milliseconds
    transferred ram: 297907 kbytes
    throughput: 685.76 mbps
    remaining ram: 0 kbytes
    total ram: 8519872 kbytes
    duplicate: 2062760 pages
    skipped: 0 pages
    normal: 69808 pages
    normal bytes: 279232 kbytes
    dirty sync count: 3
    With Neon, the total migration time is 2.9 Sec
    Migration status: completed
    total time: 2960 milliseconds
    downtime: 65 milliseconds
    setup: 4 milliseconds
    transferred ram: 299869 kbytes
    throughput: 830.19 mbps
    remaining ram: 0 kbytes
    total ram: 8519872 kbytes
    duplicate: 2064313 pages
    skipped: 0 pages
    normal: 70294 pages
    normal bytes: 281176 kbytes
    dirty sync count: 3
    Signed-off-by: Vijaya Kumar K <vijayak@cavium.com>
    Signed-off-by: Suresh <ksuresh@cavium.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1467190029-694-2-git-send-email-vijayak@cavium.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Andrew Jones ]
  * [c8efd80] gic: provide defines for v2/v3 targetlist sizes.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1467378129-23302-2-git-send-email-drjones@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [95eb49c] hw/arm/virt: tcg: adjust MPIDR like KVM.
    KVM adjusts the MPIDR of guest vcpus based on the architecture of
    the host, 32-bit vs. 64-bit, and, for 64-bit, also on the type of
    GIC the guest is using. To be consistent and improve SGI efficiency
    we make the same adjustments for TCG as 64-bit KVM hosts. We neglect
    to add consistency with 32-bit KVM hosts, as that would reduce SGI
    efficiency and KVM is expected to change.
    As MPIDR is a system register, and thus guest visible, we only make
    adjustments for current and later versioned machines.
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Message-id: 1467378129-23302-3-git-send-email-drjones@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Sergey Sorokin ]
  * [541ef8c] target-arm: Add missed AArch32 TLBI sytem registers.
    Some PL2 related TLBI system registers are missed in AArch32
    implementation. The patch fixes it.
    Signed-off-by: Sergey Sorokin <afarallax@yandex.ru>
    Message-id: 1468328885-3217862-1-git-send-email-afarallax@yandex.ru
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Marcin Krzeminski ]
  * [fe84770] m25p80: Fix QIOR/DIOR handling for Winbond.
    Winbond also support continuous read mode, but as an opposite for other
    flash type read mode clock cycles are included to dummy cycles number.
    This path add proper handling of read mode byte and update needed
    dummy cycles. QPI mode and dummy cycles configuration are not supported.
    Signed-off-by: Marcin Krzeminski <marcin.krzeminski@nokia.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467809036-6986-1-git-send-email-marcin.krzeminski@nokia.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cédric Le Goater ]
  * [2ddfa28] hw/misc: fix typo in Aspeed SCU hw-strap2 property name.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467994016-11678-2-git-send-email-clg@kaod.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [97c2ed5] ast2400: replace aspeed_smc_is_implemented()
    aspeed_smc_is_implemented() filters invalid registers in a peculiar
    way. Let's remove it and open code the if conditions. It serves the
    same purpose, the aesthetic is better, and new registers can easily be
    added.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467994016-11678-3-git-send-email-clg@kaod.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [2e1f050] ast2400: pretend DMAs are done for U-boot.
    U-boot does SPI timing calibration using DMA tranfers. To let the
    initialization continue, we fake success by setting the DMA status of
    the Interrupt Control Register.
    For the moment, DMA support is not required as it is not used in
    normal operation.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467994016-11678-4-git-send-email-clg@kaod.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
  * [79a9f32] ast2400: externalize revision numbers.
    AST2400_A0_SILICON_REV is defined twice. Fix this by including the
    definition in the header file as well as the routine to check if a
    silicon revision is supported. It will useful to reuse in other
    controllers.
    Let's add also AST2500_A0_SILICON_REV for future use.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 1467994016-11678-5-git-send-email-clg@kaod.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Gerd Hoffmann ]
  * [5a8be0f] vnc: make sure we finish disconnect.
    It may happen that vnc connections linger in disconnecting state forever
    because VncState happens to be in a state where vnc_update_client()
    exists early and never reaches the vnc_disconnect_finish() call at the
    bottom of the function.  Fix that by doing an additinal check at the
    start of the function.
    https://bugzilla.redhat.com/show_bug.cgi?id=1352799
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1468405280-2571-1-git-send-email-kraxel@redhat.com

  [ Herongguang (Stephen) ]
  * [3f7e51b] vnc-enc-tight: fix off-by-one bug.
    In tight_encode_indexed_rect32, buf(or src)’s size is count. In for loop,
    the logic is supposed to be that i is an index into src, i should be
    incremented when incrementing src.
    This is broken when src is incremented but i is not before while loop,
    resulting in off-by-one bug in while loop.
    Signed-off-by: He Rongguang <herongguang.he@huawei.com>
    Message-id: 5784B8EB.7010008@huawei.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Peter Lieven ]
  * [66668d1] vnc-tight: fix regression with libxenstore
    commit 095497ff added thread local storage for the color counting
    palette. Unfortunately, a VncPalette is about 7kB on a x86_64 system.
    This memory is reserved from the stack of every thread and it
    exhausted the stack space of a libxenstore thread.
    Fix this by allocating memory only for the VNC encoding thread.
    Fixes: 095497ffc66b7f031ff2a17f1e50f5cb105ce588
    Reported-by: Juergen Gross <jgross@suse.com>
    Tested-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Message-id: 1468575911-20656-1-git-send-email-pl@kamp.de
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Mark Cave-Ayland ]
  * [5cebd88] Update OpenBIOS images to b747b6a built from submodule.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>

  [ Wei Jiangang ]
  * [55ad781] use g_path_get_dirname instead of dirname.
    Use g_path_get_basename to get the directory components of
    a file name, and free its return when no longer needed.
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Message-Id: <1459997185-15669-3-git-send-email-weijg.fnst@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Md Haris Iqbal ]
  * [fd9a304] Changed malloc to g_malloc, free to g_free in bsd-user/qemu.h.
    Signed-off-by: Md Haris Iqbal <haris.phnx@gmail.com>
    Message-Id: <1459861743-4514-1-git-send-email-haris.phnx@gmail.com>
    Reviewed-by: Sean Bruno <sbruno@freebsd.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Antonio Borneo ]
  * [3cbeb52] hw/i386: add device tree support.
    With "-dtb" on command-line:
    - append the device tree blob to the kernel image;
    - pass the blob's pointer to the kernel through setup_data, as
      requested by upstream kernel commit da6b737b9ab7 ("x86: Add
      device tree support").
    The device tree blob is passed as-is to the guest; none of its
    fields is modified nor updated. This is not an issue; the kernel
    commit above uses the device tree only as an extension to the
    traditional kernel configuration.
    To: "Michael S. Tsirkin" <mst@redhat.com>
    To: Paolo Bonzini <pbonzini@redhat.com>
    To: Richard Henderson <rth@twiddle.net>
    To: Eduardo Habkost <ehabkost@redhat.com>
    Cc: qemu-devel@nongnu.org
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Antonio Borneo <borneo.antonio@gmail.com>
    Message-Id: <1459973054-2777-1-git-send-email-borneo.antonio@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [8bff06a] compiler: never omit assertions if using a static analysis tool.
    Assertions help both Coverity and the clang static analyzer avoid
    false positives, but on the other hand both are confused when
    the condition is compiled as (void)(x != FOO).  Always expand
    assertion macros when using Coverity or clang, through a new
    QEMU_STATIC_ANALYSIS preprocessor symbol.
    This fixes a couple false positives in TCG.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8cc4678] megasas: remove useless check for cmd->frame
    megasas_enqueue_frame always returns with non-NULL cmd->frame.
    Remove the "else" part as it is dead code.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Stefan Hajnoczi ]
  * [d211bd6] checkpatch: consider git extended headers valid patches.
    Renames look like this with git-diff(1) when diff.renames = true is set:
      diff --git a/a b/b
      similarity index 100%
      rename from a
      rename to b
    This raises the "Does not appear to be a unified-diff format patch"
    error because checkpatch.pl only considers a diff valid if it contains
    at least one "@@" hunk.
    This patch accepts renames and copies too so that checkpatch.pl exits
    successfully when a diff only renames/copies files.  The git diff
    extended header format is described on the git-diff(1) man page.
    Reported-by: Colin Lord <clord@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-Id: <1468576014-28788-1-git-send-email-stefanha@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Lieven ]
  * [101420b] exec: avoid realloc in phys_map_node_reserve
    this is the first step in reducing the brk heap fragmentation
    created by the map->nodes memory allocation. Since the introduction
    of RCU the freeing of the PhysPageMaps is delayed so that sometimes
    several hundred are allocated at the same time.
    Even worse the memory for map->nodes is allocated and shortly
    afterwards reallocated. Since the number of nodes it grows
    to in the end is the same for all PhysPageMaps remember this value
    and at least avoid the reallocation.
    The large number of simultaneous allocations (about 450 x 70kB in
    my configuration) has to be addressed later.
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Message-Id: <1468577030-21097-1-git-send-email-pl@kamp.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Sergey Fedorov ]
  * [ca7d8e1] cpu-exec: Move down some declarations in cpu_exec()
    This will fix a compiler warning with -Wclobbered:
    http://lists.nongnu.org/archive/html/qemu-devel/2016-07/msg03347.html
    Reported-by: Stefan Weil <sw@weilnetz.de>
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Message-Id: <20160715193123.28113-1-sergey.fedorov@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Greg Kurz ]
  * [44d691f] spapr: fix core unplug crash.
    If the host has 8 threads/core and the guest is started with:
    -smp cores=1,threads=4,maxcpus=12
    It is possible to crash QEMU by doing:
    (qemu) device_add host-spapr-cpu-core,core-id=16,id=foo
    (qemu) device_del foo
    Segmentation fault
    This happens because spapr_core_unplug() assumes cpu_dt_id == core_id.
    As long as cpu_dt_id is derived from the non-table cpu_index, this is
    only true when you plug cores with contiguous ids.
    It is safer to be consistent: the DR connector was created with an
    index that is immediately written to cc->core_id, and spapr_core_plug()
    also relies on cc->core_id.
    Let's use it also in spapr_core_unplug().
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Mark Cave-Ayland ]
  * [ba0b17d] dbdma: always define DBDMA_DPRINTF and enable debug with DEBUG_DBDMA.
    Enabling DBDMA_DPRINTF unconditionally ensures that any errors in debug
    statements are picked up immediately.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [3e49c43] dbdma: add per-channel debugging enabled via DEBUG_DBDMA_CHANMASK.
    By default large amounts of DBDMA debugging are produced when often it is just
    1 or 2 channels that are of interest. Introduce DEBUG_DBDMA_CHANMASK to allow
    the developer to select the channels of interest at compile time, and then
    further add the extra channel information to each debug statement where
    possible.
    Also clearly mark the start/end of DBDMA_run_bh to allow tracking the bottom
    half execution.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [3f0d412] dbdma: fix endian of DBDMA_CMDPTR_LO during branch.
    The current DBDMA command is stored in little-endian format, so make sure
    we convert it to match our CPU when updating the DBDMA_CMDPTR_LO register.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [e12f50b] dbdma: fix load_word/store_word value endianness.
    The values to read/write to/from physical memory are copied directly to the
    physical address with no endian swapping required.
    Also add some extra information to debugging output while we are here.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [8949939] dbdma: set FLUSH bit upon reception of flush command for unassigned DBDMA channels.
    This fixes MacOS 9 whereby it continually flushes and polls the status bits
    until they are set to indicate a successful flush.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [2df7789] dbdma: reset io->processing flag for unassigned DBDMA channel rw accesses.
    Otherwise MacOS 9 hangs upon shutdown.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [36a24df] ppc: Fix support for odd MSR combinations.
    MacOS uses an architecturally illegal MSR combination that
    seems nonetheless supported by 32-bit processors, which is
    to have MSR[PR]=1 and one or more of MSR[DR/IR/EE]=0.
    This adds support for it. To work properly we need to also
    properly include support for PR=1,{I,D}R=0 to the MMU index
    used by the qemu TLB.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ David Gibson ]
  * [21bb309] vfio/spapr: Remove stale ioctl() call.
    This ioctl() call to VFIO_IOMMU_SPAPR_TCE_REMOVE was left over from an
    earlier version of the code and has since been folded into
    vfio_spapr_remove_window().
    It wasn't caught because although the argument structure has been removed,
    the libc function remove() means this didn't trigger a compile failure.
    The ioctl() was also almost certain to fail silently and harmlessly with
    the bogus argument, so this wasn't caught in testing.
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>

  [ Bharata B Rao ]
  * [5cbc64d] spapr: Ensure CPU cores are added contiguously and removed in LIFO order.
    If CPU core addition or removal is allowed in random order leading to
    holes in the core id range (and hence in the cpu_index range), migration
    can fail as migration with holes in cpu_index range isn't yet handled
    correctly.
    Prevent this situation by enforcing the addition in contiguous order
    and removal in LIFO order so that we never end up with holes in
    cpu_index range.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Greg Kurz ]
  * [c4dfc14] ppc: abort if compat property contains an unknown value.
    It is not possible to set the compat property to an unknown value with
    powerpc_set_compat(). Something must have gone terribly wrong in QEMU,
    if we detect an "Internal error" in powerpc_get_compat(). Let's abort then.
    This patch also drops the "max_compat ? *max_compat : -1" construct. It is
    useless since max_compat is dereferenced a few lines above.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Thomas Huth ]
  * [28f3331] ppc/mmu-hash64: Remove duplicated #include statement.
    No need to include error-report.h twice here.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Paolo Bonzini ]
  * [b56d417] target-ppc: fix left shift overflow in hpte_page_shift
    ps->pte_enc is a 32-bit value, which is shifted left and then compared
    to a 64-bit value.  It needs a cast before the shift.
    Reported by Coverity.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Thomas Huth ]
  * [159d2e3] ppc: Yet another fix for the huge page support detection mechanism.
    Commit 86b50f2e1bef ("Disable huge page support if it is not available
    for main RAM") already made sure that huge page support is not announced
    to the guest if the normal RAM of non-NUMA configurations is not backed
    by a huge page filesystem. However, there is one more case that can go
    wrong: NUMA is enabled, but the RAM of the NUMA nodes are not configured
    with huge page support (and only the memory of a DIMM is configured with
    it). When QEMU is started with the following command line for example,
    the Linux guest currently crashes because it is trying to use huge pages
    on a memory region that does not support huge pages:
     qemu-system-ppc64 -enable-kvm ... -m 1G,slots=4,maxmem=32G -object \
       memory-backend-file,policy=default,mem-path=/hugepages,size=1G,id=mem-mem1 \
       -device pc-dimm,id=dimm-mem1,memdev=mem-mem1 -smp 2 \
       -numa node,nodeid=0 -numa node,nodeid=1
    To fix this issue, we've got to make sure to disable huge page support,
    too, when there is a NUMA node that is not using a memory backend with
    huge page support.
    Fixes: 86b50f2e1befc33407bdfeb6f45f7b0d2439a740
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Paolo Bonzini ]
  * [1ac6c07] e1000e: fix incorrect access to pointer.
    This is not dereferencing the pointer, and instead checking only
    the value of the pointer.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [2c5e564] net: fix incorrect access to pointer.
    This is not dereferencing the pointer, and instead checking only
    the value of the pointer.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [4555ca6] net: fix incorrect argument to iov_to_buf.
    Coverity reports a "suspicious sizeof" which is indeed wrong.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
  * [091a6b2] tap: fix memory leak on failure to create a multiqueue tap device.
    Reported by Coverity.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Jiri Pirko ]
  * [a77f0a0] MAINTAINERS: release Scott from being a rocker maintainer.
    As requested by Scott, removing him.
    Signed-off-by: Scott Feldman <sfeldma@gmail.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Jason Wang ]
  * [103916c] e1000e: fix building without CONFIG_VMXNET3_PCI
    e1000e needs net_tx_pkt.o and net_rx_pkt.o too.
    Cc: Dmitry Fleytman <dmitry.fleytman@ravellosystems.com>
    Cc: Leonid Bloch <leonid.bloch@ravellosystems.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Vladimir Sementsov-Ogievskiy ]
  * [4e90ccc] spec/parallels: fix a mistake.
    We have only one flag for now - Empty Image flag. The patch fixes unused
    bits specification and marks bit 1 as usused.
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Paolo Bonzini ]
  * [0187f5c] linux-aio: share one LinuxAioState within an AioContext.
    This has better performance because it executes fewer system calls
    and does not use a bottom half per disk.
    Originally proposed by Ming Lei.
    [Changed #include "raw-aio.h" to "block/raw-aio.h" in win32-aio.c to fix
    build error as reported by Peter Maydell <peter.maydell@linaro.org>.
    --Stefan]
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1467650000-51385-1-git-send-email-pbonzini@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    squash! linux-aio: share one LinuxAioState within an AioContext

  [ Cao jin ]
  * [6977d90] aio_ctx_check: follow CODING_STYLE
    replace tab with spaces
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-id: 1468501843-14927-1-git-send-email-caoj.fnst@cn.fujitsu.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Roman Pen ]
  * [5e1b34a] linux-aio: prevent submitting more than MAX_EVENTS.
    Invoking io_setup(MAX_EVENTS) we ask kernel to create ring buffer for us
    with specified number of events.  But kernel ring buffer allocation logic
    is a bit tricky (ring buffer is page size aligned + some percpu allocation
    are required) so eventually more than requested events number is allocated.
    From a userspace side we have to follow the convention and should not try
    to io_submit() more or logic, which consumes completed events, should be
    changed accordingly.  The pitfall is in the following sequence:
        MAX_EVENTS = 128
        io_setup(MAX_EVENTS)
        io_submit(MAX_EVENTS)
        io_submit(MAX_EVENTS)
        /* now 256 events are in-flight */
        io_getevents(MAX_EVENTS) = 128
        /* we can handle only 128 events at once, to be sure
         * that nothing is pended the io_getevents(MAX_EVENTS)
         * call must be invoked once more or hang will happen. */
    To prevent the hang or reiteration of io_getevents() call this patch
    restricts the number of in-flights, which is now limited to MAX_EVENTS.
    Signed-off-by: Roman Pen <roman.penyaev@profitbricks.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468415004-31755-1-git-send-email-roman.penyaev@profitbricks.com
    Cc: Stefan Hajnoczi <stefanha@redhat.com>
    Cc: qemu-devel@nongnu.org
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Cao jin ]
  * [7e00346] aio-posix: remove useless parameter.
    Parameter **errp of aio_context_setup() is useless, remove it
    and clean up the related code.
    Cc: Stefan Hajnoczi <stefanha@redhat.com>
    Cc: Fam Zheng <famz@redhat.com>
    Cc: Eric Blake <eblake@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468578524-23433-1-git-send-email-caoj.fnst@cn.fujitsu.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Stefan Hajnoczi ]
  * [f8dccbb] checkpatch: consider git extended headers valid patches.
    Renames look like this with git-diff(1) when diff.renames = true is set:
      diff --git a/a b/b
      similarity index 100%
      rename from a
      rename to b
    This raises the "Does not appear to be a unified-diff format patch"
    error because checkpatch.pl only considers a diff valid if it contains
    at least one "@@" hunk.
    This patch accepts renames and copies too so that checkpatch.pl exits
    successfully when a diff only renames/copies files.  The git diff
    extended header format is described on the git-diff(1) man page.
    Reported-by: Colin Lord <clord@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468576014-28788-1-git-send-email-stefanha@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Cao jin ]
  * [ab3b9c1] virtio-blk: dataplane cleanup.
    No need duplicate the judgment, there is one in function entry.
    Cc: Stefan Hajnoczi <stefanha@redhat.com>
    Cc: Kevin Wolf <kwolf@redhat.com>
    Cc: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468814749-14510-1-git-send-email-caoj.fnst@cn.fujitsu.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Fam Zheng ]
  * [e1029ae] MAINTAINERS: Add include/block/aio.h to block I/O path section.
    This file is actually the header for async.c and aio-*.c., so add it to
    the same section.
    Suggested-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468826387-10473-1-git-send-email-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Pranith Kumar ]
  * [cb4c253] .travis.yml: Disable IRC build status updates from forks.
    We want the travis build bot to post notifications on IRC only for the
    master qemu repository and not the various forks/branches of
    others. Currently there is no direct option to restrict the updates to
    one repository. This is being worked upon by the developers and
    tracked in https://github.com/travis-ci/travis-ci/issues/1094.
    Until such time, we can use the workaround as posted in
    ref. https://github.com/facebook/flow/pull/1822.
    This basically creates an ecrypted string which decrypts to qemu IRC
    channel only on "qemu/qemu" repo and not on the forks. This enables
    the build bot to notify the IRC only for the main repo.
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>

  [ Alex Williamson ]
  * [383a7af] vfio/pci: Hide ARI capability.
    QEMU supports ARI on downstream ports and assigned devices may support
    ARI in their extended capabilities.  The endpoint ARI capability
    specifies the next function, such that the OS doesn't need to walk
    each possible function, however this next function is relative to the
    host, not the guest.  This leads to device discovery issues when we
    combine separate functions into virtual multi-function packages in a
    guest.  For example, SR-IOV VFs are not enumerated by simply probing
    the function address space, therefore the ARI next-function field is
    zero.  When we combine multiple VFs together as a multi-function
    device in the guest, the guest OS identifies ARI is enabled, relies on
    this next-function field, and stops looking for additional function
    after the first is found.
    Long term we should expose the ARI capability to the guest to enable
    configurations with more than 8 functions per slot, but this requires
    additional QEMU PCI infrastructure to manage the next-function field
    for multiple, otherwise independent devices.  In the short term,
    hiding this capability allows equivalent functionality to what we
    currently have on non-express chipsets.
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>

  [ Lluís Vilanova ]
  * [6533dd6] trace: [linux-user] Commandline arguments to control tracing
    [Changed const char *trace_file to char *trace_file since it's a
    heap-allocated string that needs to be freed.  This type is also
    returned by trace_opt_parse() and used in vl.c.
    --Stefan]
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Message-id: 146860251784.30668.17339867835129075077.stgit@fimbulvetr.bsc.es
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [6913e79] trace: [bsd-user] Commandline arguments to control tracing
    [Changed const char *trace_file to char *trace_file since it's a
    heap-allocated string that needs to be freed.  This type is also
    returned by trace_opt_parse() and used in vl.c.
    Also fixed coding style on for(;;) and else statement as suggested by
    Eric Blake <eblake@redhat.com> since the patch modifies these lines or
    close enough.
    --Stefan]
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Message-id: 146860252322.30668.18276041739086338328.stgit@fimbulvetr.bsc.es
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [17f7ac7] trace: Identify events with the 'vcpu' property.
    A new event attribute 'cpu_id' is added to have a separate ID
    space ('TRACE_VCPU_*') for all events with the 'vcpu' property.
    These are later used to identify which events are enabled on each vCPU.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [ca66f1a] disas: Remove unused macro '_'
    Eliminates a future compilation error when UI code includes the tracing
    headers (indirectly pulling "disas/bfd.h" through "qom/cpu.h") and
    GLib's i18n '_' macro.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [e1d6e0a] trace: Cosmetic changes on fast-path tracing.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [4815185] trace: Add per-vCPU tracing states for events with the 'vcpu' property.
    Each vCPU gets a 'trace_dstate' bitmap to control the per-vCPU dynamic
    tracing state of events with the 'vcpu' property.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [40b9cd2] trace: Conditionally trace events based on their per-vCPU state.
    Events with the 'vcpu' property are conditionally emitted according to
    their per-vCPU state. Other events are emitted normally based on their
    global tracing state.
    Note that the per-vCPU condition check applies to all tracing backends.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [bd71211] trace: Allow event name pattern in "info trace-events"
    Homogenizes the command capabilities with QMP.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [77e2b17] trace: Add QAPI/QMP interfaces to query and control per-vCPU tracing state.
    Signed-off-by: Lluís Vilanova <vilanova@ac.upc.edu>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Evgeny Yakovlev ]
  * [0eeee07] ide: refactor retry_unit set and clear into separate function.
    Code to set and clear state associated with retry in moved into
    ide_set_retry and ide_clear_retry to make adding retry setups easier.
    Signed-off-by: Evgeny Yakovlev <eyakovlev@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468870792-7411-2-git-send-email-den@openvz.org
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Fam Zheng <famz@redhat.com>
    CC: John Snow <jsnow@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>
  * [35f78ab] ide: set retry_unit for PIO and FLUSH requests.
    The following sequence of tests discovered a problem in IDE emulation:
    1. Send DMA write to IDE device 0
    2. Send CMD_FLUSH_CACHE to same IDE device which will be failed by block
    layer using blkdebug script in tests/ide-test:test_retry_flush
    When doing DMA request ide/core.c will set s->retry_unit to s->unit in
    ide_start_dma. When dma completes ide_set_inactive sets retry_unit to -1.
    After that ide_flush_cache runs and fails thanks to blkdebug.
    ide_flush_cb calls ide_handle_rw_error which asserts that s->retry_unit
    == s->unit. But s->retry_unit is still -1 after previous DMA completion
    and flush does not use anything related to retry.
    This patch restricts retry unit assertion only to ops that actually use
    retry logic.
    Signed-off-by: Evgeny Yakovlev <eyakovlev@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468870792-7411-3-git-send-email-den@openvz.org
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Fam Zheng <famz@redhat.com>
    CC: John Snow <jsnow@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>
  * [2dd7e10] tests: in IDE and AHCI tests perform DMA write before flushing.
    Due to changes in flush behaviour clean disks stopped generating
    flush_to_disk events and IDE and AHCI tests that test flush commands
    started to fail.
    This change adds additional DMA writes to affected tests before sending
    flush commands so that bdrv_flush actually generates flush_to_disk event.
    Signed-off-by: Evgeny Yakovlev <eyakovlev@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468870792-7411-4-git-send-email-den@openvz.org
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Fam Zheng <famz@redhat.com>
    CC: John Snow <jsnow@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>
  * [3ff2f67] block: ignore flush requests when storage is clean.
    Some guests (win2008 server for example) do a lot of unnecessary
    flushing when underlying media has not changed. This adds additional
    overhead on host when calling fsync/fdatasync.
    This change introduces a write generation scheme in BlockDriverState.
    Current write generation is checked against last flushed generation to
    avoid unnessesary flushes.
    The problem with excessive flushing was found by a performance test
    which does parallel directory tree creation (from 2 processes).
    Results improved from 0.424 loops/sec to 0.432 loops/sec.
    Each loop creates 10^3 directories with 10 files in each.
    This affected some blkdebug testcases that were expecting error logs from
    failure-injected flushes which are now skipped entirely
    (tests 026 071 089).
    This also affects the performance of block jobs and thus BLOCK_JOB_READY
    events for driver-mirror and active block-commit commands now arrives
    faster, before QMP send successfully returns to caller (tests 141 144).
    Signed-off-by: Evgeny Yakovlev <eyakovlev@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468870792-7411-5-git-send-email-den@openvz.org
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Fam Zheng <famz@redhat.com>
    CC: John Snow <jsnow@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>

  [ Pranith Kumar ]
  * [e5dfc5e] Move README to markdown.
    Move the README file to markdown so that it makes the github page look
    prettier. I know that github repo is a mirror and not the official
    repo, but I think it doesn't hurt to have it in markdown format.
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Message-Id: <20160715043111.29007-1-bobby.prani@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Lieven ]
  * [eb36b95] block/iscsi: fix rounding in iscsi_allocationmap_set
    when setting clusters as alloacted the boundaries have
    to be expanded. As Paolo pointed out the calculation of
    the number of clusters is wrong:
    Suppose cluster_sectors is 2, sector_num = 1, nb_sectors = 6:
    In the "mark allocated" case, you want to set 0..8, i.e.
    cluster_num=0, nb_clusters=4.
       0--.--2--.--4--.--6--.--8
       <--|_________________|-->  (<--> = expanded)
    Instead you are setting nb_clusters=3, so that 6..8 is not marked.
       0--.--2--.--4--.--6--.--8
       <--|______________|!!!     (! = wrong)
    Cc: qemu-stable@nongnu.org
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Message-Id: <1468831940-15556-2-git-send-email-pl@kamp.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [e1123a3] block/iscsi: allow caching of the allocation map
    until now the allocation map was used only as a hint if a cluster
    is allocated or not. If a block was not allocated (or Qemu had
    no info about the allocation status) a get_block_status call was
    issued to check the allocation status and possibly avoid
    a subsequent read of unallocated sectors. If a block known to be
    allocated the get_block_status call was omitted. In the other case
    a get_block_status call was issued before every read to avoid
    the necessity for a consistent allocation map. To avoid the
    potential overhead of calling get_block_status for each and
    every read request this took only place for the bigger requests.
    This patch enhances this mechanism to cache the allocation
    status and avoid calling get_block_status for blocks where
    the allocation status has been queried before. This allows
    for bypassing the read request even for smaller requests and
    additionally omits calling get_block_status for known to be
    unallocated blocks.
    Signed-off-by: Peter Lieven <pl@kamp.de>
    Message-Id: <1468831940-15556-3-git-send-email-pl@kamp.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Sergey Fedorov ]
  * [da6d48e] target-i386: Remove redundant HF_SOFTMMU_MASK
    'HF_SOFTMMU_MASK' is only set when 'CONFIG_SOFTMMU' is defined. So
    there's no need in this flag: test 'CONFIG_SOFTMMU' instead.
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Signed-off-by: Sergey Fedorov <sergey.fedorov@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20160715175852.30749-6-sergey.fedorov@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Mark Cave-Ayland ]
  * [4f194ce] Update OpenBIOS images to e79bca6 built from submodule.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>

  [ Paolo Bonzini ]
  * [fc76ae8] qapi: change QmpOutputVisitor to QSLIST.
    This saves a little memory compared to the doubly-linked QTAILQ.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <1467906798-5312-2-git-send-email-pbonzini@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    [Comment tweaked to avoid long line]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [3d344c2] qapi: change QmpInputVisitor to QSLIST.
    This saves a lot of memory compared to a statically-sized array,
    or at least 24kb could be considered a lot on an Atari ST.
    It also makes the code more similar to QmpOutputVisitor.
    This removes the limit on the depth of a QObject that can be processed
    into a QAPI tree.  This is not a problem because QObjects can be
    considered trusted; the text received on the QMP wire is untrusted
    input, but the JSON parser already takes pains to limit the QObject tree
    it creates.  We don't need the QMP input visitor to limit it again.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <1467906798-5312-3-git-send-email-pbonzini@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    [Commit message typo fixed]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Kővágó, Zoltán ]
  * [cebea51] net: use Netdev instead of NetClientOptions in client init.
    This way we no longer need NetClientOptions and can convert Netdev
    into a flat union.
    Signed-off-by: Kővágó, Zoltán <DirtY.iCE.hu@gmail.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <93ffdfed7054529635e6acb935150d95dc173a12.1441627176.git.DirtY.iCE.hu@gmail.com>
    [rework net_client_init1() to pass Netdev by copying from NetdevLegacy,
    rather than merging the two types - which means that we still need
    NetClientOptions after all.  Rebase to qapi changes. The bulk of the
    patch is mechanical, replacing 'opts' by 'netdev->opts', while
    net_client_init1() takes care of converting between legacy and modern
    types.]
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-2-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Eric Blake ]
  * [d0b1823] qapi: Require all branches of flat union enum to be covered.
    We were previously enforcing that all flat union branches were
    found in the corresponding enum, but not that all enum values
    were covered by branches.  The resulting generated code would
    abort() if the user passes the uncovered enum value.
    We don't automatically treat non-present branches in a flat
    union as empty types, for symmetry with simple unions (there,
    the enum type is generated from the list of all branches, so
    there is no way to omit a branch but still have it be part of
    the union).
    A later patch will add shorthand so that branches that are empty
    in flat unions can be declared as 'branch':{} instead of
    'branch':'Empty', to avoid the need for an otherwise useless
    explicit empty type.  [Such shorthand for simple unions is a bit
    harder to justify, since we would still have to generate a
    wrapper type that parses 'data':{}, rather than truly being an
    empty branch with no additional siblings to the 'type' member.]
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-3-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [cd50a25] qapi: Special case c_name() for empty type.
    Commit 7ce106a rendered QAPISchemaObjectType.c_name() redundant,
    since it now does nothing more than delegate to its superclass.
    However, rather than deleting it, we can restore part of the
    assertion that was removed in that commit, to prove that we never
    emit the empty type directly in generated code, but rather
    special-case it as a built-in that makes other aspects of code
    generation easier to reason about.
    Reported-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-4-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [da9cb19] qapi: Hide tag_name data member of variants.
    Clean up the only remaining external use of the tag_name field of
    QAPISchemaObjectTypeVariants, by explicitly listing the generated
    'type' tag for all variants in the testsuite (you can still tell
    simple unions by the -wrapper types).  Then we can mark the
    tag_name field as private by adding a leading underscore to prevent
    any further use.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-5-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [b616770] qapi: Add type.is_empty() helper.
    In the near future, we want to lift our artificial restriction of
    no variants at the top level of an event, at which point the
    currently open-coded check for empty members will become
    insufficient.  Factor it out into a new helper method is_empty()
    now, and future-proof it by checking variants, too, along with an
    assert that it is not used prior to the completion of .check().
    Update places that were checking for (non-)empty .members to use
    the new helper.
    All of the current callers assert that there are no variants (either
    directly, or by qapi.py asserting that base types have no variants),
    so this is not a semantic change.
    No change to generated code.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-6-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [fa274ed] qapi: Drop useless gen_err_check()
    Ever since commit 12f254f removed the last parameterization
    of gen_err_check(), it no longer makes sense to hide the three
    lines of generated C code behind a macro call. Just inline it
    into the remaining users.
    No change to generated code.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-7-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [4d0b268] qapi-event: Simplify visit of non-implicit data.
    Commit 7ce106a9 documented why we don't generated a visit_type_FOO()
    for implicit types; and therefore events with an anonymous type for
    'data' have to open-code a visit.  Note that the open-coded visit in
    qapi-event.c is slightly different from what is done in
    qapi-visit.c for normal types, in part because we don't have to
    check for *obj being NULL or free things on error.  But where the
    type is not implicit, it is nicer to reuse the normal visit instead
    of open-coding a duplicate.
    At the moment, the only event with a non-implicit 'data' is in the
    testsuite, where test-qapi-event.c changes as follows:
    |@@ -155,6 +155,7 @@ void qapi_event_send___org_qemu_x_event(
    |     __org_qemu_x_Struct param = {
    |         __org_qemu_x_member1, (char *)__org_qemu_x_member2, has_q_wchar_t, q_wchar_t
    |     };
    |+    __org_qemu_x_Struct *arg = &param;
    |
    |     emit = qmp_event_get_func_emit();
    |     if (!emit) {
    |@@ -164,16 +165,7 @@ void qapi_event_send___org_qemu_x_event(
    |     qmp = qmp_event_build_dict("__ORG.QEMU_X-EVENT");
    |
    |     v = qmp_output_visitor_new(&obj);
    |-
    |-    visit_start_struct(v, "__ORG.QEMU_X-EVENT", NULL, 0, &err);
    |-    if (err) {
    |-        goto out;
    |-    }
    |-    visit_type___org_qemu_x_Struct_members(v, &param, &err);
    |-    if (!err) {
    |-    if (!err) {
    |-        visit_check_struct(v, &err);
    |-    }
    |-    visit_end_struct(v, NULL);
    |+    visit_type___org_qemu_x_Struct(v, "__ORG.QEMU_X-EVENT", &arg, &err);
    |     if (err) {
    |         goto out;
    |     }
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-8-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [48825ca] qapi: Plumb in 'boxed' to qapi generator lower levels.
    The next patch will add support for passing a qapi union type
    as the 'data' of a command.  But to do that, the user function
    for implementing the command, as called by the generated
    marshal command, must take the corresponding C struct as a
    single boxed pointer, rather than a breakdown into one
    parameter per member.  Even without a union, being able to use
    a C struct rather than a list of parameters can make it much
    easier to handle coding with QAPI.
    This patch adds the internal plumbing of a 'boxed' flag
    associated with each command and event.  In several cases,
    this means adding indentation, with one new dead branch and
    the remaining branch being the original code more deeply
    nested; this was done so that the new implementation in the
    next patch is easier to review without also being mixed with
    indentation changes.
    For this patch, no behavior or generated output changes, other
    than the testsuite outputting the value of the new flag
    (always False for now).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-9-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    [Identifier box renamed to boxed in two places]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [c818408] qapi: Implement boxed types for commands/events.
    Turn on the ability to pass command and event arguments in
    a single boxed parameter, which must name a non-empty type
    (although the type can be a struct with all optional members).
    For structs, it makes it possible to pass a single qapi type
    instead of a breakout of all struct members (useful if the
    arguments are already in a struct or if the number of members
    is large); for other complex types, it is now possible to use
    a union or alternate as the data for a command or event.
    The empty type may be technically feasible if needed down the
    road, but it's easier to forbid it now and relax things to allow
    it later, than it is to allow it now and have to special case
    how the generated 'q_empty' type is handled (see commit 7ce106a9
    for reasons why nothing is generated for the empty type).  An
    alternate type is never considered empty, but now that a boxed
    type can be either an object or an alternate, we have to provide
    a trivial QAPISchemaAlternateType.is_empty().  The new call to
    arg_type.is_empty() during QAPISchemaCommand.check() requires
    that we first check the type in question; but there is no chance
    of introducing a cycle since objects do not refer back to commands.
    We still have a split in syntax checking between ad-hoc parsing
    up front (merely validates that 'boxed' has a sane value) and
    during .check() methods (if 'boxed' is set, then 'data' must name
    a non-empty user-defined type).
    Generated code is unchanged, as long as no client uses the
    new feature.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-10-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    [Test files renamed to *-boxed-*]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [4dc9397] block: Simplify block_set_io_throttle.
    Now that we can support boxed commands, use it to greatly
    reduce the number of parameters (and likelihood of getting
    out of sync) when adjusting throttle parameters.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Message-Id: <1468468228-27827-11-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [faecd40] block: Simplify drive-mirror.
    Now that we can support boxed commands, use it to greatly
    reduce the number of parameters (and likelihood of getting
    out of sync) when adjusting drive-mirror parameters.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Message-Id: <1468535878-3760-1-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Laurent Vivier ]
  * [ef759f6] linux-user: fd_trans_*_data() returns the length
    fd_trans_target_to_host_data() and fd_trans_host_to_target_data() must
    return the length of processed data.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [7d61d89] linux-user: fix netlink memory corruption.
    Netlink is byte-swapping data in the guest memory (it's bad).
    It's ok when the data come from the host as they are generated by the
    host.
    But it doesn't work when data come from the guest: the guest can
    try to reuse these data whereas they have been byte-swapped.
    This is what happens in glibc:
    glibc generates a sequence number in nlh.nlmsg_seq and calls
    sendto() with this nlh. In sendto(), we byte-swap nlmsg.seq.
    Later, after the recvmsg(), glibc compares nlh.nlmsg_seq with
    sequence number given in return, and of course it fails (hangs),
    because nlh.nlmsg_seq is not valid anymore.
    The involved code in glibc is:
    sysdeps/unix/sysv/linux/check_pf.c:make_request()
    ...
      req.nlh.nlmsg_seq = time (NULL);
    ...
      if (TEMP_FAILURE_RETRY (__sendto (fd, (void *) &req, sizeof (req), 0,
                                        (struct sockaddr *) &nladdr,
                                        sizeof (nladdr))) < 0)
    <here req.nlh.nlmsg_seq has been byte-swapped>
    ...
      do
        {
    ...
          ssize_t read_len = TEMP_FAILURE_RETRY (__recvmsg (fd, &msg, 0));
    ...
          struct nlmsghdr *nlmh;
          for (nlmh = (struct nlmsghdr *) buf;
               NLMSG_OK (nlmh, (size_t) read_len);
               nlmh = (struct nlmsghdr *) NLMSG_NEXT (nlmh, read_len))
            {
    <we compare nlmh->nlmsg_seq with corrupted req.nlh.nlmsg_seq>
              if (nladdr.nl_pid != 0 || (pid_t) nlmh->nlmsg_pid != pid
                  || nlmh->nlmsg_seq != req.nlh.nlmsg_seq)
                continue;
    ...
              else if (nlmh->nlmsg_type == NLMSG_DONE)
                /* We found the end, leave the loop.  */
                done = true;
            }
        }
      while (! done);
    As we have a continue on "nlmh->nlmsg_seq != req.nlh.nlmsg_seq",
    "done" cannot be set to "true" and we have an infinite loop.
    It's why commands like "apt-get update" or "dnf update hangs".
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [c35e1f9] linux-user: add fd_trans helper in do_recvfrom()
    Fix passwd using netlink audit.
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [a82ea93] linux-user: convert sockaddr_ll from host to target.
    As we convert sockaddr for AF_PACKET family for sendto() (target to
    host) we need also to convert this for getsockname() (host to target).
    arping uses getsockname() to get the the interface address and uses
    this address with sendto().
    Tested with:
        /sbin/arping -D -q -c2 -I eno1 192.168.122.88
    ...
    getsockname(3, {sa_family=AF_PACKET, proto=0x806, if2,
    pkttype=PACKET_HOST, addr(6)={1, 10c37b6b9a76}, [18]) = 0
    ...
    sendto(3, "..." 28, 0,
           {sa_family=AF_PACKET, proto=0x806, if2, pkttype=PACKET_HOST,
           addr(6)={1, ffffffffffff}, 20) = 28
    ...
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [c5dff28] linux-user: add nested netlink types.
    Nested types are used by the kernel to send link information and
    protocol properties.
    We can see following errors with "ip link show":
    Unimplemented nested type 26
    Unimplemented nested type 26
    Unimplemented nested type 18
    Unimplemented nested type 26
    Unimplemented nested type 18
    Unimplemented nested type 26
    This patch implements nested types 18 (IFLA_LINKINFO) and
    26 (IFLA_AF_SPEC).
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Peter Maydell ]
  * [c815701] linux-user: Check sigsetsize argument to syscalls.
    Many syscalls which take a sigset_t argument also take an argument
    giving the size of the sigset_t.  The kernel insists that this
    matches its idea of the type size and fails EINVAL if it is not.
    Implement this logic in QEMU.  (This mostly just means some LTP test
    cases which check error cases now pass.)
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
  * [884cdc4] linux-user: Add loop control ioctls.
    Add support for the /dev/loop-control ioctls:
     LOOP_CTL_ADD
     LOOP_CTL_REMOVE
     LOOP_CTL_GET_FREE
    [RV: fixed to apply to new header guards]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [a4a2c51] linux-user: Correct type for BLKSSZGET.
    The BLKSSZGET ioctl takes an argument which is a pointer to an int.
    We were incorrectly declaring it to take a pointer to a long, which
    meant that we would incorrectly write to memory which we should not
    if the guest is a 64-bit architecture.
    In particular, kpartx uses this ioctl to write to an int on the
    stack, which tends to result in it crashing immediately.
    Reported-by: Chanho Park <chanho61.park@samsung.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [f2c2fb5] linux-user: Correct type for LOOP_GET_STATUS{,64} ioctls.
    The LOOP_GET_STATUS and LOOP_GET_STATUS64 ioctls were incorrectly
    defined as IOC_W rather than IOC_R, which meant we weren't
    correctly copying the information back from the kernel to the guest.
    The loop_info64 structure definition was also missing a member
    and using the wrong type for several 32-bit fields.
    In particular, this meant that "kpartx -d image.img" didn't work
    and "losetup -a" behaved strangely. Correct the ioctl type definitions.
    Reported-by: Chanho Park <chanho61.park@samsung.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [31efaef] linux-user: Forget about synchronous signal once it is delivered.
    Commit 655ed67c2a248cf which switched synchronous signals to
    benig recorded in ts->sync_signal rather than in a queue
    with every other signal had a bug: we failed to clear
    the flag indicating that a synchronous signal was pending
    when we delivered it. This meant that we would take the signal
    again and again every time the guest made a syscall.
    (This is a bug introduced in my refactoring of Timothy Baldwin's
    original code.)
    Fix this by passing in the struct emulated_sigtable* to
    handle_pending_signal(), so that we clear the pending flag
    in the ts->sync_signal struct when handling a synchronous signal.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [a1e2219] linux-user: Handle short lengths in host_to_target_sockaddr()
    If userspace specifies a short buffer for a target sockaddr,
    the kernel will only copy in as much as it has space for
    (or none at all if the length is zero) -- see the kernel
    move_addr_to_user() function. Mimic this in QEMU's
    host_to_target_sockaddr() routine.
    In particular, this fixes a segfault running the LTP
    recvfrom01 test, where the guest makes a recvfrom()
    call with a bad buffer pointer and other parameters which
    cause the kernel to set the addrlen to zero; because we
    did not skip the attempt to swap the sa_family field we
    segfaulted on the bad address.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [4715856] linux-user: Add some new blk ioctls.
    Add some new blk ioctls (these are 0x12,119 through
    to 0x12,127). Several of these are used by mke2fs; this silences
    the warnings:
    mke2fs 1.42.12 (29-Aug-2014)
    Unsupported ioctl: cmd=0x127b
    Unsupported ioctl: cmd=0x127a
    warning: Unable to get device geometry for /dev/loop5
    Unsupported ioctl: cmd=0x127c
    Unsupported ioctl: cmd=0x127c
    Unsupported ioctl: cmd=0x1277
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Timothy Pearson ]
  * [5b7f7bb] linux-user: Fix terminal control ioctls.
    TIOCGPTN and related terminal control ioctls were not converted to the guest ioctl format on x86_64 targets. Convert these ioctls to enable terminal functionality on x86_64 guests.
    Signed-off-by: Timothy Pearson <tpearson@raptorengineering.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Laurent Vivier ]
  * [74642d0] linux-user: define missing sparc syscalls.
    NR_lookup_dcookie, NR_fadvise64, NR_fadvise64_64
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Peter Maydell ]
  * [a57f1f8] linux-user: Fix type for SIOCATMARK ioctl.
    The SIOCATMARK ioctl takes an argument which should be a
    pointer to an integer where the kernel will write the result.
    We were incorrectly declaring it as TYPE_NULL which would mean
    it would always fail (with EFAULT) when it should succeed.
    Correct the type.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [c4e1cbd] linux-user: AArch64 has sync_file_range, not sync_file_range2.
    The AArch64 Linux ABI syscall 84 is sync_file_range, not
    sync_file_range2 (in the kernel it uses the asm-generic
    headers and does not define __ARCH_WANT_SYNC_FILE_RANGE2).
    Update our TARGET_NR_* definitions accordingly.
    This fixes the sync_file_range syscall which otherwise
    gets its arguments in the wrong order.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [5d32173] disas: Fix ATTRIBUTE_UNUSED define clash with ALSA headers
    disas/bfd.h defines ATTRIBUTE_UNUSED, but unfortunately the
    ALSA system headers also define this macro, which means that
    you can get a compilation failure if building with ALSA and
    any files happen to include the alsa headers before bfd.h
    rather than the other way around.
    This is unfortunate namespace pollution by the ALSA headers but
    we can work around it. Add an #ifndef guard to bfd.h and remove
    the unnecessary extra definition in disas/arm.c to fix this.
    Reported-by: BALATON Zoltan <balaton@eik.bme.hu>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468937076-21503-1-git-send-email-peter.maydell@linaro.org
  * [ff9d3e9] target-arm: Fix unreachable code in gicv3_class_name()
    Coverity complains that the exit() in gicv3_class_name()
    can be unreachable, because if TARGET_AARCH64 is defined
    then all code paths return before reaching it. Move the
    exit() up to the error_report() that it belongs with.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Shannon Zhao <shannon.zhao@linaro.org>
    Message-id: 1468260552-8400-1-git-send-email-peter.maydell@linaro.org
  * [acd8279] arm_gicv3: Add assert()s to tell Coverity that offsets are aligned.
    Coverity complains that the GICR_IPRIORITYR case in gicv3_readl()
    can overflow an array, because it doesn't know that the offsets
    passed to that function must be word aligned. Add some assert()s
    which hopefully tell Coverity that this isn't possible.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1468261372-17508-1-git-send-email-peter.maydell@linaro.org

  [ Eric Blake ]
  * [f394b2e] qapi: Change Netdev into a flat union.
    This is a mostly-mechanical conversion that creates a new flat
    union 'Netdev' QAPI type that covers all the branches of the
    former 'NetClientOptions' simple union, where the branches are
    now listed in a new 'NetClientDriver' enum rather than generated
    from the simple union.  The existence of a flat union has no
    change to the command line syntax accepted for new code, and
    will make it possible for a future patch to switch the QMP
    command to parse a boxed union for no change to valid QMP; but
    it does have some ripple effect on the C code when dealing with
    the new types.
    While making the conversion, note that the 'NetLegacy' type
    remains unchanged: it applies only to legacy command line options,
    and will not be ported to QMP, so it should remain a wrapper
    around a simple union; to avoid confusion, the type named
    'NetClientOptions' is now gone, and we introduce 'NetLegacyOptions'
    in its place.  Then, in the C code, we convert from NetLegacy to
    Netdev as soon as possible, so that the bulk of the net stack
    only has to deal with one QAPI type, not two.  Note that since
    the old legacy code always rejected 'hubport', we can just omit
    that branch from the new 'NetLegacyOptions' simple union.
    Based on an idea originally by Zoltán Kővágó <DirtY.iCE.hu@gmail.com>:
    Message-Id: <01a527fbf1a5de880091f98cf011616a78adeeee.1441627176.git.DirtY.iCE.hu@gmail.com>
    although the sed script in that patch no longer applies due to
    other changes in the tree since then, and I also did some manual
    cleanups (such as fixing whitespace to keep checkpatch happy).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-13-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    [Fixup from Eric squashed in]
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [0e55c38] net: Use correct type for bool flag
    is_netdev is only used as a bool, so make it one.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1468468228-27827-14-git-send-email-eblake@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Denis V. Lunev ]
  * [6d07859] dirty-bitmap: operate with int64_t amount.
    Underlying HBitmap operates even with uint64_t. Thus this change is safe.
    This would be useful f.e. to mark entire bitmap dirty in one call.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468503209-19498-2-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [531509b] mirror: make sectors_in_flight int64_t.
    We keep here the sum of int fields. Thus this could easily overflow,
    especially when we will start sending big requests in next patches.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468503209-19498-3-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [49efb1f] mirror: create mirror_throttle helper.
    The patch also places last_pause_ns from stack in mirror_run into
    MirrorBlockJob structure. This helper will be useful in next patches.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468503209-19498-4-git-send-email-den@openvz.org
    CC: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    CC: Eric Blake <eblake@redhat.com>
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Fam Zheng <famz@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [c0b363a] mirror: create mirror_dirty_init helper for mirror_run.
    The code inside the helper will be extended in the next patch. mirror_run
    itself is overbloated at the moment.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy<vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468503209-19498-5-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    CC: Eric Blake <eblake@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [2f0342e] block: remove extra condition in bdrv_can_write_zeroes_with_unmap.
    All .bdrv_co_write_zeroes callbacks nowadays work perfectly even
    with backing store attached. If future new callbacks would be unable to do
    that - they have a chance to block this in bdrv_get_info().
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468503209-19498-6-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [b7d5062] mirror: optimize dirty bitmap filling in mirror_run a bit.
    There is no need to scan allocation tables if we have mark_all_dirty flag
    set. Just mark it all dirty.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy<vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468503209-19498-7-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [c7c2769] mirror: efficiently zero out target.
    With a bdrv_co_write_zeroes method on a target BDS and when this method
    is working as indicated by the bdrv_can_write_zeroes_with_unmap(), zeroes
    will not be placed into the wire. Thus the target could be very efficiently
    zeroed out. This should be done with the largest chunk possible.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy<vsementsov@virtuozzo.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468503209-19498-8-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    CC: Eric Blake <eblake@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [4b5004d] mirror: improve performance of mirroring of empty disk.
    We should not take into account zero blocks for delay calculations.
    They are not read and thus IO throttling is not required. In the
    other case VM migration with 16 Tb QCOW2 disk with 4 Gb of data takes
    days.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468503209-19498-9-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    CC: Eric Blake <eblake@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [cf56a3c] mirror: fix request throttling in drive-mirror.
    There are 2 deficiencies here:
    - mirror_iteration could start several requests inside. Thus we could
      simply have more in_flight requests than MAX_IN_FLIGHT.
    - keeping this in mind throttling in mirror_run which is checking
      s->in_flight == MAX_IN_FLIGHT is wrong.
    The patch adds the check and throttling into mirror_iteration and fixes
    the check in mirror_run() to be sure.
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Message-id: 1466598927-5990-1-git-send-email-den@openvz.org
    CC: Jeff Cody <jcody@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>
    (cherry picked from commit e648dc95c28fbca12e67be26a1fc4b9a0676c3fe)

  [ Prasanna Kumar Kalever ]
  * [d5cf407] block/gluster: rename [server, volname, image] -> [host, volume, path]
    A future patch will add support for multiple gluster servers. Existing
    terminology is a bit unusual in relation to what names are used by
    other networked devices, and doesn't map very well to the terminology
    we expect to use for multiple servers.  Therefore, rename the following
    options:
    'server'  -> 'host'
    'image'   -> 'path'
    'volname' -> 'volume'
    Signed-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1468947453-5433-2-git-send-email-prasanna.kalever@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [f70c50c] block/gluster: code cleanup
    unified coding styles of multiline function arguments and other error functions
    moved random declarations of structures and other list variables
    Signed-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1468947453-5433-3-git-send-email-prasanna.kalever@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [0552ff2] block/gluster: deprecate rdma support
    gluster volfile server fetch happens through unix and/or tcp, it doesn't
    support volfile fetch over rdma. The rdma code may actually mislead,
    so to make sure things do not break, for now we fallback to tcp when requested
    for rdma, with a warning.
    If you are wondering how this worked all these days, its the gluster libgfapi
    code which handles anything other than unix transport as socket/tcp, sad but
    true.
    Also gluster doesn't support ipv6 addresses, removing the ipv6 related
    comments/docs section
    [Jeff: Minor grammatical fixes in comments and commit message, per
    review comments]
    Signed-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1468947453-5433-4-git-send-email-prasanna.kalever@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [7edac2d] block/gluster: using new qapi schema
    this patch adds 'GlusterServer' related schema in qapi/block-core.json
    [Jeff: minor fix-ups of comments and formatting, per patch reviews]
    Signed-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468947453-5433-5-git-send-email-prasanna.kalever@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>
  * [6c7189b] block/gluster: add support for multiple gluster servers.
    This patch adds a way to specify multiple volfile servers to the gluster
    block backend of QEMU with tcp|rdma transport types and their port numbers.
    Problem:
    Currently VM Image on gluster volume is specified like this:
    file=gluster[+tcp]://host[:port]/testvol/a.img
    Say we have three hosts in a trusted pool with replica 3 volume in action.
    When the host mentioned in the command above goes down for some reason,
    the other two hosts are still available. But there's currently no way
    to tell QEMU about them.
    Solution:
    New way of specifying VM Image on gluster volume with volfile servers:
    (We still support old syntax to maintain backward compatibility)
    Basic command line syntax looks like:
    Pattern I:
     -drive driver=gluster,
            volume=testvol,path=/path/a.raw,[debug=N,]
            server.0.type=tcp,
            server.0.host=1.2.3.4,
            server.0.port=24007,
            server.1.type=unix,
            server.1.socket=/path/socketfile
    Pattern II:
     'json:{"driver":"qcow2","file":{"driver":"gluster",
           "volume":"testvol","path":"/path/a.qcow2",["debug":N,]
           "server":[{hostinfo_1}, ...{hostinfo_N}]}}'
       driver      => 'gluster' (protocol name)
       volume      => name of gluster volume where our VM image resides
       path        => absolute path of image in gluster volume
      [debug]      => libgfapi loglevel [(0 - 9) default 4 -> Error]
      {hostinfo}   => {{type:"tcp",host:"1.2.3.4"[,port=24007]},
                       {type:"unix",socket:"/path/sockfile"}}
       type        => transport type used to connect to gluster management daemon,
                      it can be tcp|unix
       host        => host address (hostname/ipv4/ipv6 addresses/socket path)
       port        => port number on which glusterd is listening.
       socket      => path to socket file
    Examples:
    1.
     -drive driver=qcow2,file.driver=gluster,
            file.volume=testvol,file.path=/path/a.qcow2,file.debug=9,
            file.server.0.type=tcp,
            file.server.0.host=1.2.3.4,
            file.server.0.port=24007,
            file.server.1.type=unix,
            file.server.1.socket=/var/run/glusterd.socket
    2.
      'json:{"driver":"qcow2","file":{"driver":"gluster","volume":"testvol",
             "path":"/path/a.qcow2","debug":9,"server":
             [{"type":"tcp","host":"1.2.3.4","port":"24007"},
              {"type":"unix","socket":"/var/run/glusterd.socket"}
             ]}}'
    This patch gives a mechanism to provide all the server addresses, which are in
    replica set, so in case host1 is down VM can still boot from any of the
    active hosts.
    This is equivalent to the backup-volfile-servers option supported by
    mount.glusterfs (FUSE way of mounting gluster volume)
    credits: sincere thanks to all the supporters
    Signed-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Message-id: 1468947453-5433-6-git-send-email-prasanna.kalever@redhat.com
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ Gerd Hoffmann ]
  * [e0127d2] qxl: fix qxl_set_dirty call in qxl_dirty_one_surface
    qxl_set_dirty() expects start and end as range specification.
    qxl_dirty_one_surface passes 'size' instead of 'offset + size' as end
    parameter.  Fix that.  Also use uint64_t everywhere while being at it.
    Bug was added by "e25139b qxl: set only off-screen surfaces dirty instead
    of the whole vram" and carried forward unnoticed by "5cdc402 qxl: fix
    surface migration".
    Reported-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-id: 1468413187-22071-1-git-send-email-kraxel@redhat.com

  [ Alex Bennée ]
  * [a9f8d03] tests/docker/docker.py: docker_dir outside build.
    Instead of letting the build_image create the temporary working dir we
    move the creation to the build command. This is preparation for the
    later patches where additional files can be added to the build context
    before the build step is run.
    We also ensure we remove the build context after we are done (mkdtemp
    doesn't do this automatically for you).
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468934445-32183-2-git-send-email-famz@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [504ca3c] tests/docker/docker.py: support --include-executable.
    When passed the path to a binary we copy it and any linked libraries (if
    it is dynamically linked) into the docker build context. These can then
    be included by a dockerfile with the line:
      # Copy all of context into container
      ADD . /
    This is mainly intended for setting up foreign architecture docker
    images which use qemu-$arch to do cross-architecture linux-user
    execution. It also relies on the host and guest file-system following
    reasonable multi-arch layouts so the copied libraries don't clash with
    the guest ones.
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1468934445-32183-3-git-send-email-famz@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [920776e] tests/docker/docker.py: check and run .pre script.
    The docker script will now search for an associated $dockerfile.pre
    script which gets run in the same build context as the dockerfile will
    be. This is to support pre-seeding the build context before running the
    docker build.
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1468934445-32183-4-git-send-email-famz@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [95c9750] tests/docker/dockerfiles: new debian-bootstrap.docker.
    Together with the debian-bootstrap.pre script can now build an arbitrary
    architecture of Debian using debootstrap. This allows debootstrap to set
    up its first stage before the container is built.
    To build a container you need a command line like:
      DEB_ARCH=armhf DEB_TYPE=testing \
        ./tests/docker/docker.py build \
        --include-executable=arm-linux-user/qemu-arm debian:armhf \
        ./tests/docker/dockerfiles/debian-bootstrap.docker
    Although a number of non-debian systems package the debootstrap script
    it is fairly portable in itself. Assuming we have some sort of fakeroot
    implementation we can just clone the upstream repository and use the
    script from there.
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1468934445-32183-5-git-send-email-famz@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>
  * [6e733da] tests/docker/docker.py: add update operation.
    This adds a new operation to the docker script to allow updating of
    binaries in an existing container. This is because it would be
    inefficient to re-build the whole container just for an update to the
    QEMU binary.
    To update the executable run:
        ./tests/docker/docker.py update \
            debian:armhf ./arm-linux-user/qemu-arm
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1468934445-32183-6-git-send-email-famz@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>

  [ Fam Zheng ]
  * [c815851] docker: More sensible run script.
    It is very easy to figure out current directory and bash option from the
    execution, so do less in the Makefile invocation command line, and
    figure both options in the script.
    This makes the next patch easier.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468934445-32183-7-git-send-email-famz@redhat.com
  * [1ad76b8] docker: Fix exit code if $CMD failed.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468934445-32183-8-git-send-email-famz@redhat.com
  * [4b08af6] docker: Add "images" subcommand to docker.py.
    This is a wrapper for the 'docker images' command.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1468934445-32183-9-git-send-email-famz@redhat.com
  * [ff31e22] docker: Don't start a container that doesn't exist.
    Image building targets are dependencies of test running targets, so when
    a docker image doesn't exist, it means it's skipped (due to dependency
    checks in pre script). Therefore, skip the test too.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1468934445-32183-10-git-send-email-famz@redhat.com

  [ Alex Bennée ]
  * [b7c851b] docker: pass EXECUTABLE to build script.
    To build a docker image with which needs qemu linux-user emulation we
    need to pass --include-executable to the build script. Using the same
    mechanism as for other container controls we enable the option is
    EXECUTABLE is set on the make command line e.g:
        make docker-image-debian-bootstrap V=1 J=9 DEB_ARCH=armhf \
            DEB_TYPE=stable EXECUTABLE=./arm-linux-user/qemu-arm
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 1468934445-32183-11-git-send-email-famz@redhat.com
    Signed-off-by: Fam Zheng <famz@redhat.com>

  [ Alexey Kardashevskiy ]
  * [f81bb34] xhci: Fix possible side effect from assert()
    A static analysis tool called BEAM detected possible side effect from
    assert() calling a helper which may change an XHCI ring after every call.
    This moves xhci_ring_fetch() out of assert() so it will be called
    with and without enabled debug.
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Message-id: 1468812548-31868-1-git-send-email-aik@ozlabs.ru
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Gerd Hoffmann ]
  * [87ae924] usbredir: add streams property.
    Enabled by default, can be used to turn off (usb3) streams support.
    xhci has a such a property too (same name, same default).
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Message-id: 1468408474-17648-1-git-send-email-kraxel@redhat.com

  [ Eric Blake ]
  * [1a62d0a] block: Fragment reads to max transfer length.
    Drivers should be able to rely on the block layer honoring the
    max transfer length, rather than needing to return -EINVAL
    (iscsi) or manually fragment things (nbd).  This patch adds
    the fragmentation in the block layer, after requests have been
    aligned (fragmenting before alignment would lead to multiple
    unaligned requests, rather than just the head and tail).
    The return value was previously nebulous on success on whether
    it was zero or the length read; and fragmenting may introduce
    yet other non-zero values if we use the last length read.  But
    as at least some callers are sloppy and expect only zero on
    success, it is easiest to just guarantee 0.
    [Fix uninitialized ret local variable in bdrv_aligned_preadv().
    --Stefan]
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468607524-19021-2-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [8a39b4d] raw_bsd: Don't advertise flags not supported by protocol layer.
    The raw format layer supports all flags via passthrough - but
    it only makes sense to pass through flags that the lower layer
    actually supports.
    The next patch gives stronger reasoning for why this is correct.
    At the moment, the raw format layer ignores the max_transfer
    limit of its protocol layer, and an attempt to do the qemu-io
    'w -f 0 40m' to an NBD server that lacks FUA will pass the entire
    40m request to the NBD driver, which then fragments the request
    itself into a 32m write, 8m write, and flush.  But once the block
    layer starts honoring limits and fragmenting packets, the raw
    driver will hand the NBD driver two separate requests; if both
    requests have BDRV_REQ_FUA set, then this would result in a 32m
    write, flush, 8m write, and second flush.  By having the raw
    layer no longer advertise FUA support when the protocol layer
    lacks it, we are back to a single flush at the block layer for
    the overall 40m request.
    Note that 'w -f -z 0 40m' does not currently exhibit the same
    problem, because there, the fragmentation does not occur until
    at the NBD layer (the raw layer has .bdrv_co_pwrite_zeroes, and
    the NBD layer doesn't advertise max_pwrite_zeroes to constrain
    things at the raw layer) - but the problem is latent and we
    would again have too many flushes without this patch once the
    NBD layer implements support for the new NBD_CMD_WRITE_ZEROES
    command, if it sets max_pwrite_zeroes to the same 32m limit as
    recommended by the NBD protocol.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468607524-19021-3-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [04ed95f] block: Fragment writes to max transfer length.
    Drivers should be able to rely on the block layer honoring the
    max transfer length, rather than needing to return -EINVAL
    (iscsi) or manually fragment things (nbd).  We already fragment
    write zeroes at the block layer; this patch adds the fragmentation
    for normal writes, after requests have been aligned (fragmenting
    before alignment would lead to multiple unaligned requests, rather
    than just the head and tail).
    When fragmenting a large request where FUA was requested, but
    where we know that FUA is implemented by flushing all requests
    rather than the given request, then we can still get by with
    only one flush.  Note, however, that we need a followup patch
    to the raw format driver to avoid a regression in the number of
    flushes actually issued.
    The return value was previously nebulous on success (sometimes
    zero, sometimes the length written); since we never have a short
    write, and since fragmenting may store yet another positive
    value in 'ret', change the function to always return 0 on success,
    matching what we do in bdrv_aligned_preadv().
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468607524-19021-4-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [fb1a6de] nbd: Rely on block layer to break up large requests.
    Now that the block layer will honor max_transfer, we can simplify
    our code to rely on that guarantee.
    The readv code can call directly into nbd-client, just as the
    writev code has done since commit 52a4650.
    Interestingly enough, while qemu-io 'w 0 40m' splits into a 32M
    and 8M transaction, 'w -z 0 40m' splits into two 16M and an 8M,
    because the block layer caps the bounce buffer for writing zeroes
    at 16M.  When we later introduce support for NBD_CMD_WRITE_ZEROES,
    we can get a full 32M zero write (or larger, if the client and
    server negotiate that write zeroes can use a larger size than
    ordinary writes).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468607524-19021-5-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1e2a77a] nbd: Drop unused offset parameter.
    Now that NBD relies on the block layer to fragment things, we no
    longer need to track an offset argument for which fragment of
    a request we are actually servicing.
    While at it, use true and false instead of 0 and 1 for a bool
    parameter.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468607524-19021-6-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [6bd01f1] iscsi: Rely on block layer to break up large requests.
    Now that the block layer honors max_request, we don't need to
    bother with an EINVAL on overlarge requests, but can instead
    assert that requests are well-behaved.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468607524-19021-7-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [9f1963b] block: Convert bdrv_co_discard() to byte-based.
    Another step towards byte-based interfaces everywhere.  Replace
    the sector-based bdrv_co_discard() with a new byte-based
    bdrv_co_pdiscard(), which silently ignores any unaligned head
    or tail.  Driver callbacks will be converted in followup patches.
    By calculating the alignment outside of the loop, and clamping
    the max discard to an aligned value, we can simplify the actions
    done within the loop.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-2-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [0c51a89] block: Convert bdrv_discard() to byte-based.
    Another step towards byte-based interfaces everywhere.  Replace
    the sector-based bdrv_discard() with a new byte-based
    bdrv_pdiscard(), which silently ignores any unaligned head
    or tail.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-3-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [b15404e] block: Switch BlockRequest to byte-based.
    BlockRequest is the internal struct used by bdrv_aio_*.  At the
    moment, all such calls were sector-based, but we will eventually
    convert to byte-based; start by changing the internal variables
    to be byte-based.  No change to behavior, although the read and
    write code can now go byte-based through more of the stack.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468624988-423-4-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [60ebac1] block: Convert bdrv_aio_discard() to byte-based.
    Another step towards byte-based interfaces everywhere.  Replace
    the sector-based bdrv_aio_discard() with a new byte-based
    bdrv_aio_pdiscard(), which silently ignores any unaligned head
    or tail.  Driver callbacks will be converted in followup patches.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468624988-423-5-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1c6c4bb] block: Convert BB interface to byte-based discards.
    Change sector-based blk_discard(), blk_co_discard(), and
    blk_aio_discard() to instead be byte-based blk_pdiscard(),
    blk_co_pdiscard(), and blk_aio_pdiscard().  NBD gets a lot
    simpler now that ignoring the unaligned portion of a
    byte-based discard request is handled under the hood by
    the block layer.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-6-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [36e3b2e] raw-posix: Switch paio_submit() to byte-based.
    The only remaining uses of paio_submit() were flush (with no
    offset or count) and discard (which we are switching to byte-based);
    furthermore, the similarly named paio_submit_co() is already
    byte-based.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-7-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [7bbca9e] rbd: Switch rbd_start_aio() to byte-based.
    The internal function converts to byte-based before calling into
    RBD code; hoist the conversion to the callers so that callers
    can then be switched to byte-based themselves.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-8-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [4da444a] block: Convert .bdrv_aio_discard() to byte-based.
    Another step towards byte-based interfaces everywhere.  Replace
    the sector-based driver callback .bdrv_aio_discard() with a new
    byte-based .bdrv_aio_pdiscard().  Only raw-posix and RBD drivers
    are affected, so it was not worth splitting into multiple patches.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-9-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [47a5486] block: Add .bdrv_co_pdiscard() driver callback.
    There's enough drivers with a sector-based callback that it will
    be easier to switch one at a time.  This patch adds a byte-based
    callback, and then after all drivers are swapped, we'll drop the
    sector-based callback.
    [checkpatch doesn't like the space after coroutine_fn in
    block_int.h, but it's consistent with the rest of the file]
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-10-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [aba76e2] blkreplay: Switch .bdrv_co_discard() to byte-based.
    Another step towards killing off sector-based block APIs.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-11-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [1014170] gluster: Switch .bdrv_co_discard() to byte-based.
    Another step towards killing off sector-based block APIs.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-12-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [97c7e85] iscsi: Switch .bdrv_co_discard() to byte-based.
    Another step towards killing off sector-based block APIs.
    Unlike write_zeroes, where we can be handed unaligned requests
    and must fail gracefully with -ENOTSUP for a fallback, we are
    guaranteed that discard requests are always aligned because the
    block layer already ignored unaligned head/tail.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-13-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [447e57c] nbd: Switch .bdrv_co_discard() to byte-based.
    Another step towards killing off sector-based block APIs.
    While at it, call directly into nbd-client.c instead of having
    a pointless trivial wrapper in nbd.c.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-14-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [82e8a78] qcow2: Switch .bdrv_co_discard() to byte-based.
    Another step towards killing off sector-based block APIs.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-15-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [5f61ad0] raw_bsd: Switch .bdrv_co_discard() to byte-based.
    Another step towards killing off sector-based block APIs.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-16-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [dde4753] sheepdog: Switch .bdrv_co_discard() to byte-based.
    Another step towards killing off sector-based block APIs.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-17-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [02aefe4] block: Kill .bdrv_co_discard()
    Now that all drivers have a byte-based .bdrv_co_pdiscard(), we
    no longer need to worry about the sector-based version.  We can
    also relax our minimum alignment to 1 for drivers that support it.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-id: 1468624988-423-18-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [70c4fb2] nbd: Convert to byte-based interface.
    The NBD protocol doesn't have any notion of sectors, so it is
    a fairly easy conversion to use byte-based read and write.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1468624988-423-19-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [decaeed] raw_bsd: Convert to byte-based interface.
    Since the raw format driver is just passing things through, we can
    do byte-based read and write if the underlying protocol does
    likewise.
    There's one tricky part - if we probed the image format, we document
    that we restrict operations on the initial sector.  It's easiest to
    keep this guarantee by enforcing read-modify-write on sub-sector
    operations (yes, this partially reverts commit ad82be2f).
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-id: 1468624988-423-20-git-send-email-eblake@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Sascha Silbe ]
  * [485dd69] s390x/css: copy CCW format bit from ORB to SCSW.
    The CCW Format (F) flag of the Subchannel-Status Word (SCSW) indicates
    the format of the CCWs "associated with an I/O operation", i.e. the
    value of CCW-Format Control (F) bit of the Operation-Request Block
    (ORB).
    Copy the CCW format bit from the ORB to the SCSW so we correctly
    indicate the format of the CCWs to the guest.
    Signed-off-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  * [727a042] s390x/css: sch_handle_start_func() handles resume, too.
    It's not obvious from the code flow that sch_handle_start_func() gets
    called for rsch. Add some comments explaining this.
    Signed-off-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Cornelia Huck ]
  * [2a79eb1] s390x/css: provide a dev_path for css devices.
    We need to implement the get_dev_path method for the css bus, or
    else we might end up with two different devices having the same
    qdev_path.
    This was noticed when adding two scsi_hd controllers: The SCSIBus
    code will produce a non-unique dev_path for vmstate usage if the
    parent bus does not provide the get_dev_path method.
    We simply use the device's bus id, as this is unique and we won't
    have any deeper hierarchy from a channel subsystem perspective
    anyway.
    Note that we need to disable this for older machine versions,
    as this changes the migration format.
    Reported-by: Marc Hartmayer <mhartmay@linux.vnet.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.vnet.ibm.com>
    Reviewed-by: Sascha Silbe <silbe@linux.vnet.ibm.com>
    Tested-by: Marc Hartmayer <mhartmay@linux.vnet.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Dr. David Alan Gilbert ]
  * [709787e] target-i386: Provide TCG_PHYS_ADDR_BITS.
    Provide a constant for the number of address bits supported under TCG.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Suggested-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [af45907] target-i386: Allow physical address bits to be set.
    Currently QEMU sets the x86 number of physical address bits to the
    magic number 40.  This is only correct on some small AMD systems;
    Intel systems tend to have 36, 39, 46 bits, and large AMD systems
    tend to have 48.
    Having the value different from your actual hardware is detectable
    by the guest and in principal can cause problems;
    The current limit of 40 stops TB VMs being created by those lucky
    enough to have that much.
    This patch lets you set the physical bits by a cpu property but
    defaults to the same 40bits which matches TCGs setup.
    I've removed the ancient warning about the 42 bit limit in exec.c;
    I can't find that limit in there and no one else seems to know where
    it is.
    We use a magic value of 0 as the property default so that we can
    later distinguish between the default and a user set value.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [112dad6] target-i386: Mask mtrr mask based on CPU physical address limits.
    The CPU GPs if we try and set a bit in a variable MTRR mask above
    the limit of physical address bits on the host.  We hit this
    when loading a migration from a host with a larger physical
    address limit than our destination (e.g. a Xeon->i7 of same
    generation) but previously used to get away with it
    until 48e1a45 started checking that msr writes actually worked.
    It seems in our case the GP probably comes from KVM emulating
    that GP.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [fcc35e7] target-i386: Fill high bits of mtrr mask.
    Fill the bits between 51..number-of-physical-address-bits in the
    MTRR_PHYSMASKn variable range mtrr masks so that they're consistent
    in the migration stream irrespective of the physical address space
    of the source VM in a migration.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [d9c84f1] target-i386: Use uint32_t for X86CPU.apic_id.
    Redo 9886e834 (target-i386: Require APIC ID to be explicitly set before
    CPU realize) in another way that doesn't use int64_t to detect
    if apic-id property has been set.
    Use the fact that 0xFFFFFFFF is the broadcast
    value that a CPU can't have and set default
    uint32_t apic_id to it instead of using int64_t.
    Later uint32_t apic_id will be used to drop custom
    property setter/getter in favor of static property.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [9f3aab5] pc: Add x86_topo_ids_from_apicid()
    It's reverse of apicid_from_topo_ids() and will be used in follow up
    patches to fill in data structures for query-hotpluggable-cpus and
    for user friendly error reporting.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Dr. David Alan Gilbert ]
  * [11f6fee] target-i386: Set physical address bits based on host.
    Add the host-phys-bits boolean property, if true, take phys-bits
    from the hosts physical bits value, overriding either the default
    or the user specified value.
    We can also use the value we read from the host to check the users
    explicitly set value and warn them if it doesn't match.
    Note:
       a) We only read the hosts value in KVM mode (because on non-x86
          we get an abort if we try)
       b) We don't warn about trying to use host-phys-bits in TCG mode,
          we just fall back to the TCG default.  This allows the machine
          type to set the host-phys-bits flag if it wants and then to
          work in both TCG and KVM.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [7baef5c] pc: Extract CPU lookup into a separate function.
    It will be reused in the next patch at pre_plug time
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [4ec60c7] pc: cpu: Consolidate apic-id validity checks in pc_cpu_pre_plug()
    Machine code knows about all possible APIC IDs so use that
    instead of hack which does O(n^2) complexity duplicate
    checks, interating over global CPUs list.
    As result duplicate check is done only once with O(log n) complexity.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [2da00e3] target-i386: Replace custom apic-id setter/getter with static property.
    Custom apic-id setter/getter doesn't do any property specific
    checks anymore, so clean it up and use more compact static
    property DEFINE_PROP_UINT32 instead.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [d89c2b8] target-i386: Add socket/core/thread properties to X86CPU.
    These properties will be used by as address where to plug
    CPU with help -device/device_add commands.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Paolo Bonzini ]
  * [c2f193b] target-i386: Add support for UMIP and RDPID CPUID bits.
    These are both stored in CPUID[EAX=7,EBX=0].ECX.  KVM is going to
    be able to emulate both (albeit with a performance loss in the case
    of RDPID, which therefore will be in KVM_GET_EMULATED_CPUID rather
    than KVM_GET_SUPPORTED_CPUID).
    It's also possible to implement both in TCG, but this is for 2.8.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Igor Mammedov ]
  * [6816b1b] target-i386: cpu: Do not ignore error and fix apic parent
    object_property_add_child() silently fails with error that it can't
    create duplicate propery 'apic' as we already have 'apic' property
    registered for 'apic' feature. As result generic device_realize puts
    apic into unattached container.
    As it's programming error, abort if name collision happens in future
    and fix property name for apic_state to 'lapic', this way apic is
    a child of cpu instance.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [67e55ca] target-i386: Fix apic object leak when CPU is deleted.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [e8f7b83] pc: Set APIC ID based on socket/core/thread ids if it's not been set yet.
    CPU added with device_add help won't have APIC ID set,
    so set it according to socket/core/thread ids provided
    with device_add command.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [ba157b6] pc: Delay setting number of boot CPUs to machine_done time.
    Currently present CPUs counter in CMOS only contains
    smp_cpus (i.e. initial CPUs specified with -smp X) and
    doesn't account for CPUs created with -device.
    If VM is started with additional CPUs added with
     -device, it will hang in BIOS waiting for condition
       smp_cpus == counted_cpus
    forever as counted_cpus will include -device CPUs as well
    and be more than smp_cpus.
    Make present CPUs counter in CMOS to count all CPUs
    (initial and coldplugged with -device) by delaying
    it to machine done time when it possible to count
    CPUs added with -device.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
  * [a44a49d] pc: Register created initial and hotpluged CPUs in one place pc_cpu_plug()
    Consolidate possible_cpus array management in pc_cpu_plug() for
    smp_cpus, coldplugged with -device and hotplugged with
    device_add.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [73360e2] pc: Forbid BSP removal.
    Boot CPU is assumed to always present in QEMU code, so
    untile that assumptions are gone, deny removal request,
    In another words QEMU won't support BSP hot-unplug.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [4da7faa] pc: Enforce adding CPUs contiguously and removing them in opposite order.
    It will still allow us to use cpu_index as migration instance_id
    since when CPUs are added contiguously (from the first to the last)
    and removed in opposite order, cpu_index stays stable and it's
    reproducible on destination side.
    While there is work in progress to support migration when there
    are holes in cpu_index range resulting from out-of-order plug or
    unplug, this patch is intended as an interim solution until
    cpu_index usage is cleaned up.
    As result of this patch it would be possible to plug/unplug CPUs,
    but in limited order that doesn't break migration.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [edd1211] pc: cpu: Allow device_add to be used with x86 cpu.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [4d95291] pc: Implement query-hotpluggable-cpus callback
    it returns a list of present/possible to hotplug CPU
    objects with a list of properties to use with
    device_add.
    in PC case returned list would looks like:
    -> { "execute": "query-hotpluggable-cpus" }
    <- {"return": [
         {
            "type": "qemu64-x86_64-cpu", "vcpus-count": 1,
            "props": {"core-id": 0, "socket-id": 1, "thread-id": 0}
         },
         {
            "qom-path": "/machine/unattached/device[0]",
            "type": "qemu64-x86_64-cpu", "vcpus-count": 1,
            "props": {"core-id": 0, "socket-id": 0, "thread-id": 0}
         }
       ]}
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [889211b] apic: move MAX_APICS check to 'apic' class.
    MAX_APICS is only used by child 'apic' class and not
    by its parent TYPE_APIC_COMMON or any other derived
    class.
    Move check into end user 'apic' class so it won't
    get in the way of other APIC implementations
    if they support more then MAX_APICS.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Radim Krčmář <rkrcmar@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [1dfe328] apic: Drop APICCommonState.idx and use APIC ID as index in local_apics[]
    local_apics[] is sized to contain all APIC ID supported in xAPIC mode,
    so use APIC ID as index in it instead of constantly increasing counter idx.
    Fixes error "apic initialization failed" when a CPU hotplugged and
    unplugged more times than there are free slots in local_apics[].
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Radim Krčmář <rkrcmar@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [365aa11] apic: kvm-apic: Fix crash due to access to freed memory region
    kvm-apic.io_memory memory region had its parent set to NULL at
    memory_region_init_io() time, so it ended up as a child in
     /unattached contaner.
    As result when kvm-apic instance was deleted, the child property
     /unattached/kvm-apic-msi[XXX] contained a reference to
    kvm-apic.io_memory address which was freed as part of kvm-apic.
    Do the same as 'apic' and make kvm-apic instance the owner
    of the memory region so that it won't end up in /unattached
    and gets cleanly released along with related kvm-apic instance.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [9c156f9] (kvm)apic: Add unrealize callbacks.
    Callbacks will do necessary cleanups before APIC device is deleted
    Signed-off-by: Chen Fan <chen.fan.fnst@cn.fujitsu.com>
    Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Signed-off-by: Zhu Guihua <zhugh.fnst@cn.fujitsu.com>
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [f6e9844] apic: Use apic_id as apic's migration instance_id
    instance_id is generated by last_used_id + 1 for a given device type
    so for QEMU with 3 CPUs instance_id for APICs is a seti of [0, 1, 2]
    When CPU in the middle is hot-removed and migration started
    APICs with instance_ids 0 and 2 are transferred in migration stream.
    However target starts with 2 CPUs and APICs' instance_ids are
    generated from scratch [0, 1] hence migration fails with error
      Unknown savevm section or instance 'apic' 2
    Fix issue by manually registering APIC's vmsd with apic_id as
    instance_id, in this case instance_id on target will always
    match instance_id on source as apic_id is the same for a given
    cpu instance.
    Reported-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [c884776] target-i386: Add x86_cpu_unrealizefn()
    First remove VCPU from exec loop and only then remove lapic.
    Signed-off-by: Chen Fan <chen.fan.fnst@cn.fujitsu.com>
    Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Signed-off-by: Zhu Guihua <zhugh.fnst@cn.fujitsu.com>
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [8fe6374] pc: Make device_del CPU work for x86 CPUs.
    ACPI subsystem already has all logic in place the only
    thing left to eject CPU is destroy it and ammend
    present CPUs counter in CMOS, do so.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Stefan Hajnoczi ]
  * [cdcab9d] nvdimm: fix memory leak in error code path
    object_get_canonical_path_component() returns a heap-allocated string
    that must be freed using g_free().
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Marcel Apfelbaum ]
  * [eaf8d91] tests/prom-env-test: increase the test timeout.
    On a slower machine the test can take more than 30 seconds.
    Increase the timeout to 100 seconds.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
  * [50d3bba] hw/alpha: fix PCI bus initialization.
    Delay the host-bridge 'realization' until the
    PCI root bus is attached.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
  * [a8c1a75] hw/mips: fix PCI bus initialization.
    Delay the host-bridge 'realization' until the
    PCI root bus is attached.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Leon Alrae <leon.alrae@imgtec.com>
    Tested-by: Leon Alrae <leon.alrae@imgtec.com>
  * [2f3ae0b] hw/apb: fix PCI bus initialization.
    Create and connect the PCI root bus to the
    host bridge before the later is 'realized'.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
  * [3c3c1e3] hw/grackle: fix PCI bus initialization.
    Delay the host-bridge 'realization' until the
    PCI root bus is attached.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
  * [685f9a3] hw/prep: realize the PCI root bus as part of the prep init
    'Realize' the PCI root bus manually since the 'realize' mechanism
    does not propagate to child devices yet.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
  * [b1af795] hw/versatile: realize the PCI root bus as part of the versatile init
    'Realize' the PCI root bus manually since the 'realize' mechanism
    does not propagate to child devices yet.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>

  [ Peter Xu ]
  * [1c7955c] x86-iommu: introduce parent class.
    Introducing parent class for intel-iommu devices named "x86-iommu". This
    is preparation work to abstract shared functionalities out from Intel
    and AMD IOMMUs. Currently, only the parent class is introduced. It does
    nothing yet.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [04af0e1] intel_iommu: rename VTD_PCI_DEVFN_MAX to x86-iommu.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [1cf5fd5] x86-iommu: provide x86_iommu_get_default.
    Instead of searching the device tree every time, one static variable is
    declared for the default system x86 IOMMU device.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [1121e0a] x86-iommu: introduce "intremap" property.
    Adding one property for intel-iommu devices to specify whether we should
    support interrupt remapping. By default, IR is disabled. To enable it,
    we should use (take Intel IOMMU as example):
      -device intel_iommu,intremap=on
    This property can be shared by Intel and future AMD IOMMUs.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d46114f] acpi: enable INTR for DMAR report structure.
    In ACPI DMA remapping report structure, enable INTR flag when specified.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [b791047] intel_iommu: allow queued invalidation for IR.
    Queued invalidation is required for IR. This patch add basic support for
    interrupt cache invalidate requests. Since we currently have no IR cache
    implemented yet, we can just skip all interrupt cache invalidation
    requests for now.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d54bd7f] intel_iommu: set IR bit for ECAP register.
    Enable IR in IOMMU Extended Capability register.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [cfc13df] acpi: add DMAR scope definition for root IOAPIC.
    To enable interrupt remapping for intel IOMMU device, each IOAPIC device
    in the system reported via ACPI MADT must be explicitly enumerated under
    one specific remapping hardware unit. This patch adds the root-complex
    IOAPIC into the default DMAR device.
    Please refer to VT-d spec 8.3.1.1 for more information.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [a586143] intel_iommu: define interrupt remap table addr register.
    Defined Interrupt Remap Table Address register to store IR table
    pointer. Also, do proper handling on global command register writes to
    store table pointer and its size.
    One more debug flag "DEBUG_IR" is added for interrupt remapping.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [80de52b] intel_iommu: handle interrupt remap enable.
    Handle writting to IRE bit in global command register.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [1f91ace] intel_iommu: define several structs for IOMMU IR.
    Several data structs are defined to better support the rest of the
    patches: IRTE to parse remapping table entries, and IOAPIC/MSI related
    structure bits to parse interrupt entries to be filled in by guest
    kernel.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [a4ca297] intel_iommu: add IR translation faults defines.
    Adding translation fault definitions for interrupt remapping. Please
    refer to VT-d spec section 7.1.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [651e4ce] intel_iommu: Add support for PCI MSI remap.
    This patch enables interrupt remapping for PCI devices.
    To play the trick, one memory region "iommu_ir" is added as child region
    of the original iommu memory region, covering range 0xfeeXXXXX (which is
    the address range for APIC). All the writes to this range will be taken
    as MSI, and translation is carried out only when IR is enabled.
    Idea suggested by Paolo Bonzini.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Daniel P. Berrange ]
  * [f3c8355] crypto: use /dev/[u]random as a final fallback random source.
    If neither gcrypt or gnutls are available to provide a
    cryptographic random number generator, fallback to consuming
    bytes directly from /dev/[u]random.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
  * [2165477] crypto: use glib as fallback for hash algorithm.
    GLib >= 2.16 provides GChecksum API which is good enough
    for md5, sha1, sha256 and sha512. Use this as a final
    fallback if neither nettle or gcrypt are available. This
    lets us remove the stub hash impl, and so callers can
    be sure those 4 algs are always available at compile
    time. They may still be disabled at runtime, so a check
    for qcrypto_hash_supports() is still best practice to
    report good error messages.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
  * [7603289] crypto: don't open-code qcrypto_hash_supports.
    Call the existing qcrypto_hash_supports method from
    qcrypto_hash_bytesv instead of open-coding it again.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Pranith Kumar ]
  * [b95aae1] Revert e5dfc5e8e("Move README to markdown")
    checkpatch.pl and other scripts fail without README. Revert
    the rename for now; we may add README.md as a symlink later.
    This reverts commit e5dfc5e8e715c572aea44ac4d96c43941d4741c7.
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Reviewed-by: Stefan Weil <sw@weilnetz.de>
    Message-id: 20160720203131.30229-2-bobby.prani@gmail.com
    [PMM: tweaked commit message a little]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Michael S. Tsirkin ]
  * [09cd058] intel_iommu: get rid of {0} initializers.
    Correct and portable in theory, but triggers warnings with older gcc
    versions when -Wmissing-braces is enabled.
    See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Peter Xu ]
  * [cb135f5] q35: ioapic: add support for emulated IOAPIC IR.
    This patch translates all IOAPIC interrupts into MSI ones. One pseudo
    ioapic address space is added to transfer the MSI message. By default,
    it will be system memory address space. When IR is enabled, it will be
    IOMMU address space.
    Currently, only emulated IOAPIC is supported.
    Idea suggested by Jan Kiszka and Rita Sinha in the following patch:
    https://lists.gnu.org/archive/html/qemu-devel/2016-03/msg01933.html
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [c15fa0b] ioapic: introduce ioapic_entry_parse() helper.
    Abstract IOAPIC entry parsing logic into a helper function.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [8b5ed7d] intel_iommu: add support for split irqchip.
    In split irqchip mode, IOAPIC is working in user space, only update
    kernel irq routes when entry changed. When IR is enabled, we directly
    update the kernel with translated messages. It works just like a kernel
    cache for the remapping entries.
    Since KVM irqfd is using kernel gsi routes to deliver interrupts, as
    long as we can support split irqchip, we will support irqfd as
    well. Also, since kernel gsi routes will cache translated interrupts,
    irqfd delivery will not suffer from any performance impact due to IR.
    And, since we supported irqfd, vhost devices will be able to work
    seamlessly with IR now. Logically this should contain both vhost-net and
    vhost-user case.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [move trace-events lines into target-i386/trace-events]
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [02a2cbc] x86-iommu: introduce IEC notifiers.
    This patch introduces x86 IOMMU IEC (Interrupt Entry Cache)
    invalidation notifier list. When vIOMMU receives IEC invalidate
    request, all the registered units will be notified with specific
    invalidation requests.
    Intel IOMMU is the first provider that generates such a event.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [e3d9c92] ioapic: register IOMMU IEC notifier for ioapic.
    Let IOAPIC the first consumer of x86 IOMMU IEC invalidation
    notifiers. This is only used for split irqchip case, when vIOMMU
    receives IR invalidation requests, IOAPIC will be notified to update
    kernel irq routes. For simplicity, we just update all IOAPIC routes,
    even if the invalidated entries are not IOAPIC ones.
    Since now we are creating IOMMUs using "-device" parameter, IOMMU
    device will be created after IOAPIC.  We need to do the registration
    after machine done by leveraging machine_done notifier.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Jan Kiszka ]
  * [2858931] intel_iommu: Add support for Extended Interrupt Mode.
    As neither QEMU nor KVM support more than 255 CPUs so far, this is
    simple: we only need to switch the destination ID translation in
    vtd_remap_irq_get if EIME is set.
    Once CFI support is there, it will have to take EIM into account as
    well. So far, nothing to do for this.
    This patch allows to use x2APIC in split irqchip mode of KVM.
    Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
    [use le32_to_cpu() to retrieve dest_id]
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Peter Xu ]
  * [ede9c94] intel_iommu: add SID validation for IR.
    This patch enables SID validation. Invalid interrupts will be dropped.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d1f6af6] kvm-irqchip: simplify kvm_irqchip_add_msi_route.
    Changing the original MSIMessage parameter in kvm_irqchip_add_msi_route
    into the vector number. Vector index provides more information than the
    MSIMessage, we can retrieve the MSIMessage using the vector easily. This
    will avoid fetching MSIMessage every time before adding MSI routes.
    Meanwhile, the vector info will be used in the coming patches to further
    enable gsi route update notifications.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [38d8749] kvm-irqchip: i386: add hook for add/remove virq.
    Adding two hooks to be notified when adding/removing msi routes. There
    are two kinds of MSI routes:
    - in kvm_irqchip_add_irq_route(): before assigning IRQFD. Used by
      vhost, vfio, etc.
    - in kvm_irqchip_send_msi(): when sending direct MSI message, if
      direct MSI not allowed, we will first create one MSI route entry
      in the kernel, then trigger it.
    This patch only hooks the first one (irqfd case). We do not need to
    take care for the 2nd one, since it's only used by QEMU userspace
    (kvm-apic) and the messages will always do in-time translation when
    triggered. While we need to note them down for the 1st one, so that we
    can notify the kernel when cache invalidation happens.
    Also, we do not hook IOAPIC msi routes (we have explicit notifier for
    IOAPIC to keep its cache updated). We only need to care about irqfd
    users.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [e1d4fb2] kvm-irqchip: x86: add msi route notify fn.
    One more IEC notifier is added to let msi routes know about the IEC
    changes. When interrupt invalidation happens, all registered msi routes
    will be updated for all PCI devices.
    Since both vfio and vhost are possible gsi route consumers, this patch
    will go one step further to keep them safe in split irqchip mode and
    when irqfd is enabled.
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    [move trace-events lines into target-i386/trace-events]
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [3f1fea0] kvm-irqchip: do explicit commit when update irq.
    In the past, we are doing gsi route commit for each irqchip route
    update. This is not efficient if we are updating lots of routes in the
    same time. This patch removes the committing phase in
    kvm_irqchip_update_msi_route(). Instead, we do explicit commit after all
    routes updated.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Radim Krčmář ]
  * [a3f409c] intel_iommu: support all masks in interrupt entry cache invalidation.
    Linux guests do not gracefully handle cases when the invalidation mask
    they wanted is not supported, probably because real hardware always
    allowed all.
    We can just say that all 16 masks are supported, because both
    ioapic_iec_notifier and kvm_update_msi_routes_all invalidate all caches.
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Peter Xu ]
  * [54a6c11] kvm-all: add trace events for kvm irqchip ops.
    These will help us monitoring irqchip route activities more easily.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [4684a20] intel_iommu: disallow kernel-irqchip=on with IR.
    When user specify "intremap=on" with "-M kernel-irqchip=on", throw error
    and then quit.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Fam Zheng ]
  * [bf1780b] virtio: Add typedef for handle_output.
    The function pointer signature has been repeated a few times, using a
    typedef may make coding easier.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
  * [872dd82] virtio: Introduce virtio_add_queue_aio.
    Using this function instead of virtio_add_queue marks the vq as aio
    based. This differentiation will be useful in later patches.
    Distinguish between virtqueue processing in the iohandler context and main loop
    AioContext.  iohandler context is isolated from AioContexts and therefore does
    not run during aio_poll().
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
  * [0ff841f] virtio-blk: Call virtio_add_queue_aio.
    AIO based handler is more appropriate here because it will then
    cooperate with bdrv_drained_begin/end. It is needed by the coming
    revert patch.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1c62713] virtio-scsi: Call virtio_add_queue_aio.
    AIO based handler is more appropriate here because it will then
    cooperate with bdrv_drained_begin/end. It is needed by the coming
    revert patch.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
  * [d4a92a8] Revert "mirror: Workaround for unexpected iohandler events during completion"
    This reverts commit ab27c3b5e7408693dde0b565f050aa55c4a1bcef.
    The virtio storage device host notifiers now work with
    bdrv_drained_begin/end, so we don't need this hack any more.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
  * [209b27b] virtio-scsi: Replace HandleOutput typedef.
    There is a new common one in virtio.h, use it.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Dr. David Alan Gilbert ]
  * [76010cb] virtio-net: Remove old migration version support
    virtio-net has had version 11 since 0ce0e8f4 in 2009
    (v0.11.0-rc0-1480-g0ce0e8f) - remove the code to support loading
    anything earlier.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Amit Shah <amit.shah@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [71945ae] virtio-serial: Remove old migration version support
    virtio-serial-bus has had version 3 since 37f95bf3d0 in 0.13-rc0;
    it's time to clean it up a bit.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Amit Shah <amit.shah@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [5943124] virtio: Migration helper function and macro.
    To make conversion of virtio devices to VMState simple
    at first add a helper function for the simple virtio_save
    case and a helper macro that defines the VMState structure.
    These will probably go away or change as more of the virtio
    code gets converted.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [5a289a2] virtio-scsi: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [bbded32] virtio-blk: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [b607579] virtio-rng: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [7f1ca9b] virtio-balloon: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [290c242] virtio-net: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [42e6c03] virtio-serial: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [18e0e5b] 9pfs: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [428d2ed] virtio-input: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [de88922] virtio-gpu: Use migrate_add_blocker for virgl migration blocking
    virgl conditionally registers a vmstate as unmigratable when virgl
    is enabled; instead use the migrate_add_blocker mechanism.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
  * [0fc0749] virtio-gpu: Wrap in vmstate.
    Forcibly convert it to a vmstate wrapper;  proper conversion
    comes later.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
  * [1a210f6] virtio: Update migration docs.
    Remove references to register_savevm.
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Michael S. Tsirkin ]
  * [bc38ee1] intel_iommu: avoid unnamed fields.
    Also avoid unnamed fields for portability.
    Also, rename VTD_IRTE to VTD_IR_TableEntry for coding
    style compliance.
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Dr. David Alan Gilbert ]
  * [42da555] migration: set state to post-migrate on failure.
    If a migration fails/is cancelled during the postcopy stage we currently
    end up with the runstate as finish-migrate, where it should be post-migrate.
    There's a small window in precopy where I think the same thing can
    happen, but I've never seen it.
    It rarely matters; the only postcopy case is if you restart a migration, which
    again is a case that rarely matters in postcopy because it's only
    safe to restart the migration if you know the destination hasn't
    been running (which you might if you started the destination with -S
    and hadn't got around to 'c' ing it before the postcopy failed).
    Even then it's a small window but potentially you could hit if
    there's a problem loading the devices on the destination.
    This corresponds to:
    https://bugzilla.redhat.com/show_bug.cgi?id=1355683
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Amit Shah <amit.shah@redhat.com>
    Message-Id: <1468601086-32117-1-git-send-email-dgilbert@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Daniel P. Berrange ]
  * [6f7a4a8] scripts: add __init__.py file to scripts/qmp/
    When searching for modules to load, python will ignore any
    sub-directory which does not contain __init__.py. This means
    that both scripts and scripts/qmp/ have to be explicitly added
    to the python path. By adding a __init__.py file to scripts/qmp,
    we only need add scripts/ to the python path and can then simply
    do 'from qmp import qmp' to load scripts/qmp/qmp.py.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1469020993-29426-2-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [991e7c4] scripts: add a 'debug' parameter to QEMUMonitorProtocol.
    Add a 'debug' parameter to the QEMUMonitorProtocol class
    which will cause it to print out all JSON strings on
    sys.stderr
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1469020993-29426-3-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [6661397] scripts: refactor the VM class in iotests for reuse.
    The iotests module has a python class for controlling QEMU
    processes. Pull the generic functionality out of this file
    and create a scripts/qemu.py module containing a QEMUMachine
    class. Put the QTest integration support into a subclass
    QEMUQtestMachine.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1469020993-29426-4-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [2380646] scripts: set timeout when waiting for qemu monitor connection.
    If QEMU fails to launch for some reason, the QEMUMonitorProtocol
    class accept() method will wait forever in a socket accept call.
    Set a timeout of 15 seconds so that we fail more gracefully
    instead of hanging the test script forever
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1469020993-29426-5-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [168ae6c] scripts: ensure monitor socket has SO_REUSEADDR set.
    If tests use a TCP based monitor socket, the connection will
    go into a TIMED_WAIT state when the test exits. This will
    randomly prevent the test from being re-run without a certain
    time period. Set the SO_REUSEADDR flag on the socket to ensure
    we can immediately re-run the tests
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1469020993-29426-6-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
  * [409437e] tests: introduce a framework for testing migration performance.
    This introduces a moderately general purpose framework for
    testing performance of migration.
    The initial guest workload is provided by the included 'stress'
    program, which is configured to spawn one thread per guest CPU
    and run a maximally memory intensive workload. It will loop
    over GB of memory, xor'ing each byte with data from a 4k array
    of random bytes. This ensures heavy read and write load across
    all of guest memory to stress the migration performance. While
    running the 'stress' program will record how long it takes to
    xor each GB of memory and print this data for later reporting.
    The test engine will spawn a pair of QEMU processes, either on
    the same host, or with the target on a remote host via ssh,
    using the host kernel and a custom initrd built with 'stress'
    as the /init binary. Kernel command line args are set to ensure
    a fast kernel boot time (< 1 second) between launching QEMU and
    the stress program starting execution.
    None the less, the test engine will initially wait N seconds for
    the guest workload to stablize, before starting the migration
    operation. When migration is running, the engine will use pause,
    post-copy, autoconverge, xbzrle compression and multithread
    compression features, as well as downtime & bandwidth tuning
    to encourage completion. If migration completes, the test engine
    will wait N seconds again for the guest workooad to stablize on
    the target host. If migration does not complete after a preset
    number of iterations, it will be aborted.
    While the QEMU process is running on the source host, the test
    engine will sample the host CPU usage of QEMU as a whole, and
    each vCPU thread. While migration is running, it will record
    all the stats reported by 'query-migration'. Finally, it will
    capture the output of the stress program running in the guest.
    All the data produced from a single test execution is recorded
    in a structured JSON file. A separate program is then able to
    create interactive charts using the "plotly" python + javascript
    libraries, showing the characteristics of the migration.
    The data output provides visualization of the effect on guest
    vCPU workloads from the migration process, the corresponding
    vCPU utilization on the host, and the overall CPU hit from
    QEMU on the host. This is correlated from statistics from the
    migration process, such as downtime, vCPU throttling and iteration
    number.
    While the tests can be run individually with arbitrary parameters,
    there is also a facility for producing batch reports for a number
    of pre-defined scenarios / comparisons, in order to be able to
    get standardized results across different hardware configurations
    (eg TCP vs RDMA, or comparing different VCPU counts / memory
    sizes, etc).
    To use this, first you must build the initrd image
     $ make tests/migration/initrd-stress.img
    To run a a one-shot test with all default parameters
     $ ./tests/migration/guestperf.py > result.json
    This has many command line args for varying its behaviour.
    For example, to increase the RAM size and CPU count and
    bind it to specific host NUMA nodes
     $ ./tests/migration/guestperf.py \
           --mem 4 --cpus 2 \
           --src-mem-bind 0 --src-cpu-bind 0,1 \
           --dst-mem-bind 1 --dst-cpu-bind 2,3 \
           > result.json
    Using mem + cpu binding is strongly recommended on NUMA
    machines, otherwise the guest performance results will
    vary wildly between runs of the test due to lucky/unlucky
    NUMA placement, making sensible data analysis impossible.
    To make it run across separate hosts:
     $ ./tests/migration/guestperf.py \
           --dst-host somehostname > result.json
    To request that post-copy is enabled, with switchover
    after 5 iterations
     $ ./tests/migration/guestperf.py \
           --post-copy --post-copy-iters 5 > result.json
    Once a result.json file is created, a graph of the data
    can be generated, showing guest workload performance per
    thread and the migration iteration points:
     $ ./tests/migration/guestperf-plot.py --output result.html \
            --migration-iters --split-guest-cpu result.json
    To further include host vCPU utilization and overall QEMU
    utilization
     $ ./tests/migration/guestperf-plot.py --output result.html \
            --migration-iters --split-guest-cpu \
    	--qemu-cpu --vcpu-cpu result.json
    NB, the 'guestperf-plot.py' command requires that you have
    the plotly python library installed. eg you must do
     $ pip install --user  plotly
    Viewing the result.html file requires that you have the
    plotly.min.js file in the same directory as the HTML
    output. This js file is installed as part of the plotly
    python library, so can be found in
      $HOME/.local/lib/python2.7/site-packages/plotly/offline/plotly.min.js
    The guestperf-plot.py program can accept multiple json files
    to plot, enabling results from different configurations to
    be compared.
    Finally, to run the entire standardized set of comparisons
      $ ./tests/migration/guestperf-batch.py \
           --dst-host somehost \
           --mem 4 --cpus 2 \
           --src-mem-bind 0 --src-cpu-bind 0,1 \
           --dst-mem-bind 1 --dst-cpu-bind 2,3
           --output tcp-somehost-4gb-2cpu
    will store JSON files from all scenarios in the directory
    named tcp-somehost-4gb-2cpu
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1469020993-29426-7-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Peter Maydell ]
  * [01a7201] target-sh4: Use glib allocator in movcal helper.
    Coverity spots that helper_movcal() calls malloc() but doesn't
    check for failure. Fix this by switching to the glib allocation
    functions, which abort on allocation failure.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1468327859-21385-1-git-send-email-peter.maydell@linaro.org
    Acked-by: Aurelien Jarno <aurelien@aurel32.net>
  * [2d2e632] Update version for v2.7.0-rc0 release.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Thomas Huth ]
  * [3d4f253] ppc: Huge page detection mechanism fixes - Episode III.
    After already fixing two issues with the huge page detection mechanism
    (see commit 159d2e39a860 and 86b50f2e1bef), Greg Kurz noticed another
    case that caused the guest to crash where QEMU announces huge pages
    though they should not be available for the guest:
    qemu-system-ppc64 -enable-kvm ... -mem-path /dev/hugepages \
     -m 1G,slots=4,maxmem=32G
     -object memory-backend-ram,policy=default,size=1G,id=mem-mem1 \
     -device pc-dimm,id=dimm-mem1,memdev=mem-mem1 -smp 2 \
     -numa node,nodeid=0 -numa node,nodeid=1
    That means if there is a global mem-path option, we still have
    to look at the memory-backend objects that have been specified
    additionally and return their minimum page size if that value
    is smaller than the page size of the main memory.
    Reported-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Tested-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [c573fc0] hw/ppc/spapr: Make sure to close the htab_fd when migration is canceled.
    When canceling a migration process, we currently do not close the
    HTAB migration file descriptor since htab_save_complete() is never
    called in that case. So we leave the migration process with a
    dangling htab_fd value around, and this causes any further migration
    attempts to fail. To fix this issue, simply make sure that the
    htab_fd is closed during the migration cleanup stage. And since the
    cleanup() function is also called when migration succeeds, we can
    also remove the call to close_htab_fd() from the htab_save_complete()
    function.
    Buglink: https://bugzilla.redhat.com/show_bug.cgi?id=1354341
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ lvivier@redhat.com ]
  * [cf472f4] spapr: fix spapr-nvram migration.
    When spapr-nvram is backed by a file using pflash interface,
    migration fails on the destination guest with assert:
        bdrv_co_pwritev: Assertion `!(bs->open_flags & 0x0800)' failed.
    This avoids the problem by delaying the pflash update until after
    the device loads complete.
    This fix is similar to the one for the pflash_cfi01 migration:
        90c647d Fix pflash migration
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Michael Walle ]
  * [2fff4ba] target-ppc: add PPC_MFTB flag to e500mc and e5500.
    According to the e500mc and e5500 core reference manual they have support
    for the mftb instruction.
    Signed-off-by: Michael Walle <michael@walle.cc>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Greg Kurz ]
  * [12bf2d3] spapr: disintricate core-id from DT semantics.
    The goal of this patch is to have a stable core-id which does not depend
    on any DT related semantics, which involve non-obvious computations on
    modern PowerPC server cpus.
    With this patch, the DT core id is computed on-demand as:
           (core-id / smp_threads) * smt
    where smt is the number of threads per core in the host.
    This formula should be consolidated in a helper since it is needed in
    several places.
    Other uses for core-id includes: compute a stable cpu_index (which
    allows random order hotplug/unplug without breaking migration) and
    NUMA.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Marc-André Lureau ]
  * [fe31017] build-sys: link tests/data.
    Link a common tests data directory to the build directory.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>
  * [1741b94] tests: use static qga config file.
    Do not create a leaking temporary file, but use a static file instead.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>

  [ Michael Roth ]
  * [690604f] configure: mark qemu-ga VSS includes as system headers.
    As of e4650c81, we do w32 builds with -Werror enabled. Unfortunately
    for cases where we enable VSS support in qemu-ga, we still have
    warnings generated by VSS includes that ship as part of the Microsoft
    VSS SDK.
    We can selectively address a number of these warnings using
      #pragma GCC diagnostic ignored ...
    but at least one of these:
      warning: ‘typedef’ was ignored in this declaration
    resulting from declarations of the form:
      typedef struct Blah { ... };
    does not provide a specific command-line/pragma option to disable
    warnings of the sort.
    To allow VSS builds to succeed, the next-best option is disabling
    these warnings on a per-file basis. pragmas like #pragma GCC
    system_header can be used to declare subsequent includes/declarations
    as being exempt from normal warnings, but this must be done within
    a header file.
    Since we don't control the VSS SDK, we'd need to rely on a
    intermediate header include to accomplish this, and
    since different objects in the VSS link target rely on different
    headers from the VSS SDK, this would become somewhat of a rat's nest
    (though not totally unmanageable).
    The next step up in granularity is just marking the entire VSS
    SDK include path as system headers via -isystem. This is a bit more
    heavy-handed, but since this SDK hasn't changed since 2005, there's
    likely little to be gained from selectively disabling warnings
    anyway, so we implement that approach here.
    This fixes the -Werror failures in both the configure test and the
    qga build due to shared reliance on $vss_win32_include. For the
    same reason, this also enforces a new dependency on -isystem support
    in the C/C++ compiler when building QGA with VSS enabled.
    Cc: Thomas Huth <thuth@redhat.com>
    Cc: Stefan Weil <sw@weilnetz.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>

  [ Vladimir Sementsov-Ogievskiy ]
  * [ebf7bba] qcow2: do not allocate extra memory.
    There are no needs to allocate more than one cluster, as we set
    avail_out for deflate to one cluster.
    Zlib docs (http://www.zlib.net/manual.html) says:
    "deflate compresses as much data as possible, and stops when the input
    buffer becomes empty or the output buffer becomes full."
    So, deflate will not write more than avail_out to output buffer. If
    there is not enough space in output buffer for compressed data (it may
    be larger than input data) deflate just returns Z_OK. (if all data is
    compressed and written to output buffer deflate returns Z_STREAM_END).
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-id: 1468515565-81313-1-git-send-email-vsementsov@virtuozzo.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Cao jin ]
  * [54a16a6] AioContext: correct comments.
    Correct comments of field notify_me
    Cc: Kevin Wolf <kwolf@redhat.com>
    Cc: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-id: 1468575858-22975-1-git-send-email-caoj.fnst@cn.fujitsu.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Daniel P. Berrange ]
  * [40c8502] crypto: add support for querying parameters for block encryption.
    When creating new block encryption volumes, we accept a list of
    parameters to control the formatting process. It is useful to
    be able to query what those parameters were for existing block
    devices. Add a qcrypto_block_get_info() method which returns a
    QCryptoBlockInfo instance to report this data.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1469192015-16487-2-git-send-email-berrange@redhat.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [c7c4cf4] block: export LUKS specific data to qemu-img info.
    The qemu-img info command has the ability to expose format
    specific metadata about volumes. Wire up this facility for
    the LUKS driver to report on cipher configuration and key
    slot usage.
        $ qemu-img info ~/VirtualMachines/demo.luks
        image: /home/berrange/VirtualMachines/demo.luks
        file format: luks
        virtual size: 98M (102760448 bytes)
        disk size: 100M
        encrypted: yes
        Format specific information:
            ivgen alg: plain64
            hash alg: sha1
            cipher alg: aes-128
            uuid: 6ddee74b-3a22-408c-8909-6789d4fa2594
            cipher mode: xts
            slots:
                [0]:
                    active: true
                    iters: 572706
                    key offset: 4096
                    stripes: 4000
                [1]:
                    active: false
                    key offset: 135168
                [2]:
                    active: false
                    key offset: 266240
                [3]:
                    active: false
                    key offset: 397312
                [4]:
                    active: false
                    key offset: 528384
                [5]:
                    active: false
                    key offset: 659456
                [6]:
                    active: false
                    key offset: 790528
                [7]:
                    active: false
                    key offset: 921600
            payload offset: 2097152
            master key iters: 142375
    One somewhat undesirable artifact is that the data fields are
    printed out in (apparently) random order. This will be addressed
    later by changing the way the block layer pretty-prints the
    image specific data.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1469192015-16487-3-git-send-email-berrange@redhat.com
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Max Reitz <mreitz@redhat.com>
  * [4c44b4a] iotest: fix python based IO tests.
    The previous commit refactoring iotests.py:
      commit 66613974468fb6e1609fb3eabf55981b1ee436cf
      Author: Daniel P. Berrange <berrange@redhat.com>
      Date:   Wed Jul 20 14:23:10 2016 +0100
        scripts: refactor the VM class in iotests for reuse
    was not properly tested and included a number of broken
    bits.
     - The 'event_match' method was not moved into qemu.py
     - The 'self._args' list parameter in QEMUMachine needs
       to be copied otherwise modifications will affect the
       global 'qemu_opts' variable in iotests.py
     - The QEMUQtestMachine class methods had inverted
       parameter order for the super() calls
     - The QEMUQtestMachine class forgot to add
       '-machine accel=qtest'
     - The QEMUQtestMachine class constructor needs to set
       a default 'name' value before using it as it may
       be None
     - The QEMUQtestMachine class constructor needs to use
       named parameters when calling the super constructor
       as it is leaving out some positional parameters.
     - The 'qemu_prog' variable should be a string not a
       list in iotests.py
     - The VM classs constructor needs to use named
       parameters when calling the super constructor
       as it is leaving out some positional parameters.
     - The path to the socket-scm-helper needs to be
       passed into the QEMUMachine class
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1469549767-27249-1-git-send-email-berrange@redhat.com
    Signed-off-by: Max Reitz <mreitz@redhat.com>

  [ Igor Mammedov ]
  * [1bc7e52] exec: Reduce CONFIG_USER_ONLY ifdeffenery.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [8b1b835] exec: Don't use cpu_index to detect if cpu_exec_init()'s been called.
    Instead use QTAIL's tqe_prev field to detect if cpu's been
    placed in list by cpu_exec_init() which is always set if
    QTAIL element is in list.
    Fixes SIGSEGV on failure path in case cpu_index is assigned
    by board and cpu.relalize() fails before cpu_exec_init() is called.
    In follow up patches, cpu_index will be assigned by boards that
    support cpu hot(un)plug and need stable cpu_index that doesn't
    depend on order cpus are created/removed.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [a07f953] exec: Set cpu_index only if it's not been explictly set.
    It keeps the legacy behavior for all users that doesn't care
    about stable cpu_index value, but would allow boards that
    would support device_add/device_del to set stable cpu_index
    that won't depend on order in which cpus are created/destroyed.
    While at that simplify cpu_get_free_index() as cpu_index
    generated by USER_ONLY and softmmu variants is the same
    since none of the users support cpu-remove so far, except
    of not yet released spapr/x86 device_add/delr, which
    will be altered by follow up patches to set stable
    cpu_index manually.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [69382d8] qdev: Fix object reference leak in case device.realize() fails.
    If device doesn't have parent assined before its realize
    is called, device_set_realized() will implicitly set parent
    to '/machine/unattached'.
    However device_set_realized() may fail after that point at
    several other points leaving not realized object dangling
    in '/machine/unattached' and as result caller of
      obj = object_new()
        obj->ref == 1
      object_property_set_bool(obj,..., true, "realized",...)
        obj->ref == 2
      if (fail)
          object_unref(obj);
          obj->ref == 1
    will get object leak instead of expected object destruction.
    Fix it by making device_set_realized() to cleanup after itself
    in case of failure.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [a15d272] pc: Init CPUState->cpu_index with index in possible_cpus[]
    It will enshure that cpu_index for a given cpu stays the same
    regardless of the order cpus has been created/deleted.
    No compat code is needed as for initial cpus index in
    possible_cpus[] matches cpu_index that's been auto-allocated
    in cpu_exec_init().
    Tha same applies for hotplug with cpu-add command if cpus are
    added sequentially in increasing order as 'id' matches cpu_index.
    If cpu-add had been used for creating out-of-order cpus,
    that created unmigratable instance since it were not possible
    to start target with the same cpu_index using old way
    of migrating instance with hotplugged cpus:
    * source QEMU with CLI (-smp 1,maxcpus=3 and cpu-add id=2)
      following set of cpu_index is allocated [0, 1] with
      apics set [0, 2] respectivelly
    * target QEMU is started with CLI -smp 2,maxcpus=3
      resulting in set of cpu_index [0, 1] but with
      set of apics [0, 1] wich doesn't match source.
    So we don't need compat code in this case as it's never worked
    and newelly added device_add support would use stable cpu_index
    set by machine to begin with, so it won't have above limitation
    and source QEMU could be migrated to destination regardless
    of the order cpus were created.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [9527e7b] Revert "pc: Enforce adding CPUs contiguously and removing them in opposite order"
    This reverts commit 4da7faaeb0c7dd3f7f233165d336c878f78fd1eb.
    Since commit:
      pc: init CPUState->cpu_index with index in possible_cpus[]
    cpu_index is stable regardless of the order cpus were created
    and QEMU instance stays migratable always so limitation added
    by 4da7faaeb could be safely removed.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Prasanna Kumar Kalever ]
  * [0a189ff] block/gluster: fix doc in the qapi schema and member name.
    1. qapi @BlockdevOptionsGluster schema member name s/debug_level/debug-level/
    2. rearrange the versioning
    3. s/server description/servers description/
    Signed-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-Id: <1469198048-8535-1-git-send-email-prasanna.kalever@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ Vladimir Sementsov-Ogievskiy ]
  * [0965a41] mirror: double performance of the bulk stage if the disc is full.
    Mirror can do up to 16 in-flight requests, but actually on full copy
    (the whole source disk is non-zero) in-flight is always 1. This happens
    as the request is not limited in size: the data occupies maximum available
    capacity of s->buf.
    The patch limits the size of the request to some artificial constant
    (1 Mb here), which is not that big or small. This effectively enables
    back parallelism in mirror code as it was designed.
    The result is important: the time to migrate 10 Gb disk is reduced from
    ~350 sec to 170 sec.
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Message-id: 1468516741-82174-1-git-send-email-vsementsov@virtuozzo.com
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Fam Zheng <famz@redhat.com>
    CC: Kevin Wolf <kwolf@redhat.com>
    CC: Max Reitz <mreitz@redhat.com>
    CC: Jeff Cody <jcody@redhat.com>
    CC: Eric Blake <eblake@redhat.com>
    Signed-off-by: Jeff Cody <jcody@redhat.com>

  [ Stefan Hajnoczi ]
  * [afd9096] virtio: error out if guest exceeds virtqueue size.
    A broken or malicious guest can submit more requests than the virtqueue
    size permits, causing unbounded memory allocation in QEMU.
    The guest can submit requests without bothering to wait for completion
    and is therefore not bound by virtqueue size.  This requires reusing
    vring descriptors in more than one request, which is not allowed by the
    VIRTIO 1.0 specification.
    In "3.2.1 Supplying Buffers to The Device", the VIRTIO 1.0 specification
    says:
      1. The driver places the buffer into free descriptor(s) in the
         descriptor table, chaining as necessary
    and
      Note that the above code does not take precautions against the
      available ring buffer wrapping around: this is not possible since the
      ring buffer is the same size as the descriptor table, so step (1) will
      prevent such a condition.
    This implies that placing more buffers into the virtqueue than the
    descriptor table size is not allowed.
    QEMU is missing the check to prevent this case.  Processing a request
    allocates a VirtQueueElement leading to unbounded memory allocation
    controlled by the guest.
    Exit with an error if the guest provides more requests than the
    virtqueue size permits.  This bounds memory allocation and makes the
    buggy guest visible to the user.
    This patch fixes CVE-2016-5403 and was reported by Zhenhao Hong from 360
    Marvel Team, China.
    Reported-by: Zhenhao Hong <hongzhenhao@360.cn>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Greg Kurz ]
  * [78a3930] machine: Add comment to abort path in machine_set_kernel_irqchip.
    We're not supposed to abort when the user passes a bogus value.
    Since the checking is done in visit_type_OnOffSplit(), the call
    to abort() is legitimate. Let's add a comment to make it
    explicit.
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [b3443f4] qdev: ignore GlobalProperty.errp for hotplugged devices.
    This patch ensures QEMU won't terminate while hotplugging a device if the
    global property cannot be set and errp points to error_fatal or error_abort.
    While here, it also fixes indentation of the typename argument.
    Suggested-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
  * [03f28ef] vl: exit if a bad property value is passed to -global.
    When passing '-global driver=host-powerpc64-cpu,property=compat,value=foo'
    on the command line, without this patch, we get the following warning per
    device (which means many lines if the guests has many cpus):
    qemu-system-ppc64: Warning: can't apply global host-powerpc64-cpu.compat=foo:
        Invalid compatibility mode "foo"
    ... and QEMU continues execution, ignoring the property.
    With this patch, we get a single line:
    qemu-system-ppc64: can't apply global host-powerpc64-cpu.compat=foo:
        Invalid compatibility mode "foo"
    ... and QEMU exits.
    The previous behavior is kept for hotplugged devices since we don't want
    QEMU to exit when doing device_add.
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Paul Burton ]
  * [7f81dbb] hw/mips_malta: Fix YAMON API print routine.
    The print routine provided as part of the in-built bootloader had a bug
    in that it attempted to use a jump instruction as part of a loop, but
    the target has its upper bits zeroed leading to control flow
    transferring to 0xb0000814 rather than the intended 0xbfc00814. Fix this
    by using a branch instruction instead, which seems more fit for purpose.
    A simple way to test this is to build a Linux kernel with EVA enabled &
    attempt to boot it in QEMU. It will attempt to print a message
    indicating the configuration mismatch but QEMU would previously
    incorrectly jump & wind up printing a continuous stream of the letter E.
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: Leon Alrae <leon.alrae@imgtec.com>
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Reviewed-by: Leon Alrae <leon.alrae@imgtec.com>
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Leon Alrae ]
  * [701074a] target-mips: fix EntryHi.EHINV being cleared on TLB exception.
    While implementing TLB invalidation feature we forgot to modify
    part of code responsible for updating EntryHi during TLB exception.
    Consequently EntryHi.EHINV is unexpectedly cleared on the exception.
    Signed-off-by: Leon Alrae <leon.alrae@imgtec.com>

  [ Michael S. Tsirkin ]
  * [6b44954] pcie: fix link active status bit migration.
    We changed link status register in pci express endpoint capability
    over time. Specifically,
    commit b2101eae63ea57b571cee4a9075a4287d24ba4a4 ("pcie: Set the "link
    active" in the link status register") set data link layer link active
    bit in this register without adding compatibility to old machine types.
    When migrating from qemu 2.3 and older this affects xhci devices which
    under machine type 2.0 and older have a pci express endpoint capability
    even if they are on a pci bus.
    Add compatibility flags to make this bit value match what it was under
    2.3.
    Additionally, to avoid breaking migration from qemu 2.3 and up,
    suppress checking link status during migration: this seems sane
    since hardware can change link status at any time.
    https://bugzilla.redhat.com/show_bug.cgi?id=1352860
    Reported-by: Gerd Hoffmann <kraxel@redhat.com>
    Fixes: b2101eae63ea57b571cee4a9075a4287d24ba4a4
        ("pcie: Set the "link active" in the link status register")
    Cc: qemu-stable@nongnu.org
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Marcel Apfelbaum ]
  * [2c533c5] hw/pcie-root-port: Fix PCIe root port initialization.
    Specify the root port interrupt pin as part of the init
    process for cases when msi/msix are not enabled.
    Fixes "hw/pci/pci.c:196:23: runtime error: shift exponent -1 is negative"
    warning from clang's sanitizer.
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [7b346c7] hw/pxb: declare pxb devices as not hot-pluggable.
    Prevent future issues when hotplug will work for devices
    attached to pxbs.
    Suggested-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Tested-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [c99cb18] hw/acpi: fix a DSDT table issue when a pxb is present.
    PXBs do not support hotplug so they don't have a PCNT function.
    Since the PXB's PCI root-bus is a child bus of bus 0, the
    build_dsdt code will add a call to the corresponding PCNT function.
    Fix this by skipping the PCNT call for the above case.
    While at it skip also PCIe child buses.
    Reported-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Tested-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [2df5a7b] acpi: refactor pxb crs computation.
    Instead of always passing both IO and MEM ranges when
    computing CRS ranges, define a new CrsRangeSet structure
    that include them both.
    This is done before introducing a third type of range,
    64-bit MEM, so it will be easier to pass them all around.
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Tested-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [16de88a] hw/apci: handle 64-bit MMIO regions correctly.
    In build_crs(), the calculation and merging of the ranges already happens
    in 64-bit, but the entry boundaries are silently truncated to 32-bit in the
    call to aml_dword_memory(). Fix it by handling the 64-bit MMIO ranges separately.
    This fixes 64-bit BARs behind PXBs.
    Reported-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Igor Mammedov <imammedo@redhat.com>
    Tested-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Wei Jiangang ]
  * [86395eb] hw/pci-bridge: Convert pxb initialization functions to Error.
    Firstly, convert pxb_dev_init_common() to Error and rename
    it to pxb_dev_realize_common().
    Actually, pxb_register_bus() is converted as well.
    And then,
    convert pxb_dev_initfn() and pxb_pcie_dev_initfn() to Error,
    rename them to pxb_dev_realize() and pxb_pcie_dev_realize()
    respectively.
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [be0d976] apb: convert init to realize.
    Convert a device model where initialization obviously can't fail,
    make it implement realize() rather than init().
    Signed-off-by: Wei Jiangang <weijg.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>

  [ Marcel Apfelbaum ]
  * [9a4c0e2] hw/virtio-pci: fix virtio behaviour.
    Enable transitional virtio devices by default.
    Enable virtio-1.0 for devices plugged into
    PCIe ports (Root ports or Downstream ports).
    Using the virtio-1 mode will remove the limitation
    of the number of devices that can be attached to a machine
    by removing the need for the IO BAR.
    Signed-off-by: Marcel Apfelbaum <marcel@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Prasad J Pandit ]
  * [1e7aed7] virtio: check vring descriptor buffer length
    virtio back end uses set of buffers to facilitate I/O operations.
    An infinite loop unfolds in virtqueue_pop() if a buffer was
    of zero size. Add check to avoid it.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Marc-André Lureau ]
  * [01edc23] misc: indentation.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d9d2611] vhost-user: minor simplification.
    Shorten the code and make it more clear by using the specialized
    function g_str_has_prefix().
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [9c7d18b] vhost-user: disconnect on HUP.
    In some cases, qemu_chr_fe_read_all() on HUP event doesn't raise
    CHR_EVENT_CLOSED because the read/recv function returns -1 on
    disconnected peers (for example with tch_chr_recv, an ECONNRESET errno
    overwritten as EIO).
    It is simpler to explicitely disconnect on HUP, rising CHR_EVENT_CLOSED
    if it wasn't disconnected already.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [7cb8a9b] vhost: don't assume opaque is a fd, use backend cleanup
    vhost-dev opaque isn't necessarily an fd, it can be a chardev when using
    vhost-user. Goto fail, so vhost_backend_cleanup() is called to handle
    backend cleanup appropriately.
    vhost_set_backend_type() should never fail, use an assert().
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [9e0bc24] vhost: make vhost_log_put() idempotent.
    Although not strictly required, it is nice to have vhost_log_put()
    safely callable multiple times.
    Clear dev->log* when calling vhost_log_put() to make the function
    idempotent. This also simplifies a bit the caller work.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [7b52724] vhost: assert the log was cleaned up.
    Make sure the log was released on cleanup, or it will leak (the
    alternative is to call vhost_log_put() unconditionally, but it may hide
    some dev state issues).
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [5be5f9b] vhost: fix cleanup on not fully initialized device.
    If vhost_dev_init() failed, caller may still call vhost_dev_cleanup()
    later. However, vhost_dev_cleanup() tries to remove the device from the
    list even if it wasn't yet added, which may lead to crashes. Similarly
    for the memory listener.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [e0547b5] vhost: make vhost_dev_cleanup() idempotent.
    It is called on multiple code path, so make it safe to call several
    times (note: I don't remember a reproducer here, but a function called
    'cleanup' should probably be idempotent in my book)
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [f1a0365] vhost-net: always call vhost_dev_cleanup() on failure
    vhost_dev_init(), calling vhost backend initialization, should be
    cleaned up after failure too. Call vhost_dev_cleanup() in all failure
    cases. First, it needs to zero-alloc the struct to avoid the initial
    garbage.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [a06db3e] vhost: fix calling vhost_dev_cleanup() after vhost_dev_init()
    vhost_net_init() calls vhost_dev_init() and in case of failure, calls
    vhost_dev_cleanup() directly. However, the structure is already
    partially cleaned on error. Calling vhost_dev_cleanup() again will call
    vhost_virtqueue_cleanup() on already clean queues, and causing potential
    double-close. Instead, adjust dev->nvqs and simplify vhost_dev_init()
    code to not call vhost_virtqueue_cleanup() but vhost_dev_cleanup()
    instead.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Ilya Maximets <i.maximets@samsung.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [162bba7] vhost: do not assert() on vhost_ops failure.
    Calling a vhost operation may fail, for example with disconnected
    vhost-user backend, but qemu shouldn't abort in this case.
    Log an error instead, except on error and cleanup code paths where it
    can be mostly ignored.
    Let's use a VHOST_OPS_DEBUG macro to easily disable those messages once
    disconnected backend stabilizes.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [c640969] vhost: add missing VHOST_OPS_DEBUG.
    Add missing VHOST_OPS_DEBUG() logs, for completeness.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [4afba63] vhost: use error_report() instead of fprintf(stderr,...)
    Let's use qemu proper error reporting API, this ensures the error is
    reported at the right place (stderr or monitor), with a conventional
    format.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [5c7eaab] qemu-char: fix qemu_chr_fe_set_msgfds() crash when disconnected.
    Calling qemu_chr_fe_set_msgfds() on unconnected socket leads to crash
    since s->ioc is NULL in this case. Return an error earlier instead.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [df3485a] vhost-user: call set_msgfds unconditionally.
    It is fine to call set_msgfds() with 0 fd, and ensures any previous fd
    array is cleared.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [6fab2f3] vhost-user: check qemu_chr_fe_set_msgfds() return value.
    Check qemu_chr_fe_set_msgfds() for errors, to make sure the message to
    be sent is correct.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [c4843a4] vhost-user: check vhost_user_{read,write}() return value.
    The vhost-user code is quite inconsistent with error handling. Instead
    of ignoring some return values of read/write and silently going on with
    invalid state (invalid read for example), break the code flow when the
    error happened.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [e6bcb1b] vhost-user: keep vhost_net after a disconnection.
    Many code paths assume get_vhost_net() returns non-null.
    Keep VhostUserState.vhost_net after a successful vhost_net_init(),
    instead of freeing it in vhost_net_cleanup().
    VhostUserState.vhost_net is thus freed before after being recreated or
    on final vhost_user_cleanup() and there is no need to save the acked
    features.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [1a5b68c] vhost-user: add get_vhost_net() assertions.
    Add a few assertions to be more explicit about the runtime behaviour
    after the previous patch: get_vhost_net() is non-null after
    net_vhost_user_init().
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [bb12e76] Revert "vhost-net: do not crash if backend is not present"
    Now that get_vhost_net() returns non-null after a successful
    vhost_net_init(), we no longer need to check this case.
    This reverts commit ecd34898596c60f79886061618dd7e01001113ad.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [51f7aca] vhost-net: vhost_migration_done is vhost-user specific.
    Either the callback is mandatory to implement, in which case an assert()
    is more appropriate, or it's not and we can't tell much whether the
    function should fail or not (given it's name, I guess it should silently
    success by default). Instead, make the implementation mandatory and
    vhost-user specific to be more clear about its usage.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [8695de0] vhost: add assert() to check runtime behaviour.
    All these functions must be called only after the backend is connected.
    They are called from virtio-net.c, after either virtio or link status
    change.
    The check for nc->peer->link_down should ensure vhost_net_{start,stop}()
    are always called between vhost_user_{start,stop}().
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [6b6723c] char: add chr_wait_connected callback.
    A function to wait on the backend to be connected, to be used in the
    following patches.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [d7a04fd] char: add and use tcp_chr_wait_connected.
    Add a chr_wait_connected for the tcp backend, and use it in the
    open_socket() function.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [c89804d] vhost-user: wait until backend init is completed.
    The chardev waits for an initial connection before starting qemu, and
    vhost-user should wait for the backend negotiation to be completed
    before starting qemu too.
    vhost-user is started in the net_vhost_user_event callback, which is
    synchronously called after the socket is connected. Use a
    VhostUserState.started flag to indicate vhost-user init completed
    successfully and qemu can be started.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [1ec3b71] tests: plug some leaks in virtio-net-test.
    Found thanks to valgrind.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [69179fe] tests: fix vhost-user-test leak.
    Spotted by valgrind.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [f6b8571] vhost-user: add error report in vhost_user_write()
    Similar to vhost_user_read() error report, it is useful to have early
    error report.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [950d94b] vhost: add vhost_net_set_backend()
    Not all vhost-user backends support ops->vhost_net_set_backend(). It is
    a nicer to provide an assert/error than to crash trying to
    call. Furthermore, it improves a bit the code by hiding vhost_ops
    details.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ John Snow ]
  * [87ac25f] ide: fix halted IO segfault at reset.
    If one attempts to perform a system_reset after a failed IO request
    that causes the VM to enter a paused state, QEMU will segfault trying
    to free up the pending IO requests.
    These requests have already been completed and freed, though, so all
    we need to do is NULL them before we enter the paused state.
    Existing AHCI tests verify that halted requests are still resumed
    successfully after a STOP event.
    Analyzed-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 1469635201-11918-2-git-send-email-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>

  [ Igor Mammedov ]
  * [b63578b] spapr: init CPUState->cpu_index with index relative to core-id.
    It will enshure that cpu_index for a given cpu stays the same
    regardless of the order cpus has been created/deleted and so
    it would be possible to migrate QEMU instance with out of order
    created CPU.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ David Gibson ]
  * [7cdd761] Revert "spapr: Ensure CPU cores are added contiguously and removed in LIFO order"
    This reverts commit 5cbc64de25973e9129c5a7897734a06ac64b9aff.
    Now that we have stable cpu_index values for pseries-2.7 (and future)
    machine types, we can now safely allow hotplug and unplug in any order.
    Conflicts:
    	hw/ppc/spapr_cpu_core.c
    Some conflicts on revert due to some small changes in the inserted
    code since the original commit.
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ lvivier@redhat.com ]
  * [aaf89c8] test: port postcopy test to ppc64.
    As userfaultfd syscall is available on powerpc, migration
    postcopy can be used.
    This patch adds the support needed to test this on powerpc,
    instead of using a bootsector to run code to modify memory,
    we use a FORTH script in "boot-command" property.
    As spapr machine doesn't support "-prom-env" argument
    (the nvram is initialized by SLOF and not by QEMU),
    "boot-command" is provided to SLOF via a file mapped nvram
    (with "-drive file=...,if=pflash")
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Benjamin Herrenschmidt ]
  * [bcd510b] ppc: Fix fault PC reporting for lve*/stve* VMX instructions.
    We forgot to do gen_update_nip() for these like we do with other
    helpers. Fix this, but in a more efficient way by passing the RA
    to the accessors instead so the overhead is only taken on faults.
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Bharata B Rao ]
  * [62be8b0] spapr: Prevent boot CPU core removal.
    Boot CPU is assumed to be always present in QEMU code. So
    until that assumptions are gone, deny removal request.
    In another words, QEMU won't support boot CPU core hot-unplug.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    [dwg: Tweaked error message for clarity]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Marc-André Lureau ]
  * [499c557] vhost: do not update last avail idx on get_vring_base() failure.
    The state.num value will probably be 0 in this case, but that
    doesn't make sense to update.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Cao jin ]
  * [f077f88] mptsas: Fix a migration compatible issue.
    My previous commit 2e2aa316 removed internal flag msi_in_use, which
    exists in vmstate, use VMSTATE_UNUSED for migration compatibility.
    Reported-by: Amit Shah <amit.shah@redhat.com>
    Suggested-by: Amit Shah <amit.shah@redhat.com>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Marcel Apfelbaum <marcel@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Amit Shah <amit.shah@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Amit Shah <amit.shah@redhat.com>

  [ Laurent Vivier ]
  * [059ce0f] tests: add drive_del-test to ppc/ppc64.
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Paolo Bonzini ]
  * [036999e] optionrom: fix detection of -Wa,-32.
    The cc-option macro runs $(CC) in -S mode (generate assembly) to avoid a
    pointless run of the assembler.  However, this does not work when you want
    to detect support for cc->as option passthrough.  clang ignores -Wa unless
    -c is provided, and exits successfully even if the -Wa,-32 option is not
    supported.
    Reported-by: Stefan Hajnoczi <stefanha@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1469043409-14033-1-git-send-email-pbonzini@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Sean Bruno ]
  * [cf4b61d] Unbreak FreeBSD build after optionrom update.
    Update the build flags appropriately for FreeBSD and add the
    correct LD_EMULATION type for the FreeBSD build case.
    Fixes FreeBSD build error:
    	ld: unrecognised emulation mode: elf_i386
    	Supported emulations: elf_x86_64_fbsd elf_i386_fbsd
    	gmake[1]: *** [Makefile:51: linuxboot_dma.img] Error 1
    	gmake: *** [Makefile:229: romsubdir-optionrom] Error 2
    Signed-off-by: Sean Bruno <sbruno@freebsd.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Aaron Lindsay ]
  * [71fcd8e] avx2 configure: Disable if static build.
    This avoids a segfault like the following for at least some 4.8 versions
    of gcc when configured with --static if avx2 instructions are also
    enabled:
    	Program received signal SIGSEGV, Segmentation fault.
    	buffer_find_nonzero_offset_ifunc () at ./util/cutils.c:333
    	333     {
    	(gdb) bt
    	#0  buffer_find_nonzero_offset_ifunc () at ./util/cutils.c:333
    	#1  0x0000000000939c58 in __libc_start_main ()
    	#2  0x0000000000419337 in _start ()
    Signed-off-by: Aaron Lindsay <alindsay@codeaurora.org>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [69d4900] Update version for v2.7.0-rc1 release.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Sean Bruno ]
  * [ded554c] Fix bsd-user build errors after 8642c1b81e0418df066a7960a7426d85a923a253.
      LINK  sparc-bsd-user/qemu-sparc
    bsd-user/main.o: In function `cpu_loop':
    /home/sbruno/bsd/qemu/bsd-user/main.c:515: undefined reference to `cpu_sparc_exec'
    c++: error: linker command failed with exit code 1 (use -v to see invocation)
    gmake[1]: *** [Makefile:197: qemu-sparc] Error 1
    gmake: *** [Makefile:204: subdir-sparc-bsd-user] Error 2
      LINK  i386-bsd-user/qemu-i386
    bsd-user/main.o: In function `cpu_loop':
    /home/sbruno/bsd/qemu/bsd-user/main.c:174: undefined reference to `cpu_x86_exec'
    c++: error: linker command failed with exit code 1 (use -v to see invocation)
    gmake[1]: *** [Makefile:197: qemu-i386] Error 1
    gmake: *** [Makefile:204: subdir-i386-bsd-user] Error 2
    Signed-off-by:  Sean Bruno <sbruno@freebsd.org>
    Message-id: 20160729160235.64525-1-sbruno@freebsd.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Alistair Francis ]
  * [cc0100f] MAINTAINERS: Update the Xilinx maintainers.
    Update the Xilinx maintainers documentation to simplify what we maintain
    and cover all of our upstream code.
    Signed-off-by: Alistair Francis <alistair.francis@xilinx.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Paolo Bonzini ]
  * [34506b3] util/qht: Document memory ordering assumptions.
    It is naturally expected that some memory ordering should be provided
    around qht_insert() and qht_lookup(). Document these assumptions in the
    header file and put some comments in the source to denote how that
    memory ordering requirements are fulfilled.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [Sergey Fedorov: commit title and message provided;
    comment on qht_remove() elided]
    Signed-off-by: Sergey Fedorov <serge.fdrv@gmail.com>
    Message-Id: <20160715175852.30749-2-sergey.fedorov@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Greg Kurz ]
  * [0b21757] numa: set the memory backend "is_mapped" field.
    Commit 2aece63 "hostmem: detect host backend memory is being used properly"
    added a way to know if a memory backend is busy or available for use. It
    caused a slight regression if we pass the same backend to a NUMA node and
    to a pc-dimm device:
    -m 1G,slots=2,maxmem=2G \
    -object memory-backend-ram,size=1G,id=mem-mem1 \
    -device pc-dimm,id=dimm-mem1,memdev=mem-mem1 \
    -numa node,nodeid=0,memdev=mem-mem1
    Before commit 2aece63, this would cause QEMU to print an error message and
    to exit gracefully:
    qemu-system-ppc64: -device pc-dimm,id=dimm-mem1,memdev=mem-mem1:
        can't use already busy memdev: mem-mem1
    Since commit 2aece63, QEMU hits an assertion in the memory code:
    qemu-system-ppc64: memory.c:1934: memory_region_add_subregion_common:
        Assertion `!subregion->container' failed.
    Aborted
    This happens because pc-dimm devices don't use memory_region_is_mapped()
    anymore and cannot guess the backend is already used by a NUMA node.
    Let's revert to the previous behavior by turning the NUMA code to also
    call host_memory_backend_set_mapped() when it uses a backend.
    Fixes: 2aece63c8a9d2c3a8ff41d2febc4cdeff2633331
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Message-Id: <146891691503.15642.9817215371777203794.stgit@bahia.lan>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Igor Mammedov ]
  * [056b68a] fix qemu exit on memory hotplug when allocation fails at prealloc time.
    When adding hostmem backend at runtime, QEMU might exit with error:
      "os_mem_prealloc: Insufficient free host memory pages available to allocate guest RAM"
    It happens due to os_mem_prealloc() not handling errors gracefully.
    Fix it by passing errp argument so that os_mem_prealloc() could
    report error to callers and undo performed allocation when
    os_mem_prealloc() fails.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Message-Id: <1469008443-72059-1-git-send-email-imammedo@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [3f822cf] checkpatch: add check for bzero.
    Tested-By: Peter Xu <peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Cao jin ]
  * [00432b6] util: drop inet_nonblocking_connect()
    It is never used; all nonblocking connect now goes through
    socket_connect(), which calls inet_connect_addr().
    Cc: Daniel P. Berrange <berrange@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-Id: <1469097213-26441-2-git-send-email-caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [f8ea7a8] util: drop unix_nonblocking_connect()
    It is never used; all nonblocking connect now goes through
    socket_connect(), which calls unix_connect_addr().
    Cc: Daniel P. Berrange <berrange@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-Id: <1469097213-26441-3-git-send-email-caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [767db02] util: Drop inet_listen()
    Since commit e65c67e4, inet_listen() is not used anymore, and all
    inet listen operation goes through QIOChannel.
    Cc: Daniel P. Berrange <berrange@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Eric Blake <eblake@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-Id: <1469451771-1173-3-git-send-email-caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Emilio G. Cota ]
  * [7266ae9] qht: do not segfault when gathering stats from an uninitialized qht.
    So far, QHT functions assume that the passed qht has previously been
    initialized--otherwise they segfault.
    This patch makes an exception for qht_statistics_init, with the goal
    of simplifying calling code. For instance, qht_statistics_init is
    called from the 'info jit' dump, and given that under KVM the TB qht
    is never initialized, we get a segfault. Thus, instead of complicating
    the 'info jit' code with additional checks, let's allow passing an
    uninitialized qht to qht_statistics_init.
    While at it, add a test for this to test-qht.
    Before the patch (for $ qemu -enable-kvm [...]):
    (qemu) info jit
    [...]
    direct jump count   0 (0%) (2 jumps=0 0%)
    Program received signal SIGSEGV, Segmentation fault.
    After the patch the "TB hash buckets", "TB hash occupancy"
    and "TB hash avg chain" lines are omitted.
    (qemu) info jit
    [...]
    direct jump count   0 (0%) (2 jumps=0 0%)
    TB hash buckets     0/0 (-nan% head buckets used)
    TB hash occupancy   nan% avg chain occ. Histogram: (null)
    TB hash avg chain   nan buckets. Histogram: (null)
    [...]
    Reported by: Changlong Xie <xiecl.fnst@cn.fujitsu.com>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1469205390-14369-1-git-send-email-cota@braap.org>
    [Extract printing statistics to an entirely separate function. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Dave Hansen ]
  * [ba03584] target-i386: fix typo in xsetbv implementation.
    QEMU 2.6 added support for the XSAVE family of instructions, which
    includes the XSETBV instruction which allows setting the XCR0
    register.
    But, when booting Linux kernels with XSAVE support enabled, I was
    getting very early crashes where the instruction pointer was set
    to 0x3.  I tracked it down to a jump instruction generated by this:
            gen_jmp_im(s->pc - pc_start);
    where s->pc is pointing to the instruction after XSETBV and pc_start
    is pointing _at_ XSETBV.  Subtract the two and you get 0x3.  Whoops.
    The fix is to replace this typo with the pattern found everywhere
    else in the file when folks want to end the translation buffer.
    Richard Henderson confirmed that this is a bug and that this is the
    correct fix.
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: qemu-stable@nongnu.org
    Cc: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Richard Henderson <rth@twiddle.net>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Emilio G. Cota ]
  * [f9dbc19] qdist: fix memory leak during binning.
    In qdist_bin__internal(), to->entries is initialized to a 1-element array,
    which we then leak when n == from->n. Fix it.
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1469459025-23606-2-git-send-email-cota@braap.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Eduardo Habkost ]
  * [4fc264f] MAINTAINERS: Add Host Memory Backends section.
    The hostmem code is closely related to the NUMA code, so I am
    willing to handle patches to those files and share the work with
    Igor (the original author of that code).
    Acked-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Stefan Weil ]
  * [3bf2b3a] wxx: Fix compiler warning for host-libusb.c.
    The local variable i is unsed for Windows.
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Message-id: 1469775569-7869-1-git-send-email-sw@weilnetz.de
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [c16e366] wxx: Fix compilation of host-libusb.c
    libusb.h uses the WINAPI calling convention for all function callbacks.
    Cross compilation with Mingw-w64 on Cygwin fails when this calling
    convention is missing.
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Message-id: 1469775331-7468-1-git-send-email-sw@weilnetz.de
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Evgeny Yakovlev ]
  * [72aa364] ehci: faster frame index calculation for skipped frames
    ehci_update_frindex takes time linearly proportional to a number
    of uframes to calculate new frame index and raise FLR interrupts,
    which is a problem for large amounts of uframes.
    If we experience large delays between echi timer callbacks (i.e. because
    other periodic handlers have taken a lot of time to complete) we
    get a lot of skipped frames which then delay ehci timer callback more
    and this leads to deadlocking the system when ehci schedules next
    callback to be too soon.
    Observable behaviour is qemu consuming 100% host CPU time while guest
    is unresponsive. This misbehavior could happen for a while and QEMU does
    not get out from this state automatically without the patch.
    This change makes ehci_update_frindex execute in constant time.
    Signed-off-by: Evgeny Yakovlev <eyakovlev@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Message-id: 1469638520-32706-1-git-send-email-den@openvz.org
    CC: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Bharata B Rao ]
  * [c8721d3] spapr: Error out when CPU hotplug is attempted on older pseries machines.
    CPU hotplug and coldplug aren't supported prior to pseries-2.7.  Further,
    earlier machine types don't use CPU core objects at all.  These mean that
    query-hotpluggable-cpus and coldplug on older pseries machines will crash
    QEMU.  It also means that hotpluggable_cpus flag in query-machines will
    be incorrectly set to true for pseries < 2.7, since it is based on the
    presence of the query_hotpluggable_cpus hook.
    - Don't assign the query_hotpluggable_cpus hook for pseries < 2.7
    - query_hotpluggable_cpus should therefore never be called on pseries <
      2.7, so add an assert
    - spapr_core_pre_plug() should fail hot/cold plug attempts for pseries <
      2.7, since core objects are never used there
    - spapr_core_plug() should therefore never be called for pseries < 2.7, so
      add an assert.
    Signed-off-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    [dwg: Change from query_hotpluggable_cpus returning NULL for pseries < 2.7
     to not being called at all, reword commit message for accuracy]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Peter Xu ]
  * [7005f7f] kvm-irqchip: only commit route when irqchip is used.
    Reported from Alexey Kardashevskiy:
    3f1fea0fb5bf "kvm-irqchip: do explicit commit when update irq" produces
    a crash on pseries guest running with VFIO on POWER8 machine as it does
    not support KVM_CAP_IRQCHIP (KVM_CAP_IRQ_XICS is there instead). At the
    result, KVMState::irq_routes is NULL when VFIO calls
    kvm_irqchip_commit_routes.
    This makes the routing update conditional.
    Reported-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Juergen Gross ]
  * [c8e36e8] xen: when removing a backend don't remove many of them.
    When a Xenstore watch fires indicating a backend has to be removed
    don't remove all backends for that domain with the specified device
    index, but just the one which has the correct type.
    The easiest way to achieve this is to use the already determined
    xendev as parameter for xen_be_del_xendev() instead of only the domid
    and device index.
    This at once removes the open coded QTAILQ_FOREACH_SAVE() in
    xen_be_del_xendev() as there is no need to search for the correct
    xendev any longer.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Message-id: 1470140044-16492-2-git-send-email-jgross@suse.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [80440ea] xen: drain submit queue in xen-usb before removing device.
    When unplugging a device in the Xen pvusb backend drain the submit
    queue before deallocation of the control structures. Otherwise there
    will be bogus memory accesses when I/O contracts are finished.
    Correlated to this issue is the handling of cancel requests: a packet
    cancelled will still lead to the call of complete, so add a flag
    to the request indicating it should be just dropped on complete.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>
    Message-id: 1470140044-16492-3-git-send-email-jgross@suse.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Daniel P. Berrange ]
  * [bc35d51] io: remove mistaken call to object_ref on QTask.
    The QTask struct is just a standalone struct, not a QOM Object,
    so calling object_ref() on it is not appropriate. This results
    in mangling the 'destroy' field in the QTask struct, causing
    the later call to qtask_free() to try to call the function
    at address 0x1, with predictably segfault happy results.
    There is in fact no need for ref counting with QTask, as the
    call to qtask_abort() or qtask_complete() will automatically
    free associated memory.
    This fixes the crash shown in
      https://bugs.launchpad.net/qemu/+bug/1589923
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>

  [ Juergen Gross ]
  * [0e39bb0] xen: use a common function for pv and hvm guest backend register calls.
    Instead of calling xen_be_register() for each supported backend type
    for hvm and pv guests in their machine init functions use a common
    function in order not to have to add new backends twice.
    This at once fixes the error that hvm domains couldn't use the qusb
    backend.
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>
    Message-id: 1470119552-16170-1-git-send-email-jgross@suse.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Daniel P. Berrange ]
  * [624cdd4] vnc: don't crash getting server info if lsock is NULL.
    When VNC is started with '-vnc none' there will be no
    listener socket present. When we try to populate the
    VncServerInfo we'll crash accessing a NULL 'lsock'
    field.
     #0  qio_channel_socket_get_local_address (ioc=0x0, errp=errp@entry=0x7ffd5b8aa0f0) at io/channel-socket.c:33
     #1  0x00007f4b9a297d6f in vnc_init_basic_info_from_server_addr (errp=0x7ffd5b8aa0f0, info=0x7f4b9d425460, ioc=<optimized out>)  at ui/vnc.c:146
     #2  vnc_server_info_get (vd=0x7f4b9e858000) at ui/vnc.c:223
     #3  0x00007f4b9a29d318 in vnc_qmp_event (vs=0x7f4b9ef82000, vs=0x7f4b9ef82000, event=QAPI_EVENT_VNC_CONNECTED) at ui/vnc.c:279
     #4  vnc_connect (vd=vd@entry=0x7f4b9e858000, sioc=sioc@entry=0x7f4b9e8b3a20, skipauth=skipauth@entry=true, websocket=websocket @entry=false) at ui/vnc.c:2994
     #5  0x00007f4b9a29e8c8 in vnc_display_add_client (id=<optimized out>, csock=<optimized out>, skipauth=<optimized out>) at ui/v nc.c:3825
     #6  0x00007f4b9a18d8a1 in qmp_marshal_add_client (args=<optimized out>, ret=<optimized out>, errp=0x7ffd5b8aa230) at qmp-marsh al.c:123
     #7  0x00007f4b9a0b53f5 in handle_qmp_command (parser=<optimized out>, tokens=<optimized out>) at /usr/src/debug/qemu-2.6.0/mon itor.c:3922
     #8  0x00007f4b9a348580 in json_message_process_token (lexer=0x7f4b9c78dfe8, input=0x7f4b9c7350e0, type=JSON_RCURLY, x=111, y=5 9) at qobject/json-streamer.c:94
     #9  0x00007f4b9a35cfeb in json_lexer_feed_char (lexer=lexer@entry=0x7f4b9c78dfe8, ch=125 '}', flush=flush@entry=false) at qobj ect/json-lexer.c:310
     #10 0x00007f4b9a35d0ae in json_lexer_feed (lexer=0x7f4b9c78dfe8, buffer=<optimized out>, size=<optimized out>) at qobject/json -lexer.c:360
     #11 0x00007f4b9a348679 in json_message_parser_feed (parser=<optimized out>, buffer=<optimized out>, size=<optimized out>) at q object/json-streamer.c:114
     #12 0x00007f4b9a0b3a1b in monitor_qmp_read (opaque=<optimized out>, buf=<optimized out>, size=<optimized out>) at /usr/src/deb ug/qemu-2.6.0/monitor.c:3938
     #13 0x00007f4b9a186751 in tcp_chr_read (chan=<optimized out>, cond=<optimized out>, opaque=0x7f4b9c7add40) at qemu-char.c:2895
     #14 0x00007f4b92b5c79a in g_main_context_dispatch () from /lib64/libglib-2.0.so.0
     #15 0x00007f4b9a2bb0c0 in glib_pollfds_poll () at main-loop.c:213
     #16 os_host_main_loop_wait (timeout=<optimized out>) at main-loop.c:258
     #17 main_loop_wait (nonblocking=<optimized out>) at main-loop.c:506
     #18 0x00007f4b9a0835cf in main_loop () at vl.c:1934
     #19 main (argc=<optimized out>, argv=<optimized out>, envp=<optimized out>) at vl.c:4667
    Do an upfront check for a NULL lsock and report an error to
    the caller, which matches behaviour from before
      commit 04d2529da27db512dcbd5e99d0e26d333f16efcc
      Author: Daniel P. Berrange <berrange@redhat.com>
      Date:   Fri Feb 27 16:20:57 2015 +0000
        ui: convert VNC server to use QIOChannelSocket
    where getsockname() would be given a FD value -1 and thus report
    an error to the caller.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1470134726-15697-2-git-send-email-berrange@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [3e7f136] vnc: fix crash when vnc_server_info_get has an error.
    The vnc_server_info_get will allocate the VncServerInfo
    struct and then call vnc_init_basic_info_from_server_addr
    to populate the basic fields. If this returns an error
    though, the qapi_free_VncServerInfo call will then crash
    because the VncServerInfo struct instance was not properly
    NULL-initialized and thus contains random stack garbage.
     #0  0x00007f1987c8e6f5 in raise () at /lib64/libc.so.6
     #1  0x00007f1987c902fa in abort () at /lib64/libc.so.6
     #2  0x00007f1987ccf600 in __libc_message () at /lib64/libc.so.6
     #3  0x00007f1987cd7d4a in _int_free () at /lib64/libc.so.6
     #4  0x00007f1987cdb2ac in free () at /lib64/libc.so.6
     #5  0x00007f198b654f6e in g_free () at /lib64/libglib-2.0.so.0
     #6  0x0000559193cdcf54 in visit_type_str (v=v@entry=
         0x5591972f14b0, name=name@entry=0x559193de1e29 "host", obj=obj@entry=0x5591961dbfa0, errp=errp@entry=0x7fffd7899d80)
         at qapi/qapi-visit-core.c:255
     #7  0x0000559193cca8f3 in visit_type_VncBasicInfo_members (v=v@entry=
         0x5591972f14b0, obj=obj@entry=0x5591961dbfa0, errp=errp@entry=0x7fffd7899dc0) at qapi-visit.c:12307
     #8  0x0000559193ccb523 in visit_type_VncServerInfo_members (v=v@entry=
         0x5591972f14b0, obj=0x5591961dbfa0, errp=errp@entry=0x7fffd7899e00) at qapi-visit.c:12632
     #9  0x0000559193ccb60b in visit_type_VncServerInfo (v=v@entry=
         0x5591972f14b0, name=name@entry=0x0, obj=obj@entry=0x7fffd7899e48, errp=errp@entry=0x0) at qapi-visit.c:12658
     #10 0x0000559193cb53d8 in qapi_free_VncServerInfo (obj=<optimized out>) at qapi-types.c:3970
     #11 0x0000559193c1e6ba in vnc_server_info_get (vd=0x7f1951498010) at ui/vnc.c:233
     #12 0x0000559193c24275 in vnc_connect (vs=0x559197b2f200, vs=0x559197b2f200, event=QAPI_EVENT_VNC_CONNECTED) at ui/vnc.c:284
     #13 0x0000559193c24275 in vnc_connect (vd=vd@entry=0x7f1951498010, sioc=sioc@entry=0x559196bf9c00, skipauth=skipauth@entry=tru e, websocket=websocket@entry=false) at ui/vnc.c:3039
     #14 0x0000559193c25806 in vnc_display_add_client (id=<optimized out>, csock=<optimized out>, skipauth=<optimized out>)
         at ui/vnc.c:3877
     #15 0x0000559193a90c28 in qmp_marshal_add_client (args=<optimized out>, ret=<optimized out>, errp=0x7fffd7899f90)
         at qmp-marshal.c:105
     #16 0x000055919399c2b7 in handle_qmp_command (parser=<optimized out>, tokens=<optimized out>)
         at /home/berrange/src/virt/qemu/monitor.c:3971
     #17 0x0000559193ce3307 in json_message_process_token (lexer=0x559194ab0838, input=0x559194a6d940, type=JSON_RCURLY, x=111, y=1 2) at qobject/json-streamer.c:105
     #18 0x0000559193cfa90d in json_lexer_feed_char (lexer=lexer@entry=0x559194ab0838, ch=125 '}', flush=flush@entry=false)
         at qobject/json-lexer.c:319
     #19 0x0000559193cfaa1e in json_lexer_feed (lexer=0x559194ab0838, buffer=<optimized out>, size=<optimized out>)
         at qobject/json-lexer.c:369
     #20 0x0000559193ce33c9 in json_message_parser_feed (parser=<optimized out>, buffer=<optimized out>, size=<optimized out>)
         at qobject/json-streamer.c:124
     #21 0x000055919399a85b in monitor_qmp_read (opaque=<optimized out>, buf=<optimized out>, size=<optimized out>)
         at /home/berrange/src/virt/qemu/monitor.c:3987
     #22 0x0000559193a87d00 in tcp_chr_read (chan=<optimized out>, cond=<optimized out>, opaque=0x559194a7d900)
         at qemu-char.c:2895
     #23 0x00007f198b64f703 in g_main_context_dispatch () at /lib64/libglib-2.0.so.0
     #24 0x0000559193c484b3 in main_loop_wait () at main-loop.c:213
     #25 0x0000559193c484b3 in main_loop_wait (timeout=<optimized out>) at main-loop.c:258
     #26 0x0000559193c484b3 in main_loop_wait (nonblocking=<optimized out>) at main-loop.c:506
     #27 0x0000559193964c55 in main () at vl.c:1908
     #28 0x0000559193964c55 in main (argc=<optimized out>, argv=<optimized out>, envp=<optimized out>) at vl.c:4603
    This was introduced in
      commit 98481bfcd661daa3c160cc87a297b0e60a307788
      Author: Eric Blake <eblake@redhat.com>
      Date:   Mon Oct 26 16:34:45 2015 -0600
        vnc: Hoist allocation of VncBasicInfo to callers
    which added error reporting for vnc_init_basic_info_from_server_addr
    but didn't change the g_malloc calls to g_malloc0.
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1470134726-15697-3-git-send-email-berrange@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
  * [12e29b1] vnc: ensure connection sharing/limits is always configured.
    The connection sharing / limits are only set in the
    vnc_display_open() method and so missed when VNC is running
    with '-vnc none'. This in turn prevents clients being added
    to the VNC server with the QMP "add_client" command.
    This was introduced in
      commit e5f34cdd2da54f28d90889a3afd15fad2d6105ff
      Author: Gerd Hoffmann <kraxel@redhat.com>
      Date:   Thu Oct 2 12:09:34 2014 +0200
          vnc: track & limit connections
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1470134726-15697-4-git-send-email-berrange@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

  [ Emilio G. Cota ]
  * [071d405] qdist: use g_renew and g_new instead of g_realloc and g_malloc.
    This is safer against overflow.  g_renew is available in all
    version of glib, while g_realloc_n is only available in 2.24.
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1469459025-23606-3-git-send-email-cota@braap.org>
    [Rewritten to use g_new/g_renew. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [11b7b07] qdist: return "(empty)" instead of NULL when printing an empty dist.
    Printf'ing a NULL string is undefined behaviour. Avoid it.
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Emilio G. Cota <cota@braap.org>
    Message-Id: <1469459025-23606-4-git-send-email-cota@braap.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [0b646f4] mptsas: really fix migration compatibility.
    Commit 2e2aa316 removed internal flag msi_in_use, but it
    existed in vmstate.  Restore it for migration to older QEMU
    versions.
    Reported-by: Amit Shah <amit.shah@redhat.com>
    Suggested-by: Amit Shah <amit.shah@redhat.com>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Marcel Apfelbaum <marcel@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Amit Shah <amit.shah@redhat.com>
    Cc: Cao jin <caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Igor Mammedov ]
  * [71ae65e] i2c: fix migration regression introduced by broadcast support.
    QEMU fails migration with following error:
    qemu-system-x86_64: Missing section footer for i2c_bus
    qemu-system-x86_64: load of migration failed: Invalid argument
    when migrating from:
      qemu-system-x86_64-v2.6.0 -m 256M rhel72.img -M pc-i440fx-2.6
    to
      qemu-system-x86_64-v2.7.0-rc0 -m 256M rhel72.img -M pc-i440fx-2.6
    Regression is added by commit 2293c27f (i2c: implement broadcast write)
    Fix it by dropping 'broadcast' VMState introduced by 2293c27f and
    reuse broadcast 0x00 address as broadcast flag in bus->saved_address.
    Then if there were ongoing broadcast at migration time, set
    bus->saved_address to it and at i2c_slave_post_load() time check
    for it instead of transfering and using 'broadcast' VMState.
    As result of reusing existing saved_address VMState, no compat
    glue will be needed to keep forward/backward compatiblity. which
    makes fix much less intrusive.
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Message-Id: <1469623198-177227-1-git-send-email-imammedo@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Eric Blake ]
  * [5bee0f4] nbd: Fix bad flag detection on server.
    Commit ab7c548e added a check for invalid flags, but used an
    early return on error instead of properly going through the
    cleanup label.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1469129688-22848-2-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [7423f41] nbd: Limit nbdflags to 16 bits.
    Rather than asserting that nbdflags is within range, just give
    it the correct type to begin with :)  nbdflags corresponds to
    the per-export portion of NBD Protocol "transmission flags", which
    is 16 bits in response to NBD_OPT_EXPORT_NAME and NBD_OPT_GO.
    Furthermore, upstream NBD has never passed the global flags to
    the kernel via ioctl(NBD_SET_FLAGS) (the ioctl was first
    introduced in NBD 2.9.22; then a latent bug in NBD 3.1 actually
    tried to OR the global flags with the transmission flags, with
    the disaster that the addition of NBD_FLAG_NO_ZEROES in 3.9
    caused all earlier NBD 3.x clients to treat every export as
    read-only; NBD 3.10 and later intentionally clip things to 16
    bits to pass only transmission flags).  Qemu should follow suit,
    since the current two global flags (NBD_FLAG_FIXED_NEWSTYLE
    and NBD_FLAG_NO_ZEROES) have no impact on the kernel's behavior
    during transmission.
    CC: qemu-stable@nongnu.org
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1469129688-22848-3-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [e9fd416] osdep: Document differences in rounding macros.
    Make it obvious which macros are safe in which situations.
    Useful since QEMU_ALIGN_UP and ROUND_UP both purport to do
    the same thing, but differ on whether the alignment must be
    a power of 2.
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1469129688-22848-4-git-send-email-eblake@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [b8d0a98] block: Cater to iscsi with non-power-of-2 discard.
    Dell Equallogic iSCSI SANs have a very unusual advertised geometry:
    $ iscsi-inq -e 1 -c $((0xb0)) iscsi://XXX/0
    wsnz:0
    maximum compare and write length:1
    optimal transfer length granularity:0
    maximum transfer length:0
    optimal transfer length:0
    maximum prefetch xdread xdwrite transfer length:0
    maximum unmap lba count:30720
    maximum unmap block descriptor count:2
    optimal unmap granularity:30720
    ugavalid:1
    unmap granularity alignment:0
    maximum write same length:30720
    which says that both the maximum and the optimal discard size
    is 15M.  It is not immediately apparent if the device allows
    discard requests not aligned to the optimal size, nor if it
    allows discards at a finer granularity than the optimal size.
    I tried to find details in the SCSI Commands Reference Manual
    Rev. A on what valid values of maximum and optimal sizes are
    permitted, but while that document mentions a "Block Limits
    VPD Page", I couldn't actually find documentation of that page
    or what values it would have, or if a SCSI device has an
    advertisement of its minimal unmap granularity.  So it is not
    obvious to me whether the Dell Equallogic device is compliance
    with the SCSI specification.
    Fortunately, it is easy enough to support non-power-of-2 sizing,
    even if it means we are less efficient than truly possible when
    targetting that device (for example, it means that we refuse to
    unmap anything that is not a multiple of 15M and aligned to a
    15M boundary, even if the device truly does support a smaller
    granularity where unmapping actually works).
    Reported-by: Peter Lieven <pl@kamp.de>
    Signed-off-by: Eric Blake <eblake@redhat.com>
    Message-Id: <1469129688-22848-5-git-send-email-eblake@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Markus Armbruster ]
  * [e061fa3] fw_cfg: Make base type "fw_cfg" abstract.
    Missed when commit 5712db6 split off "fw_cfg_io" and "fw_cfg_mem".
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1469777353-9383-1-git-send-email-armbru@redhat.com>
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Igor Mammedov ]
  * [7298d4f] apic: fix broken migration for kvm-apic
    commit f6e98444 (apic: Use apic_id as apic's migration instance_id)
    breaks migration when in kernel irqchip is used for 2.6 and older
    machine types.
    It applies compat property only for userspace 'apic' type
    instead of applying it to all apic types inherited from
    'apic-common' type as it was supposed to do.
    Fix it by setting compat property 'legacy-instance-id' for
    'apic-common' type which affects inherited types (i.e. not
    only 'apic' but also 'kvm-apic' types)
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Message-Id: <1469800542-11402-1-git-send-email-imammedo@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Xu ]
  * [f99b86b] x86: ioapic: ignore level irq during processing.
    For level triggered interrupts, we will get Remote IRR bit cleared after
    guest kernel finished processing specific request. Before that, we
    should ignore the same interrupt from triggering again.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <1469974685-4144-1-git-send-email-peterx@redhat.com>
    [Push new "if" up so that it covers KVM split irqchip as well. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [20fd4b7] x86: ioapic: add support for explicit EOI.
    Some old Linux kernels (upstream before v4.0), or any released RHEL
    kernels has problem in sending APIC EOI when IR is enabled. Meanwhile,
    many of them only support explicit EOI for IOAPIC, which is only
    introduced in IOAPIC version 0x20. This patch provide a way to boost
    QEMU IOAPIC to version 0x20, in order for QEMU to correctly receive EOI
    messages.
    Without boosting IOAPIC version to 0x20, kernels before commit d32932d
    ("x86/irq: Convert IOAPIC to use hierarchical irqdomain interfaces")
    will have trouble enabling both IR and level-triggered interrupt devices
    (like e1000).
    To upgrade IOAPIC to version 0x20, we need to specify:
      -global ioapic.version=0x20
    To be compatible with old systems, 0x11 will still be the default IOAPIC
    version. Here 0x11 and 0x20 are the only versions to be supported.
    One thing to mention: this patch only applies to emulated IOAPIC. It
    does not affect kernel IOAPIC behavior.
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <1470059959-372-1-git-send-email-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Robert Ho ]
  * [f04ec5a] Reorganize help output of '-display' option.
    The '-display' help information is not very correct. This patch sort
    it a little.
    Also, in its help information, reveals what implicit display option
    will be chosen if no definition.
    Signed-off-by: Robert Ho <robert.hu@intel.com>
    Message-Id: <1469528231-26206-1-git-send-email-robert.hu@intel.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Fam Zheng ]
  * [0d4104e] qdev: Fix use after free in qdev_init_nofail error path.
    Since 69382d8b (qdev: Fix object reference leak in case device.realize()
    fails), object_property_set_bool could release the object. The error
    path wants the type name, so hold an reference before realizing it.
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1470109301-12966-1-git-send-email-famz@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Shmulik Ladkani ]
  * [e911765] util: Fix assertion in iov_copy() upon zero 'bytes' and non-zero 'offset'
    In cases where iov_copy() is passed with zero 'bytes' argument and a
    non-zero 'offset' argument, nothing gets copied - as expected.
    However no copy iterations are performed, so 'offset' is left
    unaltered, leading to the final assert(offset == 0) to fail.
    Instead, change the loop condition to continue as long as 'offset || bytes',
    similar to other iov_* functions.
    This ensures 'offset' gets zeroed (even if no actual copy is made),
    unless it is beyond end of source iov - which is asserted.
    Signed-off-by: Shmulik Ladkani <shmulik.ladkani@ravellosystems.com>
    Message-Id: <1470130880-1050-1-git-send-email-shmulik.ladkani@oracle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Peter Maydell ]
  * [d9fe91d] linux-user: Use correct alignment for long long on i386 guests.
    For i386, the ABI specifies that 'long long' (8 byte values)
    need only be 4 aligned, but we were requiring them to be
    8-aligned. This meant we were laying out the target_epoll_event
    structure wrongly. Add a suitable ifdef to abitypes.h to
    specify the i386-specific alignment requirement.
    Reported-by: Icenowy Zheng <icenowy@aosc.xyz>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [ba4b3f6] linux-user: Fix memchr() argument in open_self_cmdline()
    In open_self_cmdline() we look for a 0 in the buffer we read
    from /prc/self/cmdline. We were incorrectly passing the length
    of our buf[] array to memchr() as the length to search, rather
    than the number of bytes we actually read into it, which could
    be shorter. This was spotted by Coverity (because it could
    result in our trying to pass a negative length argument to
    write()).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [332c978] linux-user: Don't write off end of new_utsname buffer.
    Use g_strlcpy() rather than strcpy() to copy the uname string
    into the structure we return to the guest for the uname syscall.
    This avoids overrunning the buffer if the user passed us an
    overlong string via the QEMU command line.
    We fix a comment typo while we're in the neighbourhood.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [005eb2a] linux-user: Fix target_semid_ds structure definition.
    The target_semid_ds structure is not correct for all
    architectures: the padding fields should only exist for:
     * 32-bit ABIs
     * x86
    It is also misnamed, since it is following the kernel
    semid64_ds structure (QEMU doesn't support the legacy
    semid_ds structure at all). Rename the struct, provide
    a correct generic definition and allow the oddball x86
    architecture to provide its own version.
    This fixes broken SYSV semaphores for all our 64-bit
    architectures except x86 and ppc.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>
  * [ef4330c] linux-user: Handle brk() attempts with very large sizes.
    In do_brk(), we were inadvertently truncating the size
    of a requested brk() from the guest by putting it into an
    'int' variable. This meant that we would incorrectly report
    success back to the guest rather than a failed allocation,
    typically resulting in the guest then segfaulting. Use
    abi_ulong instead.
    This fixes a crash in the '31370.cc' test in the gcc libstdc++ test
    suite (the test case starts by trying to allocate a very large
    size and reduces the size until the allocation succeeds).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Riku Voipio <riku.voipio@linaro.org>

  [ Bruce Rogers ]
  * [0968c91] Xen PCI passthrough: fix passthrough failure when no interrupt pin.
    Commit 5a11d0f7 mistakenly converted a log message into an error
    condition when no pin interrupt is found for the pci device being
    passed through. Revert that part of the commit.
    Signed-off-by: Bruce Rogers <brogers@suse.com>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>

  [ Fam Zheng ]
  * [95d203c] docker: Be compatible with older docker.
    By not using "--format" with docker images command.
    The option is not available on RHEL 7 docker command. Use an awk
    matching command instead.
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-Id: <1470202928-3392-1-git-send-email-famz@redhat.com>
  * [4a93f78] docker: Add "--enable-werror" to configure command line.
    We don't have .git in the docker checkout, add this to enable -Werror
    explicitly.
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Message-id: 1469453510-658-1-git-send-email-famz@redhat.com

  [ Kevin Wolf ]
  * [39d990a] block: Accept any target node for transactional blockdev-backup.
    Commit 0d978913 changed blockdev-backup to accept arbitrary node names
    instead of device names (i.e. root nodes) for the backup target.
    However, it forgot to make the same change in transactions and to update
    the documentation. This patch fixes these omissions.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Christoph Hellwig ]
  * [03035a2] nvme: fix identify to be NVMe 1.1 compliant.
    NVMe 1.1 requires devices to implement a Namespace List subcommand of
    the identify command.  Qemu not only not implements this features, but
    also misinterprets it as an Identify Controller request.  Due to this
    any OS trying to use the Namespace List will fail the probe.
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Keith Busch <keith.busch@intel.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [47989f1] nvme: bump PCI revision.
    The broken Identify implementation in earlier Qemu versions means we
    need to blacklist it from issueing the NVMe 1.1 Identify Namespace List
    command.  As we want to be able to use it in newer Qemu versions we need
    a way to identify those.  Bump the PCI revision as a guest visible
    indicator of this bug fix.
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Keith Busch <keith.busch@intel.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Klim Kireev ]
  * [555a608] block/parallels: check new image size.
    Before this patch incorrect image could be created via qemu-img
    (Example: qemu-img create -f parallels -o size=4096T hack.img),
    incorrect images cannot be used due to overflow in main image structure.
    This patch add check of size in image creation.
    After reading size it compare it with UINT32_MAX * cluster_size.
    Signed-off-by: Klim Kireev <proffk@virtuozzo.mipt.ru>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Message-id: 1469639300-12155-1-git-send-email-den@openvz.org
    CC: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Alberto Garcia ]
  * [aaa1e77] throttle: Don't allow burst limits to be lower than the normal limits.
    Setting FOO_max to a value that is lower than FOO does not make
    sense, and it produces odd results depending on the value of
    FOO_max_length. Although the user should not set that configuration
    in the first place it's better to reject it explicitly.
    https://bugzilla.redhat.com/show_bug.cgi?id=1355665
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reported-by: Gu Nini <ngu@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 663d5aca406060e31f80d8113f77b6feee63b919.1469693110.git.berto@igalia.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [5fc8c05] throttle: Test burst limits lower than the normal limits.
    This checks that making FOO_max lower than FOO is not allowed.
    We could also forbid having FOO_max == FOO, but that doesn't have
    any odd side effects and it would require us to update several other
    tests, so let's keep it simple.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 2f90f9ee58aa14b7bd985f67c5996b06e0ab6c19.1469693110.git.berto@igalia.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Fam Zheng ]
  * [26307f6] virtio-blk: Release s->rq queue at system_reset.
    At system_reset, there is no point in retrying the queued request,
    because the driver that issued the request won't be around any more.
    Analyzed-by: Laszlo Ersek <lersek@redhat.com>
    Reported-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Message-id: 1470278654-13525-2-git-send-email-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
  * [27d1b87] virtio-blk: Remove stale comment about draining.
    This is stale after commit 6e40b3bf (virtio-blk: Use blk_drain() to
    drain IO requests), remove it.
    Suggested-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Message-id: 1470278654-13525-3-git-send-email-famz@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Stefan Weil ]
  * [c025f68] wxx: Fix handling of files used for character devices.
    On Windows, such files were not truncated like on all other hosts.
    Now we also test whether truncation is needed when running on Windows.
    The append case was also incorrect because it needs a different value
    for the desired access mode.
    Reported-by: Benjamin David Lunt <fys@fysnet.net>
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-id: 1470114877-1466-1-git-send-email-sw@weilnetz.de
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [5100917] tests: Rename qtests which have names ending "error"
    We have three qtest tests which have test names ending with "error".
    This is awkward because the output of verbose test runs looks like
      /crypto/task/error:                                                  OK
      /crypto/task/thread_error:                                           OK
    which gives false positives if you are grepping build logs for
    errors by looking for "error:". Since there are only three tests
    with this problem, just rename them all to 'failure' instead.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1470307178-22848-1-git-send-email-peter.maydell@linaro.org

  [ Richard Henderson ]
  * [a1b3c48] tcg: Compress liveness data to 16 bits.
    This reduces both memory usage and per-insn cacheline usage
    during code generation.
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [dcb8e75] tcg: Reorg TCGOp chaining.
    Instead of using -1 as end of chain, use 0, and link through the 0
    entry as a fully circular double-linked list.
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [bee158c] tcg: Fold life data into TCGOp.
    Reduce the size of other bitfields to make room.
    This reduces the cache footprint of compilation.
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [c70fbf0] tcg: Compress dead_temps and mem_temps into a single array.
    We only need two bits per temporary.  Fold the two bytes into one,
    and reduce the memory and cachelines required during compilation.
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [bdfb460] tcg: Include liveness info in the dumps.
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [c0ef05b] tcg: Require liveness analysis.
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>
  * [5a18407] tcg: Lower indirect registers in a separate pass.
    Rather than rely on recursion during the middle of register allocation,
    lower indirect registers to loads and stores off the indirect base into
    plain temps.
    For an x86_64 host, with sufficient registers, this results in identical
    code, modulo the actual register assignments.
    For an i686 host, with insufficient registers, this means that temps can
    be (temporarily) spilled to the stack in order to satisfy an allocation.
    This as opposed to the possibility of not being able to spill, to allocate
    a register for the indirect base, in order to perform a spill.
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Richard Henderson <rth@twiddle.net>

  [ Marc-André Lureau ]
  * [157e94e] numa: do not leak NumaOptions.
    In all cases, call qapi_free_NumaOptions(), by using a common ending
    block.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [5b49845] char: free the tcp connection data when closing.
    Make sure the connection data got freed when closing the chardev, to
    avoid leaks. Introduce tcp_chr_free_connection() to clean all connection
    related data, and move some tcp_chr_close() clean-ups there.
    (while at it, set write_msgfds_num to 0 when clearing array in
    tcp_set_msgfds())
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
  * [1371a36] char: free MuxDriver when closing.
    Similarly to other chr_close callbacks, free char type specific data.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [9d324b0] ahci: free irqs array.
    Each irq is referenced by the IDEBus in ide_init2(), thus we can free
    the no longer used array.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>
    Acked-by: John Snow <jsnow@redhat.com>
  * [df37dd6] qjson: free str.
    Release the qstring allocated in qjson_new().
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [0137a55] virtio-input: free config list.
    Clear the list when finalizing. The list is created during realize with
    virtio_input_idstr_config() and later by further calls to
    virtio_input_init_config() and virtio_input_add_config().
    This leak can be reproduced with device-introspect-test -p
    /x86_64/device/introspect/concrete.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
  * [ec507f1] usb: free USBDevice.strings.
    The list is created during instance init and further populated with
    usb_desc_set_string(). Clear it when unrealizing the device.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
  * [9ef6172] usb: free leaking path
    qdev_get_dev_path() returns an allocated string, free it when no longer
    needed.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
  * [5839df7] ahci: fix sglist leak on retry
    ahci-test /x86_64/ahci/io/dma/lba28/retry triggers the following leak:
    Direct leak of 16 byte(s) in 1 object(s) allocated from:
        #0 0x7fc4b2a25e20 in malloc (/lib64/libasan.so.3+0xc6e20)
        #1 0x7fc4993bce58 in g_malloc (/lib64/libglib-2.0.so.0+0x4ee58)
        #2 0x556a187d4b34 in ahci_populate_sglist hw/ide/ahci.c:896
        #3 0x556a187d8237 in ahci_dma_prepare_buf hw/ide/ahci.c:1367
        #4 0x556a187b5a1a in ide_dma_cb hw/ide/core.c:844
        #5 0x556a187d7eec in ahci_start_dma hw/ide/ahci.c:1333
        #6 0x556a187b650b in ide_start_dma hw/ide/core.c:921
        #7 0x556a187b61e6 in ide_sector_start_dma hw/ide/core.c:911
        #8 0x556a187b9e26 in cmd_write_dma hw/ide/core.c:1486
        #9 0x556a187bd519 in ide_exec_cmd hw/ide/core.c:2027
        #10 0x556a187d71c5 in handle_reg_h2d_fis hw/ide/ahci.c:1204
        #11 0x556a187d7681 in handle_cmd hw/ide/ahci.c:1254
        #12 0x556a187d168a in check_cmd hw/ide/ahci.c:510
        #13 0x556a187d0afc in ahci_port_write hw/ide/ahci.c:314
        #14 0x556a187d105d in ahci_mem_write hw/ide/ahci.c:435
        #15 0x556a1831d959 in memory_region_write_accessor /home/elmarco/src/qemu/memory.c:525
        #16 0x556a1831dc35 in access_with_adjusted_size /home/elmarco/src/qemu/memory.c:591
        #17 0x556a18323ce3 in memory_region_dispatch_write /home/elmarco/src/qemu/memory.c:1262
        #18 0x556a1828cf67 in address_space_write_continue /home/elmarco/src/qemu/exec.c:2578
        #19 0x556a1828d20b in address_space_write /home/elmarco/src/qemu/exec.c:2635
        #20 0x556a1828d92b in address_space_rw /home/elmarco/src/qemu/exec.c:2737
        #21 0x556a1828daf7 in cpu_physical_memory_rw /home/elmarco/src/qemu/exec.c:2746
        #22 0x556a183068d3 in cpu_physical_memory_write /home/elmarco/src/qemu/include/exec/cpu-common.h:72
        #23 0x556a18308194 in qtest_process_command /home/elmarco/src/qemu/qtest.c:382
        #24 0x556a18309999 in qtest_process_inbuf /home/elmarco/src/qemu/qtest.c:573
        #25 0x556a18309a4a in qtest_read /home/elmarco/src/qemu/qtest.c:585
        #26 0x556a18598b85 in qemu_chr_be_write_impl /home/elmarco/src/qemu/qemu-char.c:387
        #27 0x556a18598c52 in qemu_chr_be_write /home/elmarco/src/qemu/qemu-char.c:399
        #28 0x556a185a2afa in tcp_chr_read /home/elmarco/src/qemu/qemu-char.c:2902
        #29 0x556a18cbaf52 in qio_channel_fd_source_dispatch io/channel-watch.c:84
    Follow John Snow recommendation:
      Everywhere else ncq_err is used, it is accompanied by a list cleanup
      except for ncq_cb, which is the case you are fixing here.
      Move the sglist destruction inside of ncq_err and then delete it from
      the other two locations to keep it tidy.
      Call dma_buf_commit in ide_dma_cb after the early return. Though, this
      is also a little wonky because this routine does more than clear the
      list, but it is at the moment the centralized "we're done with the
      sglist" function and none of the other side effects that occur in
      dma_buf_commit will interfere with the reset that occurs from
      ide_restart_bh, I think
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: John Snow <jsnow@redhat.com>

  [ David Gibson ]
  * [3c0c47e] spapr: Correctly set query_hotpluggable_cpus hook based on machine version.
    Prior to c8721d3 "spapr: Error out when CPU hotplug is attempted on older
    pseries machines", attempting to use query-hotpluggable-cpus on pseries-2.6
    and earlier machine types would SEGV.
    That change fixed that, but due to some unexpected interactions in init
    order and a brown-paper-bag worthy failure to test, it accidentally
    disabled query-hotpluggable-cpus for all pseries machine types, including
    the current one which should allow it.
    In fact, query_hotpluggable_cpus needs to be non-NULL when and only when
    the dr_cpu_enabled flag in sPAPRMachineClass is set, which makes
    dr_cpu_enabled itself redundant.
    This patch removes dr_cpu_enabled, instead directly setting
    query_hotpluggable_cpus from the machine class_init functions, and using
    that to determine the availability of CPU hotplug when necessary.
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Mark Cave-Ayland ]
  * [16275ed] macio: set res_count value to 0 after non-block ATAPI DMA transfers
    res_count should be set to the number of outstanding bytes after a DBDMA
    request. Unfortunately this wasn't being set to zero by the non-block
    transfer codepath meaning drivers that checked the descriptor result for
    such requests (e.g reading the CDROM TOC) would assume from a non-zero result
    that the transfer had failed.
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ David Gibson ]
  * [57c0eb1] spapr: Fix undefined behaviour in spapr_tce_reset()
    When a TCE table (sPAPR IOMMU context) is in disabled state (which is true
    by default for the 64-bit window), it has tcet->nb_table == 0 and
    tcet->table == NULL.  However, on system reset, spapr_tce_reset() executes,
    which unconditionally calls
            memset(tcet->table, 0, table_size);
    We get away with this in practice, because it's a zero length memset(),
    but memset() on a NULL pointer is undefined behaviour, so we should not
    call it in this case.
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Markus Armbruster ]
  * [df3c286] error: Strip trailing '\n' from error string arguments (again)
    Commit 9af9e0f, 6daf194d, be62a2eb and 312fd5f got rid of a bunch, but
    they keep coming back.  checkpatch.pl tries to flag them since commit
    5d596c2, but it's not very good at it.  Offenders tracked down with
    Coccinelle script scripts/coccinelle/err-bad-newline.cocci, an updated
    version of the script from commit 312fd5f.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1470224274-31522-2-git-send-email-armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [a47eb01] checkpatch: Fix newline detection in error_setg() & friends.
    Commit 5d596c2's regexp assumes the error message string is the first
    argument.  Correct for error_report(), wrong for all the others.
    Relax the regexp to match newline in anywhere.  This might cause
    additional false positives.
    While there, update the list of error_reporting functions.
    Cc: Jason J. Herne <jjherne@linux.vnet.ibm.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1470224274-31522-3-git-send-email-armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [fea1c09] vfio: Use error_report() instead of error_printf() for errors.
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1470224274-31522-4-git-send-email-armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
  * [7ea7d36] error: Fix error_printf() calls lacking newlines.
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <1470224274-31522-5-git-send-email-armbru@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>

  [ Yi Min Zhao ]
  * [7fc0abf] s390x/pci: fix null pointer bug.
    We should make sure that it's not NULL firstly.
    Signed-off-by: Yi Min Zhao <zyimin@linux.vnet.ibm.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Kevin Wolf ]
  * [bd7c417] block/qdev: Let 'drive' property fall back to node name.
    If a qdev block device is created with an anonymous BlockBackend (i.e.
    a node name rather than a BB name was given for the drive property),
    qdev used to return an empty string when the property was read. This
    patch fixes it to return the node name instead.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>

  [ Alberto Garcia ]
  * [9ef8112] tests: Test blockjob IDs.
    Since 7f0317cfc8da6 we have API to specify the ID of block jobs and we
    also guarantee that they are well-formed and unique.
    This patch adds tests to check some common scenarios.
    Signed-off-by: Alberto Garcia <berto@igalia.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Vladimir Sementsov-Ogievskiy ]
  * [dbaa7b5] mirror: finish earlier on error.
    Stop to produce new async copy requests from mirror_iteration if
    critical error (error action = BLOCK_ERROR_ACTION_REPORT) detected.
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [a752e47] iotests: fix 109.
    109 iotest is broken for raw after 0965a41e998ab820b5
    [mirror: double performance of the bulk stage if the disc is full]
    The problem is with finishing block-job with error: before specified
    patch mirror was not very async and it created one big request at disk
    start, this request finished with error and qemu produced
    BLOCK_JOB_COMPLETED with zero progress.
    After 0965a41, mirror starts several smaller requests in parallel, when
    BLOCK_JOB_COMPLETED emited we have some successful non-zero progress.
    This patch solves the issue by filtering out progress from 109 test
    output.
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Marc-André Lureau ]
  * [2ef4571] monitor: fix crash when leaving qemu with spice audio.
    Since aa5cb7f5e, the chardevs are being cleaned up when leaving
    qemu. However, the monitor has still references to them, which may
    lead to crashes when running atexit() and trying to send monitor
    events:
     #0  0x00007fffdb18f6f5 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54
     #1  0x00007fffdb1912fa in __GI_abort () at abort.c:89
     #2  0x0000555555c263e7 in error_exit (err=22, msg=0x555555d47980 <__func__.13537> "qemu_mutex_lock") at util/qemu-thread-posix.c:39
     #3  0x0000555555c26488 in qemu_mutex_lock (mutex=0x5555567a2420) at util/qemu-thread-posix.c:66
     #4  0x00005555558c52db in qemu_chr_fe_write (s=0x5555567a2420, buf=0x55555740dc40 "{\"timestamp\": {\"seconds\": 1470041716, \"microseconds\": 989699}, \"event\": \"SPICE_DISCONNECTED\", \"data\": {\"server\": {\"port\": \"5900\", \"family\": \"ipv4\", \"host\": \"127.0.0.1\"}, \"client\": {\"port\": \"40272\", \"f"..., len=240) at qemu-char.c:280
     #5  0x0000555555787cad in monitor_flush_locked (mon=0x5555567bd9e0) at /home/elmarco/src/qemu/monitor.c:311
     #6  0x0000555555787e46 in monitor_puts (mon=0x5555567bd9e0, str=0x5555567a44ef "") at /home/elmarco/src/qemu/monitor.c:353
     #7  0x00005555557880fe in monitor_json_emitter (mon=0x5555567bd9e0, data=0x5555567c73a0) at /home/elmarco/src/qemu/monitor.c:401
     #8  0x00005555557882d2 in monitor_qapi_event_emit (event=QAPI_EVENT_SPICE_DISCONNECTED, qdict=0x5555567c73a0) at /home/elmarco/src/qemu/monitor.c:472
     #9  0x000055555578838f in monitor_qapi_event_queue (event=QAPI_EVENT_SPICE_DISCONNECTED, qdict=0x5555567c73a0, errp=0x7fffffffca88) at /home/elmarco/src/qemu/monitor.c:497
     #10 0x0000555555c15541 in qapi_event_send_spice_disconnected (server=0x5555571139d0, client=0x5555570d0db0, errp=0x5555566c0428 <error_abort>) at qapi-event.c:1038
     #11 0x0000555555b11bc6 in channel_event (event=3, info=0x5555570d6c00) at ui/spice-core.c:248
     #12 0x00007fffdcc9983a in adapter_channel_event (event=3, info=0x5555570d6c00) at reds.c:120
     #13 0x00007fffdcc99a25 in reds_handle_channel_event (reds=0x5555567a9d60, event=3, info=0x5555570d6c00) at reds.c:324
     #14 0x00007fffdcc7d4c4 in main_dispatcher_self_handle_channel_event (self=0x5555567b28b0, event=3, info=0x5555570d6c00) at main-dispatcher.c:175
     #15 0x00007fffdcc7d5b1 in main_dispatcher_channel_event (self=0x5555567b28b0, event=3, info=0x5555570d6c00) at main-dispatcher.c:194
     #16 0x00007fffdcca7674 in reds_stream_push_channel_event (s=0x5555570d9910, event=3) at reds-stream.c:354
     #17 0x00007fffdcca749b in reds_stream_free (s=0x5555570d9910) at reds-stream.c:323
     #18 0x00007fffdccb5dad in snd_disconnect_channel (channel=0x5555576a89a0) at sound.c:229
     #19 0x00007fffdccb9e57 in snd_detach_common (worker=0x555557739720) at sound.c:1589
     #20 0x00007fffdccb9f0e in snd_detach_playback (sin=0x5555569fe3f8) at sound.c:1602
     #21 0x00007fffdcca3373 in spice_server_remove_interface (sin=0x5555569fe3f8) at reds.c:3387
     #22 0x00005555558ff6e2 in line_out_fini (hw=0x5555569fe370) at audio/spiceaudio.c:152
     #23 0x00005555558f909e in audio_atexit () at audio/audio.c:1754
     #24 0x00007fffdb1941e8 in __run_exit_handlers (status=0, listp=0x7fffdb5175d8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:82
     #25 0x00007fffdb194235 in __GI_exit (status=<optimized out>) at exit.c:104
     #26 0x00007fffdb17b738 in __libc_start_main (main=0x5555558d7874 <main>, argc=67, argv=0x7fffffffcf48, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffcf38) at ../csu/libc-start.c:323
    Add a monitor_cleanup() functions to remove all the monitors before
    cleaning up the chardev. Note that we are "losing" some events that
    used to be sent during atexit().
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20160801112343.29082-2-marcandre.lureau@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>
  * [a384c20] audio: clean up before monitor clean up.
    Since aa5cb7f5e, the chardevs are being cleaned up when leaving qemu,
    before the atexit() handlers. audio_cleanup() may use the monitor to
    notify of changes. For compatibility reasons, let's clean up audio
    before the monitor so it keeps emitting monitor events.
    The audio_atexit() function is made idempotent (so it can be called
    multiple times), and renamed to audio_cleanup(). Since coreaudio
    backend is using a 'isAtexit' code path, change it to check
    audio_is_cleaning_up() instead, so the path is taken during normal
    exit.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20160801112343.29082-3-marcandre.lureau@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Markus Armbruster <armbru@redhat.com>

  [ Peter Maydell ]
  * [47dc0ec] hw/sparc/leon3: Don't call get_image_size() on a NULL pointer
    get_image_size() doesn't handle being passed a NULL pointer, so
    avoid doing that. Spotted by the clang ub sanitizer (which notices
    the attempt to pass NULL to open()).
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 1470391439-28427-1-git-send-email-peter.maydell@linaro.org
  * [53279c7] Update version for v2.7.0-rc2 release.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Prasad J Pandit ]
  * [ead315e] net: check fragment length during fragmentation.
    Network transport abstraction layer supports packet fragmentation.
    While fragmenting a packet, it checks for more fragments from
    packet length and current fragment length. It is susceptible
    to an infinite loop, if the current fragment length is zero.
    Add check to avoid it.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Reviewed-by: Dmitry Fleytman <dmitry@daynix.com>
    CC: qemu-stable@nongnu.org
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ Li Qiang ]
  * [6c352ca] net: vmxnet3: check for device_active before write.
    Vmxnet3 device emulator does not check if the device is active,
    before using it for write. It leads to a use after free issue,
    if the vmxnet3_io_bar0_write routine is called after the device is
    deactivated. Add check to avoid it.
    Reported-by: Li Qiang <liqiang6-s@360.cn>
    Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
    Acked-by: Dmitry Fleytman <dmitry@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ chaojianhu ]
  * [a0d1cbd] hw/net: Fix a heap overflow in xlnx.xps-ethernetlite.
    The .receive callback of xlnx.xps-ethernetlite doesn't check the length
    of data before calling memcpy. As a result, the NetClientState object in
    heap will be overflowed. All versions of qemu with xlnx.xps-ethernetlite
    will be affected.
    Reported-by: chaojianhu <chaojianhu@hotmail.com>
    Signed-off-by: chaojianhu <chaojianhu@hotmail.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>

  [ John Snow ]
  * [7f951b2] atapi: fix halted DMA reset.
    Followup to 87ac25fd, this time for ATAPI DMA.
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 1470164128-28158-1-git-send-email-jsnow@redhat.com
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>

  [ Paolo Bonzini ]
  * [7f25692] linuxboot_dma: avoid guest ABI breakage on gcc vs. clang compilation.
    Recent GCC compiles linuxboot_dma.c to 921 bytes, while CentOS 6 needs
    1029 and clang needs 1527.  Because the size of the ROM, rounded to the
    next 512 bytes, must match, this causes the API to break between a <1K
    ROM and one that is bigger.
    We want to make the ROM 1.5 KB in size, but it's better to make clang
    produce leaner ROMs, because currently it is worryingly close to the limit.
    To fix this prevent clang's happy inlining (which -Os cannot prevent).
    This only requires adding a noinline attribute.
    Second, the patch makes sure that the ROM has enough padding to prevent
    ABI breakage on different compilers.  The size is now hardcoded in the file
    that is passed to signrom.py, as was the case before commit 6f71b77
    ("scripts/signrom.py: Allow option ROM checksum script to write the size
    header.", 2016-05-23); signrom.py however will still pad the input to
    the requested size.  This ensures that the padding goes beyond the
    next multiple of 512 if necessary, and also avoids the need for
    -fno-toplevel-reorder which clang doesn't support.  signrom.py can then
    error out if the requested size is too small for the actual size of the
    compiled ROM.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Marc-André Lureau ]
  * [a9c8730] build-sys: fix building with make CFLAGS=.. argument.
    When calling make with a CFLAGS=.. argument, the -g/-O filter is not
    applied, which may result with build failure with ASAN for example. It
    could be solved with an 'override' directive on CFLAGS, but that would
    actually prevent setting different CFLAGS manually.
    Instead, filter the CFLAGS argument from the top-level Makefile (so
    you could still call make with a different CFLAGS argument on a
    rom/Makefile manually)
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20160805082421.21994-2-marcandre.lureau@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Paolo Bonzini ]
  * [b0e8f5c] optionrom: add -fno-stack-protector.
    This is required by OpenBSD.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [9d4cd7b] optionrom: fix compilation with mingw docker target.
    Two fixes are needed.  First, mingw does not have -D_FORTIFY_SOURCE,
    hence --enable-debug disables optimization.  This is not acceptable
    for ROMs, which should override CFLAGS to force inclusion of -O2.
    Second, PE stores global constructors and destructors using the
    following linker script snippet:
         ___CTOR_LIST__ = .; __CTOR_LIST__ = . ;
    			LONG (-1);*(.ctors); *(.ctor); *(SORT(.ctors.*));  LONG (0);
         ___DTOR_LIST__ = .; __DTOR_LIST__ = . ;
    			LONG (-1); *(.dtors); *(.dtor); *(SORT(.dtors.*));  LONG (0);
    The LONG directives cause the .img files to be 16 bytes too large;
    the recently added check to signrom.py catches this.  To fix this,
    replace -T and -e options with a linker script.
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [5927ed8] atomic: strip "const" from variables declared with typeof.
    With the latest clang, we have the following warning:
        /home/pranith/devops/code/qemu/include/qemu/seqlock.h:62:21: warning: passing 'typeof (*&sl->sequence) *' (aka 'const unsigned int *') to parameter of type 'unsigned int *' discards qualifiers [-Wincompatible-pointer-types-discards-qualifiers]
            return unlikely(atomic_read(&sl->sequence) != start);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~
        /home/pranith/devops/code/qemu/include/qemu/atomic.h:58:25: note: expanded from macro 'atomic_read'
            __atomic_load(ptr, &_val, __ATOMIC_RELAXED);     \
                               ^~~~~
    Stripping const is a bit tricky due to promotions, but it is doable
    with either C11 _Generic or GCC extensions.  Use the latter.
    Reported-by: Pranith Kumar <bobby.prani@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [pranith: Add conversion for bool type]
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Pranith Kumar ]
  * [435405a] Disable warn about left shifts of negative values.
    It seems like there's no good reason for the compiler to exploit the
    undefinedness of left shifts.  GCC explicitly documents that they do not
    use at all this possibility and, while they also say this is subject
    to change, they have been saying this for 10 years (since the wording
    appeared in the GCC 4.0 manual).
    Disable these warnings by passing in -Wno-shift-negative-value.
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [pranith: forward-port part of patch to 2.7]
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
  * [2368635] clang: Fix warning reg. expansion to 'defined'
    Clang produces the following warning. The warning is detailed here:
    https://reviews.llvm.org/D15866. Fix the warning.
    /home/pranith/devops/code/qemu/hw/display/qxl.c:507:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
        ^
    /home/pranith/devops/code/qemu/include/ui/qemu-spice.h:46:5: note: expanded from macro 'SPICE_NEEDS_SET_MM_TIME'
      (!defined(SPICE_SERVER_VERSION) || (SPICE_SERVER_VERSION < 0xc06))
        ^
    /home/pranith/devops/code/qemu/hw/display/qxl.c:1074:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
        ^
    /home/pranith/devops/code/qemu/include/ui/qemu-spice.h:46:5: note: expanded from macro 'SPICE_NEEDS_SET_MM_TIME'
      (!defined(SPICE_SERVER_VERSION) || (SPICE_SERVER_VERSION < 0xc06))
    Suggested-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Radim Krčmář ]
  * [93bf13c] checkpatch: ignore automatically imported Linux headers.
    Linux uses tabs for indentation and checkpatch always complained about
    automatically imported headers.  update-linux-headers.sh could be modified to
    expand tabs, but there is no real reason to complain about any ugly code in
    Linux headers, so skip all hunk-related checks.
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Gonglei ]
  * [3fdd0ee] timer: set vm_clock disabled default
    (commit 80dcfb8532ae76343109a48f12ba8ca1c505c179)
    Upon migration, the code use a timer based on vm_clock for 1ns
    in the future from post_load to do the event send in case host_connected
    differs between migration source and target.
    However, it's not guaranteed that the apic is ready to inject irqs into
    the guest, and the irq line remained high, resulting in any future interrupts
    going unnoticed by the guest as well.
    That's because 1) the migration coroutine is not blocked when it get EAGAIN
    while reading QEMUFile. 2) The vm_clock is enabled default currently, it doesn't
    rely on the calling of vm_start(), that means vm_clock timers can run before
    VCPUs are running.
    So, let's set the vm_clock disabled default, keep the initial intention of
    design for vm_clock timers.
    Meanwhile, change the test-aio usecase, using QEMU_CLOCK_REALTIME instead of
    QEMU_CLOCK_VIRTUAL as the block code does.
    CC: Paolo Bonzini <pbonzini@redhat.com>
    CC: Dr. David Alan Gilbert <dgilbert@redhat.com>
    CC: qemu-stable@nongnu.org
    Signed-off-by: Gonglei <arei.gonglei@huawei.com>
    Message-Id: <1470728955-90600-1-git-send-email-arei.gonglei@huawei.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Laurent Vivier ]
  * [760d88d] ppc64: fix compressed dump with pseries kernel.
    If we don't provide the page size in target-ppc:cpu_get_dump_info(),
    the default one (TARGET_PAGE_SIZE, 4KB) is used to create
    the compressed dump. It works fine with Macintosh, but not with
    pseries as the kernel default page size is 64KB.
    Without this patch, if we generate a compressed dump in the QEMU monitor:
        (qemu) dump-guest-memory -z qemu.dump
    This dump cannot be read by crash:
        # crash vmlinux qemu.dump
        ...
        WARNING: cannot translate vmemmap kernel virtual addresses:
                 commands requiring page structure contents will fail
        ...
    Page_size is used to determine the dumpfile's block size. The
    block size needs to be at least the page size, but a multiple of page
    size works fine too. For PPC64, linux supports either 4KB or 64KB software
    page size. So we define the page_size to 64KB.
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Cédric Le Goater ]
  * [caebf37] spapr: remove extra type variable.
    The sPAPR CPU core typename is already available in the upper
    block. Let's use it and move the check upward also.
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Thomas Huth ]
  * [caf6316] ppc: Introduce a function to look up CPU alias strings.
    We will need this function to look up the aliases in the
    spapr-cpu-core code, too.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [4babfaf] hw/ppc/spapr: Look up CPU alias names instead of hard-coding the aliases.
    Hard-coding the CPU alias names in the spapr_cores[] array has
    two big disadvantages:
    1) We register a real type with the CPU alias name in
       spapr_cpu_core_register_types() - this prevents us from registering
       a CPU family name in kvm_ppc_register_host_cpu_type() with the same
       name (as we do it for the non-hotpluggable CPU types).
    2) It's quite cumbersome to maintain the aliases here in sync with the
       ppc_cpu_aliases list from target-ppc/cpu-models.c.
    So let's simply add proper alias lookup to the spapr cpu core code,
    too (by checking whether the given model can be used directly, and
    if not by trying to look up the given model as an alias name instead).
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [9c83fc2] ppc/kvm: Do not mess up the generic CPU family registration.
    The code for registering the sPAPR CPU host core type has been
    added inbetween the generic CPU host core type and the generic
    CPU family type. That way the instance_init and the class_init
    information got lost when registering the generic CPU family
    type. Fix it by moving the generic family registration before
    the spapr cpu core registration code.
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
  * [d11b268] ppc/kvm: Register also a generic spapr CPU core family type.
    There is a regression with the "-cpu" parameter introduced by
    the spapr CPU hotplug code: We used to allow to specify a
    "CPU family" name with the "-cpu" parameter when running on KVM so
    that the user does not need to know the gory details of the exact
    CPU version of the host CPU. For example, it was possible to
    use "-cpu POWER8" on a POWER8E host CPU. This behavior does not
    work anymore with the new hot-pluggable spapr-cpu-core types.
    Since libvirt already heavily depends on the old behavior, this
    is quite a severe regression in the QEMU parameter interface.
    Let's fix it by supporting a CPU family type for the spapr-cpu-core
    on KVM, too.
    Buglink: https://bugzilla.redhat.com/show_bug.cgi?id=1363812
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Paolo Bonzini ]
  * [906fb13] checkpatch: tweak the files in which TABs are checked.
    Include Python and shell scripts, and make an exception for Perl
    scripts we imported from Linux or elsewhere.
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [93eb8e3] checkpatch: check for CVS keywords on all sources.
    These should apply to all files, not just C/C++.  Tweak the regular
    expression to check for whole words, to avoid false positives on Perl
    variables starting with "Id".
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [8fbe3d1] CODING_STYLE, checkpatch: update line length rules.
    Line lengths above 80 characters do exist.  They are rare, but
    they happen from time to time.  An ignored rule is worse than an
    exception to the rule, so do the latter.
    Some on the list expressed their preference for a soft limit that
    is slightly lower than 80 characters, to account for extra characters
    in unified diffs (including three-way diffs) and for email quoting.
    However, there was no consensus on this so keep the 80-character
    soft limit and add a hard limit at 90.
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [c2df878] checkpatch: bump most warnings to errors.
    This only leaves a warning-level message for the extra-long lines
    soft limit.  Everything else is bumped up.
    In the future warnings can be added for checks that can have false
    positives.
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
  * [141de88] checkpatch: default to success if only warnings.
    CHK-level checks have been removed from checkpatch or bumped to
    errors, so there is no effect anymore for --strict/--subjective.
    Furthermore, even most WARNs have been bumped to errors, with
    WARN only reserved to things that patchew probably ought not
    to complain about (and that maintainers probably will notice
    anyway during review if they are extreme).
    Default to exiting with success even if there are WARN-level
    failures, and cause --strict to fail for warnings.  Maintainers
    that want to have a strict 80-character limit for their subsystem
    can add it to a commit hook for example.
    The --subjective synonym is removed.
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  [ Ilya Maximets ]
  * [ca10203] vhost: check for vhost_ops before using.
    'vhost_set_vring_enable()' tries to call function using pointer to
    'vhost_ops' which can be already zeroized in 'vhost_dev_cleanup()'
    while vhost disconnection.
    Fix that by checking 'vhost_ops' before using. This fixes QEMU crash
    on calling 'ethtool -L eth0 combined 2' if vhost disconnected.
    Signed-off-by: Ilya Maximets <i.maximets@samsung.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Prerna Saxena ]
  * [ca525ce] vhost-user: Introduce a new protocol feature REPLY_ACK.
    This introduces the VHOST_USER_PROTOCOL_F_REPLY_ACK.
    If negotiated, client applications should send a u64 payload in
    response to any message that contains the "need_reply" bit set
    on the message flags. Setting the payload to "zero" indicates the
    command finished successfully. Likewise, setting it to "non-zero"
    indicates an error.
    Currently implemented only for SET_MEM_TABLE.
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Prerna Saxena <prerna.saxena@nutanix.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  * [28ed5ef] vhost-user: Attempt to fix a race with set_mem_table.
    The set_mem_table command currently does not seek a reply. Hence, there is
    no easy way for a remote application to notify to QEMU when it finished
    setting up memory, or if there were errors doing so.
    As an example:
    (1) Qemu sends a SET_MEM_TABLE to the backend (eg, a vhost-user net
    application). SET_MEM_TABLE does not require a reply according to the spec.
    (2) Qemu commits the memory to the guest.
    (3) Guest issues an I/O operation over a new memory region which was configured on (1).
    (4) The application has not yet remapped the memory, but it sees the I/O request.
    (5) The application cannot satisfy the request because it does not know about those GPAs.
    While a guaranteed fix would require a protocol extension (committed separately),
    a best-effort workaround for existing applications is to send a GET_FEATURES
    message before completing the vhost_user_set_mem_table() call.
    Since GET_FEATURES requires a reply, an application that processes vhost-user
    messages synchronously would probably have completed the SET_MEM_TABLE before replying.
    Signed-off-by: Prerna Saxena <prerna.saxena@nutanix.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

  [ Kevin Wolf ]
  * [44713c9] linux-aio: Handle io_submit() failure gracefully.
    It is generally not expected that io_submit() fails other than with
    -EAGAIN, but corner cases like SELinux refusing I/O when permissions are
    revoked are still possible. In this case, we shouldn't abort, but just
    return an I/O error for the request.
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Message-id: 1470741619-23231-1-git-send-email-kwolf@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Daniel P. Berrange ]
  * [bce6261] virtio-console: set frontend open permanently for console devs.
    The virtio-console.c file handles both serial consoles
    and interactive consoles, since they're backed by the
    same device model.
    Since serial devices are expected to be reliable and
    need to notify the guest when the backend is opened
    or closed, the virtio-console.c file wires up support
    for chardev events. This affects both serial consoles
    and interactive consoles, using a network connection
    based chardev backend such as 'socket', but not when
    using a PTY based backend or plain 'file' backends.
    When the host side is not connected the handle_output()
    method in virtio-serial-bus.c will drop any data sent
    by the guest, before it even reaches the virtio-console.c
    code. This means that if the chardev has a logfile
    configured, the data will never get logged.
    Consider for example, configuring a x86_64 guest with a
    plain UART serial port
      -chardev socket,id=charserial1,host=127.0.0.1,port=9001,server,nowait,logfile=console1.log,logappend=on
      -device isa-serial,chardev=charserial1,id=serial1
    vs a s390 guest which has to use the virtio-console port
      -chardev socket,id=charconsole1,host=127.0.0.1,port=9000,server,nowait,logfile=console2.log,logappend=on
      -device virtconsole,chardev=charconsole1,id=console1
    The isa-serial one gets data written to the log regardless
    of whether a client is connected, while the virtioconsole
    one only gets data written to the log when a client is
    connected.
    There is no need for virtio-serial-bus.c to aggressively
    drop the data for console devices, as the chardev code is
    prefectly capable of discarding the data itself.
    So this patch changes virtconsole devices so that they
    are always marked as having the host side open. This
    ensures that the guest OS will always send any data it
    has (Linux virtio-console hvc driver actually ignores
    the host open state and sends data regardless, but we
    should not rely on that), and also prevents the
    virtio-serial-bus code prematurely discarding data.
    The behaviour of virtserialport devices is *not* changed,
    only virtconsole, because for the former, it is important
    that the guest OSknow exactly when the host side is opened
    / closed so it can do any protocol re-negotiation that may
    be required.
    Fixes bug: https://bugs.launchpad.net/qemu/+bug/1599214
    Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-Id: <1470241360-3574-2-git-send-email-berrange@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Cao jin ]
  * [e110aa9] migration/ram: fix typo.
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-Id: <1469776231-23820-1-git-send-email-caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Evgeny Yakovlev ]
  * [0e8b3cd] migration: mmap error check fix
    mmap man page:
    "On success, mmap() returns a pointer to the mapped area. On error, the
    value MAP_FAILED (that is, (void *) -1) is returned, and errno  is  set
    to indicate the cause of the error."
    The check in postcopy_get_tmp_page is definitely wrong and should be
    fixed.
    Signed-off-by: Evgeny Yakovlev <eyakovlev@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Reviewed-by: Amit Shah <amit.shah@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    CC: Juan Quintela <quintela@redhat.com>
    CC: Amit Shah <amit.shah@redhat.com>
    Message-Id: <1469785705-16670-1-git-send-email-den@openvz.org>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Liang Li ]
  * [787d134] migration: fix live migration failure with compression.
    Because of commit 11808bb0c422, which remove some condition checks
    of 'f->ops->writev_buffer', 'qemu_put_qemu_file' should be enhanced
    to clear the 'f_src->iovcnt', or 'f_src->iovcnt' may exceed the
    MAX_IOV_SIZE which will break live migration. This should be fixed.
    Signed-off-by: Liang Li <liang.z.li@intel.com>
    Reported-by: Jinshi Zhang <jinshi.c.zhang@intel.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <1470702146-24399-1-git-send-email-liang.z.li@intel.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Cao jin ]
  * [474c624] migration/socket: fix typo in file header.
    Code of inet socket & unix socket is merged together.
    Also add some newlines, make code block well separated.
    Cc: Daniel P. Berrange <berrange@redhat.com>
    Cc: Juan Quintela <quintela@redhat.com>
    Cc: Amit Shah <amit.shah@redhat.com>
    Reviewed-by: Daniel P. Berrange <berrange@redhat.com>
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Message-Id: <1469696074-12744-4-git-send-email-caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>

  [ Peter Maydell ]
  * [d915b7b] Update ancient copyright string in -version output.
    Currently the -version command line argument prints a string ending
    with "Copyright (c) 2003-2008 Fabrice Bellard".  This is now some
    eight years out of date; abstract it out of the several places that
    print the string and update it to:
    Copyright (c) 2003-2016 Fabrice Bellard and the QEMU Project developers
    to reflect the work by all the QEMU Project contributors over the
    last decade.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-id: 1470309276-5012-1-git-send-email-peter.maydell@linaro.org

  [ Laurent Vivier ]
  * [e723b87] trace-events: fix first line comment in trace-events.
    Documentation is docs/tracing.txt instead of docs/trace-events.txt.
    find . -name trace-events -exec \
         sed -i "s?See docs/trace-events.txt for syntax documentation.?See docs/tracing.txt for syntax documentation.?" \
         {} \;
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Message-id: 1470669081-17860-1-git-send-email-lvivier@redhat.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

  [ Pranith Kumar ]
  * [6bbbb0a] target-arm: Fix warn about implicit conversion.
    Clang warns about an implicit conversion as follows:
    /mnt/devops/code/qemu/target-arm/neon_helper.c:1075:1: warning: implicit conversion from 'int' to 'int8_t' (aka 'signed char') changes value from 128 to -128 [-Wconstant-conversion]
    NEON_VOP_ENV(qrshl_s8, neon_s8, 4)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /mnt/devops/code/qemu/target-arm/neon_helper.c:116:83: note: expanded from macro 'NEON_VOP_ENV'
    uint32_t HELPER(glue(neon_,name))(CPUARMState *env, uint32_t arg1, uint32_t arg2) \
                                                                                      ^
    /mnt/devops/code/qemu/target-arm/neon_helper.c:106:5: note: expanded from macro '\
    NEON_VOP_BODY'
        NEON_DO##n; \
        ^~~~~~~~~~
    <scratch space>:21:1: note: expanded from here
    NEON_DO4
    ^~~~~~~~
    /mnt/devops/code/qemu/target-arm/neon_helper.c:93:5: note: expanded from macro 'NEON_DO4'
        NEON_FN(vdest.v1, vsrc1.v1, vsrc2.v1); \
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /mnt/devops/code/qemu/target-arm/neon_helper.c:1054:23: note: expanded from macro 'NEON_FN'
                dest = (1 << (sizeof(src1) * 8 - 1)); \
                     ~  ~~^~~~~~~~~~~~~~~~~~~~~~~~~
    Fix it by casting to appropriate type.
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Cao jin ]
  * [c4f68f0] Xen: fix converity warning of xen_pt_config_init()
    emu_regs is a pointer, ARRAY_SIZE doesn't return what we expect.
    Since the remaining message is enough for debugging, so just remove it.
    Also tweaked the message a little.
    Signed-off-by: Cao jin <caoj.fnst@cn.fujitsu.com>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>
    Acked-by: Stefano Stabellini <sstabellini@kernel.org>

  [ Paul Durrant ]
  * [b7665c6] xen: handle inbound migration of VMs without ioreq server pages.
    VMs created on older versions on Xen will not have been provisioned with
    pages to support creation of non-default ioreq servers. In this case
    the ioreq server API is not supported and QEMU's only option is to fall
    back to using the default ioreq server pages as it did prior to
    commit 3996e85c ("Xen: Use the ioreq-server API when available").
    This patch therefore changes the code in xen_common.h to stop considering
    a failure of xc_hvm_create_ioreq_server() as a hard failure but simply
    as an indication that the guest is too old to support the ioreq server
    API. Instead a boolean is set to cause reversion to old behaviour such
    that the default ioreq server is then used.
    Signed-off-by: Paul Durrant <paul.durrant@citrix.com>
    Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>
    Acked-by: Anthony PERARD <anthony.perard@citrix.com>
    Acked-by: Stefano Stabellini <sstabellini@kernel.org>

  [ Greg Kurz ]
  * [e703d2f] ppc: parse cpu features once.
    Considering that features are converted to global properties and
    global properties are automatically applied to every new instance
    of created CPU (at object_new() time), there is no point in
    parsing cpu_model string every time a CPU created. So move
    parsing outside CPU creation loop and do it only once.
    Parsing also should be done before any CPU is created so that
    features would affect the first CPU a well.
    This patch does that for all PowerPC machine types.
    It is based on previous work from Bharata:
    https://lists.nongnu.org/archive/html/qemu-devel/2016-06/msg07564.html
    Signed-off-by: Greg Kurz <groug@kaod.org>
    [clg: only kept the fix for the spapr platform. support for other
          platform will be added in 2.8 ]
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Tested-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

  [ Max Reitz ]
  * [8a6a808] block/ssh: Use QemuOpts for runtime options.
    Using QemuOpts will prevent qemu from crashing if the input options have
    not been validated (which is the case when they are specified on the
    command line or in a json: filename) and some have the wrong type.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [7ccc44f] block/nbd: Use QemuOpts for runtime options.
    Using QemuOpts will prevent qemu from crashing if the input options have
    not been validated (which is the case when they are specified on the
    command line or in a json: filename) and some have the wrong type.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [036990d] block/blkdebug: Store config filename.
    Store the configuration file's filename so it can later be used in
    bdrv_refresh_filename() without having to directly access the options
    QDict which may contain a value of a non-string type.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [03504d0] block/nbd: Store runtime option values.
    Store the runtime option values in the BDRVNBDState so they can later be
    used in nbd_refresh_filename() without having to directly access the
    options QDict which may contain values of non-string types.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
  * [7d3e693] iotests: Test case for wrong runtime option types.
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Jeff Cody <jcody@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>

  [ Michael S. Tsirkin ]
  * [94c9cb3] Revert "vhost-user: Attempt to fix a race with set_mem_table."
    This reverts commit 28ed5ef16384f12500abd3647973ee21b03cbe23.
    I still think it's the right thing to do, but
    tests have been failing sporadically.
    Revert for now, and hope to fix it before the release.
    Cc: Prerna Saxena <prerna.saxena@nutanix.com>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Cc: Marc-André Lureau <mlureau@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Message-id: 1471268075-3425-1-git-send-email-mst@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Pranith Kumar ]
  * [dfd6076] softfloat: Fix warn about implicit conversion from int to int8_t.
    Change the flag type to 'uint8_t' to fix the implicit conversion error.
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Message-id: 20160810185502.32015-1-bobby.prani@gmail.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [e57218b] pc-bios/optionrom: Fix OpenBSD build with better detection of linker emulation.
    The various host OSes are irritatingly variable about the name
    of the linker emulation we need to pass to ld's -m option to
    build the i386 option ROMs. Instead of doing this via a
    CONFIG ifdef, check in configure whether any of the emulation
    names we know about will work and pass the right answer through
    to the makefile. If we can't find one, we fall back to not trying
    to build the option ROMs, in the same way we would for a non-x86
    host platform.
    This is in particular necessary to unbreak the build on OpenBSD,
    since it wants a different answer to FreeBSD and we don't have
    an existing CONFIG_ variable that distinguishes the two.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Sean Bruno <sbruno@freebsd.org>
    Message-id: 1470672688-6754-1-git-send-email-peter.maydell@linaro.org

  [ Christian Borntraeger ]
  * [c86c03c] pc-bios/s390-ccw.img: Fix build.
    Since
    commit a9c87304b76d ("build-sys: fix building with make CFLAGS=.. argument")
    pc-bios/s390-ccw.img build might fail with
    --- snip ---
    main.o: In function `virtio_setup':
    qemu/pc-bios/s390-ccw/main.c:117: undefined reference to `__stack_chk_fail'
    --- snip ---
    Changing the CFLAGS to QEMU_CFLAGS does the trick. We also need to
    add -fno-strict-aliasing as this was filtered out.
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Message-Id: <1471258997-5811-1-git-send-email-borntraeger@de.ibm.com>
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>

  [ Daniel P. Berrange ]
  * [8afc224] virtio-gpu: fix missing log.h include file.
    The virtio-gpu.h file defines a macro VIRTIO_GPU_FILL_CMD
    which includes a call to qemu_log_mask, but does not
    include qemu/log.h. In a default configure, it is lucky
    and gets qemu/log.h indirectly due to the 'log' trace
    backend being enabled. If that trace backend is disabled
    though, eg
     ./configure --enable-trace-backends=nop
    Then the build will fail:
    In file included from /home/berrange/src/virt/qemu/hw/display/virtio-gpu-3d.c:19:0:
    /home/berrange/src/virt/qemu/hw/display/virtio-gpu-3d.c: In function ‘virgl_cmd_create_resource_2d’:
    /home/berrange/src/virt/qemu/include/hw/virtio/virtio-gpu.h:138:13: error: implicit declaration of function ‘qemu_log_mask’ [-Werror=implicit-function-declaration]
                 qemu_log_mask(LOG_GUEST_ERROR,                              \
                 ^
    /home/berrange/src/virt/qemu/hw/display/virtio-gpu-3d.c:34:5: note: in expansion of macro ‘VIRTIO_GPU_FILL_CMD’
         VIRTIO_GPU_FILL_CMD(c2d);
         ^~~~~~~~~~~~~~~~~~~
    /home/berrange/src/virt/qemu/hw/display/virtio-gpu-3d.c:34:5: error: nested extern declaration of ‘qemu_log_mask’ [-Werror=nested-externs]
    In file included from /home/berrange/src/virt/qemu/hw/display/virtio-gpu-3d.c:19:0:
    /home/berrange/src/virt/qemu/include/hw/virtio/virtio-gpu.h:138:27: error: ‘LOG_GUEST_ERROR’ undeclared (first use in this function)
                 qemu_log_mask(LOG_GUEST_ERROR,                              \
    [snip many more errors]
    Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 1470648700-3474-1-git-send-email-berrange@redhat.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Marc-André Lureau ]
  * [1dc8a66] char: fix waiting for TLS and telnet connection.
    Since commit d7a04fd7d5008, tcp_chr_wait_connected() was introduced,
    so vhost-user could wait until a backend started successfully. In
    vhost-user case, the chr socket must be plain unix, and the chr+vhost
    setup happens synchronously during qemu startup.
    However, with TLS and telnet socket, initial socket setup happens
    asynchronously, and s->connected is not set after the socket is
    accepted. In order for tcp_chr_wait_connected() to not keep accepting
    new connections and proceed with the last accepted socket, it can
    check for s->ioc instead.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Daniel P. Berrange <berrange@redhat.com>
    Message-id: 20160816083332.15088-1-marcandre.lureau@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Thomas Huth ]
  * [1f8b56e] slirp: Rename "struct arphdr" to "struct slirp_arphdr"
    struct arphdr is already used by the system headers on OpenBSD
    and thus QEMU does not compile here anymore. Fix it by renaming
    our struct to slirp_arphdr instead.
    Reported-by: Brad Smith
    Reviewed-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-id: 1471249494-17392-1-git-send-email-thuth@redhat.com
    Buglink: https://bugs.launchpad.net/qemu/+bug/1613133
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Eduardo Habkost ]
  * [6487747] target-i386: kvm: Report kvm_pv_unhalt as unsupported w/o kernel_irqchip.
    The kvm_pv_unhalt feature doesn't work if kernel_irqchip is
    disabled, so we need to report it as unsupported.
    Tested-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>

  [ Marc-André Lureau ]
  * [1451a7a] qmp-commands.hx: remove outdated note
    input-send-event is now stable since
    6575ccddf4e7c2484bc14b10d5e89f57506c3953.
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Message-id: 20160811112041.18616-1-marcandre.lureau@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Michal Privoznik ]
  * [9c37146] syscall.c: Fix build with older linux-headers.
    In c5dff280 we tried to make us understand netlink messages more.
    So we've added a code that does some translation. However, the
    code assumed linux-headers to be at least version 4.4 of it
    because most of the symbols there (if not all of them) were added
    in just that release. This, however, breaks build on systems with
    older versions of the package.
    Signed-off-by: Michal Privoznik <mprivozn@redhat.com>
    Message-id: 23806aac6db3baf7e2cdab4c62d6e3468ce6b4dc.1471340849.git.mprivozn@redhat.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Peter Maydell ]
  * [9fea273] linux-user: Fix llseek with high bit of offset_low set.
    The llseek syscall takes two 32-bit arguments, offset_high
    and offset_low, which must be combined to form a single
    64-bit offset. Unfortunately we were combining them with
       (uint64_t)arg2 << 32) | arg3
    and arg3 is a signed type; this meant that when promoting
    arg3 to a 64-bit type it would be sign-extended. The effect
    was that if the offset happened to have bit 31 set then
    this bit would get sign-extended into all of bits 63..32.
    Explicitly cast arg3 to abi_ulong to avoid the erroneous
    sign extension.
    Reported-by: Chanho Park <parkch98@gmail.com>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Tested-by: Chanho Park <parkch98@gmail.com>
    Message-id: 1470938379-1133-1-git-send-email-peter.maydell@linaro.org
  * [5f0e775] Update version for v2.7.0-rc3 release.
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>

  [ Kelly Lauren Summer Becker-Neuding ]
  * [6cbfa0e] Imported Upstream version 2.7.0-rc3

 -- Kelly Lauren Summer Becker-Neuding <kbecker@kellybecker.me>  Thu, 18 Aug 2016 00:49:01 -0700

qemu (2.6+dfsg-3) unstable; urgency=high

  * more security fixes picked from upstream:
   - CVE-2016-4454 fix (vmsvga) (Closes: CVE-2016-4454)
    vmsvga-add-more-fifo-checks-CVE-2016-4454.patch
    vmsvga-move-fifo-sanity-checks-to-vmsvga_fifo_length-CVE-2016-4454.patch
    vmsvga-shadow-fifo-registers-CVE-2016-4454.patch
   - vmsvga-don-t-process-more-than-1024-fifo-commands-at-once-CVE-2016-4453.patch
    (Closes: CVE-2016-4453)
   - scsi-check-buffer-length-before-reading-scsi-command-CVE-2016-5238.patch
    (Closes: #826152, CVE-2016-5238)
  * set urgency to high due to the amount of
    security fixes accumulated so far

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 15 Jun 2016 08:54:12 +0300

qemu (1:2.6+dfsg-2) unstable; urgency=medium

  * add missing log entries for previous upload,
    remove closing of #807006 (it is not closed)
  * Added vga-add-sr_vbe-register-set.patch from upstream
    This fixes regression (in particular with win7 installer)
    introduced by the fix for CVE-2016-3712 (commit fd3c136)
  * fix-linking-relocatable-objects-on-sparc.patch (Closes: #807006)
  * Lots of security patches from upstream:
  - net-mipsnet-check-packet-length-against-buffer-CVE-2016-4002.patch
    (Closes: #821061, CVE-2016-4002)
  - i386-kvmvapic-initialise-imm32-variable-CVE-2016-4020.patch
    (Closes: #821062, CVE-2016-4020)
  - esp-check-command-buffer-length-before-write-CVE-2016-4439.patch,
    esp-check-dma-length-before-reading-scsi-command-CVE-2016-4441.patch
    (Closes: #824856, CVE-2016-4439, CVE-2016-4441)
  - scsi-mptsas-infinite-loop-while-fetching-requests-CVE-2016-4964.patch
    (Closes: #825207, CVE-2016-4964)
  - scsi-pvscsi-check-command-descriptor-ring-buffer-size-CVE-2016-4952.patch
    (Closes: #825210, CVE-2016-4952)
  - scsi-megasas-use-appropriate-property-buffer-size-CVE-2016-5106.patch
    (Closes: #825615, CVE-2016-5106)
  - scsi-megasas-initialise-local-configuration-data-buffer-CVE-2016-5105.patch
    (Closes: #825614, CVE-2016-5105)
  - scsi-megasas-check-read_queue_head-index-value-CVE-2016-5107.patch
    (Closes: #825616, CVE-2016-5107)
  - block-iscsi-avoid-potential-overflow-of-acb-task-cdb-CVE-2016-5126.patch
    (Closes: #826151, CVE-2016-5126)
  - scsi-esp-check-TI-buffer-index-before-read-write-CVE-2016-5338.patch
    (Closes: #827024, CVE-2016-5338)
  - scsi-megasas-null-terminate-bios-version-buffer-CVE-2016-5337.patch
    (Closes: #827026, CVE-2016-5337)
  * hw-dma-omap-spelling-fix-endianness.patch (lintian)
  * arm-spelling-fix-mismatch.patch (lintian)

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 13 Jun 2016 12:10:44 +0300

qemu (1:2.6+dfsg-1) unstable; urgency=medium

  * new upstream release
   Closes: #799115
   Closes: #822369, #823588
   Closes: #813698
   Closes: #805827
   Closes: #813585
   Closes: #823830 CVE-2016-3710 CVE-2016-3712
   Closes: #813193 CVE-2016-2198
   Closes: #813194 CVE-2016-2197
   Closes: #815008 CVE-2016-2392
   Closes: #815009 CVE-2016-2391
   Closes: #815680 CVE-2016-2538
   Closes: #821038 CVE-2016-4001
   Closes: #822344 CVE-2016-4037
   Closes: #817181 CVE-2016-2841
   Closes: #817182 CVE-2016-2857
   Closes: #817183 CVE-2016-2858
   - removed all patches applied upstream
   - removed mjt-set-oem-in-rsdt-like-slic.diff, feature has been
     implemented in upstream differently
   - refreshed local patches
  * do not recommend sharutils for qemu-utils anymore (Closes: #820449)
  * typo fix in qemu-system-misc description (Closes: #822883)
  * allow qemu-debootstrap to create mips64el chroot (Closes: #817234)
  * switch VCS URLs from http to https (lintian)
  * Bump Standards-Version to 3.9.8 (no changes)
  * code spelling fixes from upstream
  * added s390x-virtio-ccw-fix-spelling.patch from upstream
  * added hw-ipmi-fix-spelling.patch from upstream
  * added docs-specify-spell-fix.patch from upstream
  * added fsdev-spelling-fix.patch from upstream
  * fold long list of supported arches in package descriptions

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 18 May 2016 14:44:14 +0300

qemu (1:2.5+dfsg-5) unstable; urgency=medium

  * fix misspellings in previous debian/changelog entry
  * e1000-eliminate-infinite-loops-on-out-of-bounds-start-CVE-2016-1981.patch
    (Closes: #812307, CVE-2016-1981)
  * hmp-fix-sendkey-out-of-bounds-write-CVE-2015-8619.patch
    (Closes: #809237, CVE-2015-8619)
  * use `command -v' instead of `type' to check for command existence

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 28 Jan 2016 18:39:21 +0300

qemu (1:2.5+dfsg-4) unstable; urgency=medium

  * change misspelling of won't in NEWS (lintian)
  * two patches from upstream to enable sigaltstack syscall (linux-user)
    (Closes: #805826)
  * word-wrapped last entry in debian/changelog
  * use type to find out whenever update-binfmts is available
  * fw_cfg-add-check-to-validate-current-entry-value-CVE-2016-1714.patch
    (Partial) patch targeted 2.3 which fixes the read side of the issue
    (Closes: CVE-2016-1714)
  * i386-avoid-null-pointer-dereference-CVE-2016-1922.patch
    (Closes: #811201, CVE-2016-1922)

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 21 Jan 2016 13:06:06 +0300

qemu (1:2.5+dfsg-3) unstable; urgency=high

  [ Aurelien Jarno ]
  * debian/copyright:
    fix a spelling error reported by lintian: dependecy -> dependency.

  [ Michael Tokarev ]
  * net-vmxnet3-avoid-memory-leakage-in-activate_device patch
    (Closes: #808145, CVE-2015-8567, CVE-2015-8568)
  * scsi-initialise-info-object-with-appropriate-size-CVE-2015-8613.patch
    (Closes: #809232, CVE-2015-8613)
  * net-rocker-fix-an-incorrect-array-bounds-check-CVE-2015-8701.patch
    (Closes: #809313, CVE-2015-8701)

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 10 Jan 2016 10:59:46 +0300

qemu (1:2.5+dfsg-2) unstable; urgency=high

  * ehci-make-idt-processing-more-robust-CVE-2015-8558.patch
    (Closes: #808144, CVE-2015-8558)
  * virtio-9p-use-accessor-to-get-thread_pool.patch (Closes: #808357)
  * two upstream patches from xsa-155 fixing unsafe shared memory access in xen
    (Closes: #809229, CVE-2015-8550)
  * net-ne2000-fix-bounds-check-in-ioport-operations-CVE-2015-8743.patch
    (Closes: #810519, CVE-2015-8743)
  * ide-ahci-reset-ncq-object-to-unused-on-error-CVE-2016-1568.patch
    (Closes: #810527, CVE-2016-1568)
  * changed build-depends from libpng12-dev to libpng-dev (Closes: #810205)

 -- Michael Tokarev <mjt@tls.msk.ru>  Sat, 09 Jan 2016 21:40:43 +0300

qemu (1:2.5+dfsg-1) unstable; urgency=medium

  * new upstream release
    (Closes: #801158)
    Closes: #806373 CVE-2015-8345
    Closes: #806742 CVE-2015-7504
    Closes: #806741 CVE-2015-7512
    Closes: #808131 CVE-2015-7549
    Closes: #808130 CVE-2015-8504
  * adopt for the new upstream:
   - removed patches which are upstream now
   - build-depend on libcacard-dev and stop requiring libtool
   - removed libcacard refs from debian/qemu-system-common.docs
   - moved qmp docs out of subdir following upstream
   - removed pc-bios/vgabios-virtio.bin
  * enable new linux-user target: tilegx
  * install qemu-ga manpage
  * install ivshmem-server and ivshmem-client to qemu-utils
  * stop using cylinders/heads/sectors for sfdisk
    in qemu-make-debian-root (Closes: #785470)
  * modify qemu-make-debian-root to use some current tools
    (this simplifies things, removes usage of uudecode)
    (usefulness of this utility is questionable anyway)

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 16 Dec 2015 20:00:04 +0300

qemu (1:2.4+dfsg-5) unstable; urgency=medium

  * trace-remove-malloc-tracing.patch from upstream.
    (Closes: #802633)
  * stop building libcacard, as it is now in its own separate
    source package and has been removed from upstream qemu in 2.5.
    Here we just stop producing libcacard binaries, but still use
    embedded libcacard source to link with it statically.  In 2.5
    we will switch to external libcacard. (Closes: #805410)

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 29 Nov 2015 12:22:52 +0300

qemu (1:2.4+dfsg-4) unstable; urgency=medium

  * applied 3 patches from upstream to fix virtio-net
    possible remote DoS (Closes: #799452 CVE-2015-7295)
  * remove now-unused /etc/qemu too (Closes: #797608)

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 08 Oct 2015 20:30:03 +0300

qemu (1:2.4+dfsg-3) unstable; urgency=high

  * ne2000-add-checks-to-validate-ring-buffer-pointers-CVE-2015-5279.patch
    fix for Heap overflow vulnerability in ne2000_receive() function
    (Closes: #799074 CVE-2015-5279)
  * ne2000-avoid-infinite-loop-when-receiving-packets-CVE-2015-5278.patch
    (Closes: #799073 CVE-2015-5278)
  * some binfmt reorg:
   - extend aarch64 to include one more byte as other arches do
   - set OSABI mask to 0xfc for i386, ppc*, s390x, sparc*, to recognize
     OSABI=3 (GNU/Linux) in addition to NONE/SysV
     (Closes: #784605, #794737)
   - tighten sh4 & sh4eb, fixing OSABI mask to be \xfc not 0

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 15 Sep 2015 19:30:18 +0300

qemu (1:2.4+dfsg-2) unstable; urgency=high

  * Add e1000-avoid-infinite-loop-in-transmit-CVE-2015-6815.patch.
    CVE-2015-6815: net: e1000 infinite loop issue in processing transmit
    descriptor.  (Closes: #798101 CVE-2015-6815)
  * Add ide-fix-ATAPI-command-permissions-CVE-2015-6855.patch.
    CVE-2015-6855: ide: qemu allows arbitrary commands to be sent to an ATAPI
    device from guest, while illegal comands might have security impact,
    f.e. WIN_READ_NATIVE_MAX results in divide by zero error.
    (Closes: CVE-2015-6855)

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 11 Sep 2015 19:54:07 +0300

qemu (1:2.4+dfsg-1a) unstable; urgency=medium

  * new upstream (2.4.0) release
    Closes: #795461, #793811, #794610, #795087, #794611, #793388
    CVE-2015-3214 CVE-2015-5154 CVE-2015-5165 CVE-2015-5745
    CVE-2015-5166 CVE-2015-5158
    Closes: #793817
  * removed all upstreamed patches
  * remove --enable-vnc-ws option (not used anymore)
  * update mjt-set-oem-in-rsdt-like-slic.diff
  * vnc-fix-memory-corruption-CVE-2015-5225.patch from upstream
    Closes: #796465 CVE-2015-5225
  * remove now-unused /etc/qemu/target-x86_64.conf

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 31 Aug 2015 16:28:08 +0300

qemu (1:2.3+dfsg-6a) unstable; urgency=medium

  * fix d/copyright leftover in previous upload

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 11 Jun 2015 20:31:07 +0300

qemu (1:2.3+dfsg-6) unstable; urgency=high

  * pcnet-force-buffer-access-to-be-in-bounds-CVE-2015-3209.patch
    from upstream (Closes: #788460 CVE-2015-3209)

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 11 Jun 2015 20:03:40 +0300

qemu (1:2.3+dfsg-5) unstable; urgency=high

  * slirp-use-less-predictable-directory-name-in-tmp-CVE-2015-4037.patch
    (Closes: CVE-2015-4037)
  * 11 patches for XEN PCI pass-through issues
    (Closes: #787547 CVE-2015-4103 CVE-2015-4104 CVE-2015-4105 CVE-2015-4106)
  * kbd-add-brazil-kbd-keys-*.patch, adding two keys found on Brazilian
    keyboards (Closes: #772422)

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 03 Jun 2015 17:18:58 +0300

qemu (1:2.3+dfsg-4) unstable; urgency=medium

  * rules.mak-force-CFLAGS-for-all-objects-in-DSO.patch:
    patch from upstream to fix FTBFS on some arches
  * libcacard-dev: depend on libnss3-dev (Closes: #785798)
  * libcacard-dev: do not depend on pkg-config

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 20 May 2015 14:21:09 +0300

qemu (1:2.3+dfsg-3) unstable; urgency=high

  * fdc-force-the-fifo-access-to-be-in-bounds-CVE-2015-3456.patch
    (Closes: CVE-2015-3456)
  * fix the OSABI binfmt mask for x86_64 arch, to actually fix #763043.
    Original fix didn't work, because "someone" forgot arithmetics.
    (Really Closes: #763043)
  * align binfmt magics/masks to be in single column

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 12 May 2015 23:02:29 +0300

qemu (1:2.3+dfsg-2) unstable; urgency=medium

  * do not install upstream changelog file, it is unused for a long time
  * mention closing of #781250 #769299 by 2.3
  * mention qemu-block-extra split in NEWS files
  * fix spelling prob in the manpage
  * bump Standards-Version to 3.9.6 (no changes needed)
  * add mips64 and mips64el binfmt registration (Closes: #778624)

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 04 May 2015 13:01:03 +0300

qemu (1:2.3+dfsg-1) unstable; urgency=medium

  * new upstream release (2.3)
    (Closes: #781250 #769299 #781250 #769299)

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 24 Apr 2015 17:33:46 +0300

qemu (1:2.2+dfsg-6exp) experimental; urgency=medium

  * qemu 2.2.1 stable/bugfix release (remove included upstream
    exec-change-default-exception_index-value-for-migration-to--1.patch)
  * added mips64(el) to list of architectures where qemu-utils is built
    (Closes: #780200)
  * added kvm-on-x32.patch from Adam Borowski (Closes: #778737)
  * create qemu-block-extra package
  * rules.mak-fix-module-build.patch from upstream to fix module build
  * pass --enable-modules to configure
  * pass multiarch --libdir to configure
  * mjt-set-oem-in-rsdt-like-slic.diff: update FACP table too,
    not only RSDT.  FACP is needed for win7 booting in UEFI mode.
  * enable libcacard (closes: #764971)
   - build-depend on libnss3-dev & libtool-bin
   - --enable-smartcard-nss
   - run dh_makeshlibs
   - rm libcacard.la
   - add libcacard0, libcacard-dev and libcacard-tools packages
   - add libcacard*.install and libcacard0.symbols

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 17 Apr 2015 21:54:53 +0300

qemu (1:2.2+dfsg-5exp) experimental; urgency=medium

  * fix initscript removal once again

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 23 Jan 2015 15:05:46 +0300

qemu (1:2.2+dfsg-4exp) experimental; urgency=medium

  * fix a brown-paper bag bug removing the qemu-system-x86 initscript
    (Closes: #776004)

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 22 Jan 2015 20:33:38 +0300

qemu (1:2.2+dfsg-3exp) experimental; urgency=medium

  * mention closing of #753887 by 2.2
  * install only specific bamboo.dtb for ppc, not *.dtb
    (Closes: #773033)
  * install qemu-system-misc firmware in d/*.install not d/rules,
    as other firmware files
  * exec-change-default-exception_index-value-for-migration-to--1.patch:
    cherry-picked commit adee64249ee37e from upstream
  * stop messing up with alternatives (qemu for qemu-system-*)
  * stop shipping qemu-system-x86 initscript to load kvm modules
    (kernel since 3.4 does that automatically) (Closes: #751754)

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 22 Jan 2015 09:28:01 +0300

qemu (1:2.2+dfsg-2exp) experimental; urgency=medium

  * and finally uploading to experimental as it should be

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 10 Dec 2014 00:58:32 +0300

qemu (2.2+dfsg-1exp) unstable; urgency=medium

  * new upstream release 2.2.0 (Closes: #751078, #726629, #753887)
  * removed all patches which was cherry-picked from upstream,
    only keeping debian-specific changes
  * refreshed mjt-set-oem-in-rsdt-like-slic.diff
  * added tricore to qemu-system-misc package (new arch)
  * restore upstream pc-bios/petalogix-*.dtb "blobs":
    upstream says it is the canonical form, dtc is used
    to convert from dts to dtb and back, the conversion
    is reversible
  * install petalogix firmware for microblaze (Closes: #769068)

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 09 Dec 2014 23:09:26 +0300

qemu (1:2.1+dfsg-11) unstable; urgency=medium

  * bump epoch and reupload to cancel 2.2+dfsg-1exp upload
    mistakenly done to unstable.  No other changes.

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 10 Dec 2014 00:52:28 +0300

qemu (2.1+dfsg-10) unstable; urgency=medium

  * make (debian-specific) x86 data path (with seabios and ipxe
    in it) non-x86-specific, since other arches use firmware
    files too (Closes: #772127)
  * add seabios to Recommends to qemu-system-misc, qemu-system-mips,
    qemu-system-ppc and qemu-system-sparc packages, because these
    packages contains emulators using vgabios which is part of
    seabios package (#772127).
  * add ipxe-qemu to Recommends to qemu-system-misc, qemu-system-arm,
    qemu-system-mips, qemu-system-ppc, qemu-system-sparc packages,
    because these packages contains emulators using network boot
    roms (#772127), in a similar way.

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 09 Dec 2014 13:47:36 +0300

qemu (2.1+dfsg-9) unstable; urgency=high

  * apply upstream patches for CVE-2014-8106
    (cirrus: insufficient blit region checks)
    (Closes: #772025 CVE-2014-8106)

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 04 Dec 2014 00:10:43 +0300

qemu (2.1+dfsg-8) unstable; urgency=low

  [ Michael Tokarev ]
  * add Built-Using control field for qemu-user-static package:
    take contents of qemu-user ${shlibs:Depends} and transform it
    into list of source packages with versions.  (Closes: #768926)
  * run remove-alternatives in qemu-system.postinst (the metapkg)
    too, not only in qemu-system-XX.postinst, to handle upgrades
    from wheezy (Closes: #768244)
  * several fixes for debian/qemu-user.1 manpage.  It needs more
    work, but at least some easy and obvious errors are fixed now.
    (Closes: #763841)
  * migration-fix-parameter-validation-on-ram-load.patch from upstream
    (Closes: #769451 CVE-2014-7840)
  * fix x86_64 binfmt mask to allow more values in ELF_OSABI field
    (byte7).  Current gcc/binfmt sometimes produces binaries with
    this field set to 3 (OSABI_GNU) not 0 (OSABI_SYSV) as used to be.
    Set mask to 0xfb not 0xff here, to allow 0 (traditional SYSV),
    1 (HPUX), 2 (NETBSD) or 3 (GNU).  This lets 2 more types than
    necessary, but qemu will reject wrong types so no harm is done.
    Some other binfmts ignore this field completely (with mask=0).
    Maybe some day we'll have 2 different binfmt registrations for
    the 2 different ABI types.  (Closes: #763043)
  * usb-host-fix-usb_host_speed_compat-tyops.patch -- fix host usb devices
    attach, without this patch many USB devices does not work
  * qdev-monitor-fix-segmentation-fault-on-qdev_device_h.patch - trivial
    patch from upstream to fix segfault in -device foo,help (Closes: #770880)

  [ Aurelien Jarno ]
  * Add tcg-mips-fix-store-softmmu-slow-path.patch from upstream to fix
    TCG support on mips/mipsel hosts (Closes: #769470).

  [ Ian Campbell ]
  * Backport patch to fix unmapping of persistent grants in the Xen qdisk
    backend (Closes: #770468).

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 27 Nov 2014 18:32:45 +0300

qemu (2.1+dfsg-7) unstable; urgency=high

  * urgency is high due to 2 security fixes
    (one current and one forgotten in previous release)
    and because of possible data corruption bugfix
  * vnc-sanitize-bits_per_pixel-from-the-client-CVE-2014-7815.patch
    from upstream (Closes: CVE-2014-7815)
  * fix spelling mistake in previous changelog entry
  * add two patches from upstream for block/raw-posix.c to work around
    probs in FS_IOC_FIEMAP ioctl and to prefer seek_hole over fiemap.
    This should fix a long-standing ghost data corruption observed
    in various places.

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 03 Nov 2014 18:44:34 +0300

qemu (2.1+dfsg-6) unstable; urgency=medium

  * mention closing of CVE-2014-3615 by 2.1.2 (2.1+dfsg-5)
  * 9p-use-little-endian-format-for-xattr-values.patch (Closes: #755740)
  * mention closing of #760386
  * mention closing of more CVEs by 2.1+dfsg-1
  * recognize ppc64el in qemu-debootstrap (Luca Falavigna) (Closes: #760949)
  * use dpkg-vendor to let derived distros to use our d/rules
  * use /usr/share/dpkg/architecture.mk to get DEB_HOST_* and DEB_BUILD_*
    variables.  This restores cross building support.
  * use /usr/share/dpkg/buildflags.mk for CFLAGS LDFLAGS &Co
  * pass -DVENDOR_{DEBIAN,UBUNTU} to compiler
  * do not treat ppc* and ppc*le as compatible for binfmt registrations
  * mention ACPI SLIC to RSDT id copying if slic table is supplied,
    thank you Tim Small for the patch (Closes: #765075)
  * apply 5 patches from upstream to fix a security issue in
    vmware-vga (Closes: #765496 CVE-2014-3689)
  * apply two patches from upstream to make qemu to work with samba4
    (Closes: #747636)

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 03 Nov 2014 18:07:48 +0300

qemu (2.1+dfsg-5) unstable; urgency=medium

  * upstream bugfix release v2.1.2
    (Closes: #762532 CVE-2014-3640 CVE-2014-5388 CVE-2014-3615)
  * Add x32 to the list of supported architectures
    (patch by Thorsten Glaser) (Closes: #760386)
  * fix wrong reference in kvm.1 (Closes: #761137)
  * removed patches (applied upstream):
    l2tp-linux-only.patch
    ide-only-constrain-read_write-requests-to-drive-size.diff
    pc-reserve-more-memory-for-acpi.patch

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 26 Sep 2014 17:43:26 +0400

qemu (2.1+dfsg-4) unstable; urgency=medium

  * mention libnuma-dev but not enable for now
  * 9p-readdir.patch: fix readdir in 9p mapped mode (Closes: #755738)
  * pc-reserve-more-memory-for-acpi.patch: fix linux -kernel not working
    with new qemu (Closes: #759522)
  * qemu-options-add-missing--drive-discard-option-to-cmdline-help.diff -
    documentation fix
  * mention that 2.1 closed #754336.
  * move qemu-bridge-helper to /usr/lib/qemu/ subdir (lintian)
  * debian/binfmt-update-in (Serge Hallyn):
    - don't run in a container
    - add ppc64le as target
  * add apport hook from ubuntu package (ubuntu-only for now)

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 31 Aug 2014 09:32:59 +0400

qemu (2.1+dfsg-3) unstable; urgency=medium

  * set SHELL = /bin/sh -e, so that more complex shell constructs
    in d/rules will fail if any command fail inside
  * check for pipe2() being a stub too, like utimensat() etc
  * build-depend on gnutls-dev, not libgnutls*-dev, so the
    buuld system will pick default gnutls impl (so it works for
    backports and future versions)
  * build-depend on libjpeg-dev not libjpeg8-dev
  * minimum version of seabios is 1.7.5 (Closes: #757958)
  * ide-only-constrain-read_write-requests-to-drive-size.diff
    (Closes: #757927)
  * added use-arch-data-path.patch, to be able to search for binary
    blobs in several (arch-specific) data directories instead of just one.
  * removed all blob/firmware symlinks from qemu-system-x86, using
    arch-specific datapath instead (/usr/share/seabios:/usr/lib/ipxe/qemu)
  * removed retry-pxe-after-efi.patch and depend on ipxe-qemu which
    introduced efi boot roms.  qemu should not try to load "wrong"
    ROM, or else migration will fail due to rom size mismatch.
  * include /usr/lib/qemu-bridge-helper binary, but not make it setuid
    due to security concerns outlined in #691138 (Closes: #691138)
  * make vnc-jpeg not debian-specific
  * install kvm-spice symlinks on ubuntu

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 14 Aug 2014 14:30:24 +0400

qemu (2.1+dfsg-2) unstable; urgency=medium

  * l2tp-linux-only.patch: fix FTBFS on kfreebsd
  * imx_timer_TIMER_MAX_clash.diff: fix ITIMER_MAX definition clash
  * remove kfreebsd hack which disabled usb support on this platform
    since qemu-1.3: it isn't needed anymore

 -- Michael Tokarev <mjt@tls.msk.ru>  Sat, 02 Aug 2014 00:51:04 +0400

qemu (2.1+dfsg-1) unstable; urgency=medium

  * new upstream release
    Closes: #739589:
     CVE-2013-4148 CVE-2013-4149 CVE-2013-4150 CVE-2013-4151
     CVE-2013-4526 CVE-2013-4527 CVE-2013-4528
     CVE-2013-4530 CVE-2013-4531 CVE-2013-4532 CVE-2013-4533 CVE-2013-4534
     CVE-2013-4535 CVE-2013-4536 CVE-2013-4537 CVE-2013-4538 CVE-2013-4539
     CVE-2013-4540 CVE-2013-4541 CVE-2013-4542
     CVE-2013-6399 CVE-2014-0182 CVE-2014-3461
    Closes: #735618
    Closes: #754336
    Closes: CVE-2014-3471 (pcie hotplug/hotunplug)
  * versioned build-depend on libiscsi-dev (>>1.9.0~)
  * added ppc64le user target
  * fix description of qemu-user-binfmt wrt "empty" (Closes: #755988)
  * use /usr/share/dpkg/pkg-info.mk instead of inventing the same locally
  * added debian/get-orig-source.sh (and a d/rules target)
  * set ubuntu vcs branch to ubuntu-utopic
  * binfmt-update-in: make sure to filter out compat arches

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 01 Aug 2014 20:06:22 +0400

qemu (2.0.0+dfsg-7) unstable; urgency=medium

  * clarify description of qemu-user-binfmt a bit
  * build-depend on acpica-tools (iasl) in order to rebuild .dsl files
  * remove qemu-keymaps package, since it is not used by other tools
    anymore, and ship keymaps in qemu-system-common.
  * remove (and break by qemu-system-common) old qemu-common for
    ubuntu too, since it was transitional-to-qemu-keymaps pkg
  * reorganize docs (Closes: #751376):
   - do not ship docs in qemu (meta)package, except of qemu-doc.html
   - ship most of docs/* in qemu-system-common in /usr/share/doc/q-s-c/
   - make symlinks from /usr/share/doc/qemu-system-foo/common to ../q-s-c/
   - ship doc-base file for qemu-system-common too (for qemu-doc.html)
   - rename qemu.1 manpage to qemu-system.1
  * qemu-user-static & qemu-user-binfmt conflict with each other, not break.
  * mention that qemu-user-binfmt is empty package (lintian)

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 24 Jul 2014 16:51:16 +0400

qemu (2.0.0+dfsg-6) unstable; urgency=medium

  * build-depend on libgnutls28-dev not libgnutls-dev
  * added qcow1 block format validation patches from upstream:
   block-fmt-validation/qcow1-check-maximum-cluster-size.patch
   block-fmt-validation/qcow1-stricter-backing-file-length-check.patch
   block-fmt-validation/qcow1-validate-image-size-CVE-2014-0223.patch
   block-fmt-validation/qcow1-validate-L2-table-size-CVE-2014-0222.patch
    (Finally closes: #742730, CVE-2014-0222, CVE-2014-0223)

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 23 May 2014 12:12:38 +0400

qemu (2.0.0+dfsg-5) unstable; urgency=medium

  * re-re-enable rbd (ceph) support again (Closes: #689239)
    Should watch for breakage and for runtime dependencies closely from now on.
  * fix qemu-kvm package description (stop mentioning it is transitional)
  * move all binfmt handling from many files to d/binfmt-update-in
  * introduce qemu-user-binfmt (dummy) package to support binfmt
    registration of qemu-user binaries (Closes: #677529)

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 13 May 2014 21:15:48 +0400

qemu (2.0.0+dfsg-4) unstable; urgency=medium

  * suggests ovmf, not recommends it as it is not in -main (Closes: #745698)
  * cputlb-fix-regression-with-TCG-interpreter.patch (Closes: #744342)

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 30 Apr 2014 10:03:55 +0400

qemu (2.0.0+dfsg-3) unstable; urgency=low

  * 2.0.0 closed #744213 (CVE-2013-4544) and #745157 (CVE-2014-2894)
  * mjt-set-oem-in-rsdt-like-slic.diff: apply a (hackish) patch to simplify
    running OEM versions of windows vista and 7 in qemu using SLIC table
    from current hardware.
  * set VENDOR in d/rules
  * added forgotten qemu-kvm Pre-Depends field
  * switch back from sdl2 to sdl1, as the former apparently isn't ready yet
    (Closes: #745269)

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 21 Apr 2014 12:34:03 +0400

qemu (2.0.0+dfsg-2) unstable; urgency=medium

  * resurrect 02_kfreebsd.patch, -- without it qemu FTBFS on current
    Debian kFreeBSD system still.

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 17 Apr 2014 22:04:38 +0400

qemu (2.0.0+dfsg-1) unstable; urgency=low

  * new upstream major release
     Closes: #744213 CVE-2013-4544
     Closes: #745157 CVE-2014-2894
  * 2.0 actually does not close #739589,
    remove it from from last changelog entry
  * mention closing of #707629 by 2.0
  * mention a list of CVE IDs closed by #742730
  * mention closing of CVE-2013-4377 by 1.7.0-6
  * do not set --enable-uname-release=2.6.32 for qemu-user anymore
    (was needed for old ubuntu builders)
  * removed 02_kfreebsd.patch: it adds configure check for futimens() and
    futimesat() syscalls on FreeBSD, however futimens() appeared in FreeBSD
    5.0, and futimesat() in 8.0, and 8.0 is the earliest supported version
  * kmod dependency is linux-any
  * doc-grammify-allows-to.patch: fix some lintian warnings
  * remove alternatives for qemu: different architectures
    aren't really alternatives and never had been
  * update Standards-Version to 3.9.5 (no changes needed)
  * exec-limit-translation-limiting-in-address_space_translate-to-xen.diff -
    fixes windows BSOD with virtio-scsi when upgrading from 1.7.0 to 1.7.1
    or 2.0, among other things

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 17 Apr 2014 18:27:15 +0400

qemu (2.0.0~rc1+dfsg-1exp) experimental; urgency=low

  * new upstream release candidate (2.0-rc1)
    Closes: #742730 -- image format processing issues:
     CVE-2014-0142 CVE-2014-0143 CVE-2014-0144 CVE-2014-0145
     CVE-2014-0146 CVE-2014-0147 CVE-2014-0148
    Closes: #743235, #707629
  * refreshed patches:
    02_kfreebsd.patch
    retry-pxe-after-efi.patch
    use-fixed-data-path.patch
  * removed patches applied upstream:
    qemu-1.7.1.diff
    address_space_translate-do-not-cross-page-boundaries.diff
    fix-smb-security-share.patch
    slirp-smb-redirect-port-445-too.patch
    implement-posix-timers.diff
    linux-user-fixed-s390x-clone-argument-order.patch
  * added bios-256k.bin symlink and bump seabios dependency to >= 1.7.4-2
  * recommend ovmf package for qemu-system-x86 to support UEFI boot
    (Closes: #714249)
  * switch from sdl1 to sdl2 (build-depend on libsdl2-dev)
  * output last 50 lines of config.log in case configure failed

 -- Michael Tokarev <mjt@tls.msk.ru>  Sat, 05 Apr 2014 16:23:48 +0400

qemu (1.7.0+dfsg-9) unstable; urgency=medium

  * remove rbd/rados/ceph support *again*, till they'll actually provide
    some symbol/library version mechanism
    (Closes:  #744364, Reopens: #729961, #689239)

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 13 Apr 2014 18:49:46 +0400

qemu (1.7.0+dfsg-8) unstable; urgency=low

  * fix a brown-paper-bag bug in the previous upload

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 11 Apr 2014 22:01:32 +0400

qemu (1.7.0+dfsg-7) unstable; urgency=high

  * fix guest-triggerable buffer overrun in virtio-net device
    (Closes: #744221 CVE-2014-0150)

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 11 Apr 2014 20:27:16 +0400

qemu (1.7.0+dfsg-6) unstable; urgency=medium

  * make ceph (rbd) support linux-only, since it exists only on linux

 -- Michael Tokarev <mjt@tls.msk.ru>  Sat, 05 Apr 2014 13:59:48 +0400

qemu (1.7.0+dfsg-5) unstable; urgency=medium

  * remove OVMF.fd symlink added in -4, it belongs to ovmf (Closes: #741494)
  * qemu-debootstrap: add support for arm64 architecture (Closes: #740112)
  * mention closing of #725176 by 1.7.0

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 13 Mar 2014 06:21:01 +0400

qemu (1.7.0+dfsg-4) unstable; urgency=medium

  [ Michael Tokarev ]
  * 1.7.1 stable upstream release (Closes: #719633)
    Closes: CVE-2013-4377
  * implement-posix-timers.diff from upstream (Closes: #732258)
  * address_space_translate-do-not-cross-page-boundaries.diff -
    upstream bugfix for xen
  * break libvirt << 1.2, not just 1.0, we need 1.2+ after qemu-1.6.
  * add linux-user-fixed-s390x-clone-argument-order.patch (Closes: #739800)
  * re-enable cepth (rbd) support (Closes: #729961, #689239)

  [ Steve Langasek ]
  * (from Ubuntu) add symlink for OVMF.fd, which is now available in Debian
    non-free.
  * libusbredir is enabled in Ubuntu too, so sync debian/control.
  * Enable building for ppc64el (in both Debian and Ubuntu): Debian does not
    have a ppc64el port yet, but qemu builds out of the box there so it's
    safe/appropriate to enable.
  * Merge in Ubuntu-specific (and Ubuntu-tagged) debian/control changes.
  * Enable building for arm64; the arm64 target is not yet merged, but the
    package doesn't need arm64 target support to build for an arm64 host.

  [ Riku Voipio ]
  * control: build-depend on python:any (change originally made
    in Aug-2013 but reverted by mjt later)

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 12 Mar 2014 18:34:03 +0400

qemu (1.7.0+dfsg-3) unstable; urgency=low

  * qemu-kvm: fix versions for Breaks/Replaces/Depends on qemu-system-x86
  * qemu-system-ppc: depend on openbios-ppc >= 1.1+svn1229 to fix boot issues
  * qemu-system-sparc: depend on openbios-sparc >= 1.1+svn1229 too
  * remove unused lintian overrides for qemu-user from qemu (meta)package
  * qemu-system-*: depend on unversioned qemu-keymaps and qemu-system-common
    packages (no particular version of any is hard-required)
  * remove debian/README.source (was from quilt)
  * add myself to debian/copyright
  * reorder d/control to have Recommends:/Suggests: closer to Depends.
  * rename d/control to d/control-in and add a d/rules rule to build it
    based on ${VENDOR}
  * allow different content in d/control for debian/ubuntu
  * added debian/README-components-versions
  * fixed qemu-armeb binfmt (Closes: #735078)
  * added powerpcspe host arch (Closes: #734696)
  * do not check for presence of update-alternatives which is part of dpkg
    (Closes: #733222)
  * do not call update-alternative --remove from postrm:remove
    (lintian complains about this)
  * add efi netrom links.  This requires new ipxe-qemu.

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 16 Jan 2014 15:17:46 +0400

qemu (1.7.0+dfsg-2) unstable; urgency=low

  * switch from vgabios to seavgabios
  * rework update-alternatives handling for qemu-system (Closes: #722914)
  * mention closing of #326886, #390444, #706237 and CVE-2013-4375 for 1.7.0
  * rearrange libvte-dev build-dependency to come together with gtk, and
    comment it out (since gtk frontend isn't being built)
  * re-introduce qemu-kvm package with just a wrapper (/usr/bin/kvm)
    and make this wrapper to force kvm mode (Closes: #727762)
  * use less strict dependency on qemu-keymaps
  * added fix-smb-security-share.patch by Michael Büsch (Closes: #727756)
  * added move-ncalrpc-dir-to-tmp.patch by Michael Büsch (Closes: #728876)

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 29 Nov 2013 00:16:44 +0400

qemu (1.7.0+dfsg-1) unstable; urgency=low

  * new upstream release (Closes: #724758, #326886, #390444, #706237, #725176)
    Also fixes CVE-2013-4375 (xen-specific qemu disk backend (qdisk)
    resource leak)
  * tweak kvm loading script to not load module for 3.4+ kernel
    (kernel autoloads kvm modules since 3.4) (Closes: #717811)
  * mention closing of #721713, #710971, #674201
  * refresh use-fixed-data-path.patch to contain just the min. changes
  * fix pxe-eepro100.rom link (never worked in qemu due to wrong name)
  * remove old $Id$ line from debian/rules

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 28 Nov 2013 03:14:21 +0400

qemu (1.6.0+dfsg-2) unstable; urgency=low

  * Build-depend in seccomp again once it is in -testing
  * 1.6.1 upstream bugfix release (Closes: #725944, #721713, #710971)
  * fix "allows [one] to" in qemu-ga description
  * fix descriptions for qemu-system and qemu-system-common packages

 -- Michael Tokarev <mjt@tls.msk.ru>  Fri, 11 Oct 2013 01:15:48 +0400

qemu (1.6.0+dfsg-1) unstable; urgency=low

  * final upstream v1.6.0 (Closes: #718180, #714273, #605525, #701855, #674201)
  * removed configure-explicitly-disable-virtfs-if-softmmu=no.patch
  * mention closing of #717724 by 1.6
  * mention closing of #710971 by 1.5 (which disabled gtk support)

  [ Riku Voipio ]
  * - set --cross-prefix in debian/rules when cross-compiling

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 02 Sep 2013 15:18:49 +0400

qemu (1.6.0~rc0+dfsg-1exp) experimental; urgency=low

  * uploading to experimental (rc0)
  * new upstream release (release candidate) (Closes: #718016, #717724)
  * removed patches:
   - qemu-1.5.1.diff
   - sparc-linux-user-fix-missing-symbols-in-.rel-.rela.plt-sections.patch
  * refreshed use-fixed-data-path.patch
  * ship new qemu_logo_no_text.svg
  * stop shipping sgabios symlink, it is moved to sgabios package
  * bump version of libseccomp build dependency to 2.1 (minimum
    required to build) and disable libseccomp for now (because it
    isn't available in debian yet)

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 31 Jul 2013 10:49:30 +0400

qemu (1.5.0+dfsg-5) unstable; urgency=low

  * new upstream 1.5.1 stable/bugfix release (as qemu-1.5.1.diff)
    removed qemu_openpty_raw-helper.patch (included upstream)
  * configure-explicitly-disable-virtfs-if-softmmu=no.patch -- do not
    build virtfs-proxy-helper stuff if not building system emulator
    (fix FTBFS on s390)
  * disable gtk ui and build dependencies, as it adds almost nothing
    compared with sdl (well, except bugs and limitations), and has
    lots of additional dependencies (Closes: #710971)
  * remove obsolete /etc/init.d/qemu-kvm (Closes: #712898)
  * fix versions of obsolete qemu-kvm conffiles to be removed
  * provide manpage for obsolete kvm (Closes: #716891, #586973)
  * add --daemonize option to the guest-agent startup script (Closes: #715502)
  * clarify what qemu-guest-agent does (Closes: #714270) and provide
    its json schema as a doc

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 23 Jul 2013 22:39:54 +0400

qemu (1.5.0+dfsg-4) unstable; urgency=medium

  * urgency is medium to make it go faster because, on one hand, we've
    been in unstable for quite a bit longer than needed already and
    have nothing but (build) fixes in there, but on the other hand
    we're holding migration of other packages which are waiting for
    us, again, for too long already
  * added qemu_openpty_raw-helper.patch - a cleanup patch submitted upstream
    which removes #include <termios.h> from common header and hence works
    around FTBFS problem on debian sparc where somehow, <termios.h> conflicts
    with <linux/termio.h>.

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 06 Jun 2013 01:50:32 +0400

qemu (1.5.0+dfsg-3) unstable; urgency=low

  * fix sections: misc => otherosfs
  * remove obsolete conffiles (kvm-ifup, kvm-ifdown, target-x86_64.conf)
    from /etc/kvm/ in qemu-kvm (Closes: #710328)
  * rework debian/rules a bit, to build various bits depending on
    which packages are requested, not depending on ad-hoc host/arch
    logic
  * do not fail at install if kvm module loading failed on x86 or
    if modprobe isn't installed (Closes: #710496)
  * also suggest kmod to be able to load x86 kvm modules
  * suggest sgabios for qemu-system-x86 and put a symlink to sgabios.bin
    (Closes: #696985)
  * add rules to build just one of arch/indep parts, to make
    buildd log scanner happier (E-binary-arch-produces-all)
  * use verbose build by default (V=1) and let it to be overridden

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 02 Jun 2013 01:49:47 +0400

qemu (1.5.0+dfsg-2) unstable; urgency=low

  * merged development history of wheezy and experimental branches.
    Now the history is ordered by version, but is not chronological.
    As a base we now have wheezy (1.1.2+dfsg-6a) version.
  * removed trailing whitespaces from changelog file
  * run dh_installinit properly (Closes: #709199)
  * run dh_installman (Closes: #709241)
  * remove build-dependendy on texi2html, upstream switched to makeinfo

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 28 May 2013 10:48:41 +0400

qemu (1.5.0+dfsg-1) unstable; urgency=low

  * update to 1.5.0 (Closes: #707732)
  * upload to unstable
  * mention that 1.5 closes #697641 and #705544
  * bump dependency on openbios (openbios-ppc for qemu-system-ppc,
    openbios-sparc for qemu-system-sparc) from 1.0+svn1060 to 1.1
    (Closes: #707727)
  * bump dependency on seabios to be >= 1.7.2-2
  * add retry-pxe-after-efi.patch to try pxe-XXXX.rom after unsuccessfully
    trying efi-XXXX.rom - this is for NICs, until pxe-qemu package will be
    able to provide necessary efi-XXXX.rom files.
  * add (versioned) dependency on libusb-1.0 now when the right version
    is available in debian
  * use-fixed-data-path.patch: do not try to derive data path from
    executable location, always use /usr/share/qemu

 -- Michael Tokarev <mjt@tls.msk.ru>  Tue, 21 May 2013 00:49:47 +0400

qemu (1.5.0~rc0+dfsg-1) experimental; urgency=low

  * update to new upstream release candidate (1.5.0-rc0)
    (Closes: #697641, #705544)
  * remove --audio-card-list
  * added new moxie system target
  * added new linux-user targets: mips64 mips64el mipsn32 mipsn32el
  * add libgtk2 and libvte to dependencies (new UI)
  * added libssh2 to dependencies (new block device)
  * s/libvdeplug2-dev/libvdeplug-dev/
  * define localstatedir (for guest-agent)

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 08 May 2013 01:01:01 +0400

qemu (1.4.0+dfsg-2exp) experimental; urgency=low

  [ Michael Tokarev ]
  * set qemu-kvm priority to extra
  * fix distribution field in last qemu-system.NEWS entry
  * bump Standards-Version to 3.9.4 (no changes needed)
  * fix update-rc.d args for qemu-system-x86
  * pre-Depend on adduser for qemu-system-common (Closes: #700840)
  * move guest agent binary (qemu-ga) to /usr/sbin
  * add versioned build-depends on libspice-protocol-dev (>= 0.12.3)
  * refresh qemu-ifunc-sparc.patch, use proper submission from patchwork
    (sparc-linux-user-fix-missing-symbols...) instead.
  * apply 1.4.1 upstream stable patch
  * release as 1.4.0

  [ Aurelien Jarno ]
  * debian/rules: don't build spapr-rtas.bin from .hex file.
  * qemu-system-ppc: add a depends on qemu-slof and add the corresponding
    links (Closes: #686979).

 -- Michael Tokarev <mjt@tls.msk.ru>  Thu, 18 Apr 2013 14:45:30 +0400

qemu (1.4.0+dfsg-1exp) experimental; urgency=low

  [ Michael Tokarev ]
  * 1.4.0 final release
  * remove fix-virtio-net-for-win-guests.patch (upstream now has better fix)
  * fix debian/control arch fields. Build-Depends: foo [bar]
    means foo will be selected for build on LINUX-bar, not any-bar.
    So stop using [bar], always use [linux-bar] or [any-bar],
    as appropriate.  This fix spice and xen (non)selection on
    kfreebsd-{i386,amd64}.
  * fix manpage "links" generation (man qemu-system-* was broken)
  * change Vcs fields to point to anonscm.debian.org (lintian)
  * add a check for (lxc) container to qemu-system-x86 initscript

  [ Steve Langasek ]
  * Pass --enable-uname-release=2.6.32 for the user emulation builds, so that
    we have a sensible baseline kernel value regardless of what the
    underlying host kernel is.  This makes eglibc happier when running under
    emulation on a very old kernel for instance (whose host syscall ABI has
    nothing to do with what emulated syscalls are supported), and probably
    also lets us steer clear for the moment of code that has problem with
    the new kernel upstream versioning convention.  LP: #921078.

 -- Michael Tokarev <mjt@tls.msk.ru>  Sat, 16 Feb 2013 12:34:54 +0400

qemu (1.4.0~rc0+dfsg-1exp) experimental; urgency=low

  * new upstream 1.4.0-rc0 (first release candidate).
    (Closes: #549195)
  * remove patches included upstream:
    e1000-discard-oversized-packets-based-on-SBP_LPE.patch
    link-seccomp-only-with-softmmu-targets.patch
    revert-serial-fix-retry-logic.patch
    savevm.c-cleanup-system-includes.patch
  * refresh qemu-ifunc-sparc.patch
  * add fix-virtio-net-for-win-guests.patch bandaid to make virtio-net
    in windows guest to work again
  * don't install virtfs-proxy-helper in its own subdir in /usr/bin
  * add qemu-io manpage.  Thank you Asias He for the work!
    (Closes: #652518)
  * move config options from debian/configure-opts into debian/control,
    to keep list of build-deps & corresponding config flags in one place
  * use initscript from old qemu-kvm package to load kvm modules for
    qemu-system-x86, and clean it up (Closes: #699404)
  * load vhost_net module in the initscript too
  * mention default NIC change in qemu-kvm.NEWS and old conffiles
  * remove mentions of (ubuntu-specific) qemu-common from debian/control
    for now, as it does not help anyway (other changes are needed anyway
    and it is better to keep them in one place)
  * add a (preliminary) qemu-guest-agent startup script
  * qemu-system-x86 break libvirt0 << 1.0, because older versions
    didn't work with qemu 1.3+ correctly

 -- Michael Tokarev <mjt@tls.msk.ru>  Sat, 02 Feb 2013 21:05:28 +0400

qemu (1.3.0+dfsg-5exp) experimental; urgency=low

  * qemu-system-split: split qemu-system into several target-specific packages:
    qemu-system-arm, qemu-system-mips, qemu-system-ppc, qemu-system-sparc,
    qemu-system-x86, and qemu-system-misc, plus qemu-system-common.
    (Closes: #636000)
  * add initial qemu-guest-agent package (just the binary for now,
    no startup script) (Closes: #676959)
  * do not try to install (linux-specific) virtfs-proxy-helper on kfreebsd
  * change order of audio drivers, in particular put pulseaudio (pa) first
  * ship OS-specific qemu-ifup (use trivial ifconfig invocation on kfreebsd)
  * qemu-system replaces qemu-utils due to virtfs-proxy-helper binary
  * chmod +x qemu-ifdown

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 28 Jan 2013 15:05:57 +0400

qemu (1.3.0+dfsg-4exp) experimental; urgency=low

  * install forgotten /etc/qemu-ifdown (dummy, but qemu complains without it)
  * install virtfs-proxy-helper in qemu-system not qemu-utils
  * add qemu-kvm.NEWS mentioning transition from qemu-kvm to qemu-system-x86_64.
  * do not pass -cpu kvm64 to qemu in kvm wrapper script, previous qemu-kvm
    used qemu64 cpu instead - the same as new qemu uses.
  * install kvm wrapper on x86 only, and install it as /usr/bin/kvm not
    /usr/bin/kvm/kvm (Closes: #698736).
  * stop shipping /usr/share/qemu/vapic.bin link (qemu uses kvmvapic.bin)
  * stop shipping /usr/share/qemu/vgabios.bin link (qemu uses vgabios-*.bin)
  * enable all guest audio devices
  * add breaks/replaces/provides/conflicts with kvm (very old package),
    qemu-kvm, and ubuntu's qemu-common.
  * stop caring about old (pre-squeeze) qemu

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 23 Jan 2013 11:08:47 +0400

qemu (1.3.0+dfsg-3exp) experimental; urgency=low

  * add ability to specify os-arch in configure-opts
  * libseccomp is linux-x86 not linux-any
  * e1000-discard-oversized-packets-based-on-SBP_LPE.patch
    CVE-2012-6075 (Closes: #696051)

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 21 Jan 2013 02:54:15 +0400

qemu (1.3.0+dfsg-2exp) experimental; urgency=low

  * qemu-nbd and qemu-io should be installed on kFreeBSD too
  * install qemu-system docs into /usr/share/doc/qemu-system,
    not .../qemu (Closes: #697085)
  * do not depend on ipxe, it does not provide our ROMs
  * move vde2 from Recommends to Suggests, since it isn't
    used often
  * require libspice-server-dev >= 0.12.2 and require it on i386 too,
    enable spice support
  * require libusbredirparser-dev >= 0.6, enable usb-redir
  * enable xen explicitly on amd64|i386
  * enable xfsctl explicitly on linux
  * sort build-deps in debian/control and add comments
  * set permissions of /dev/kvm in qemu-system.postinst
    the same way it is done in old qemu-kvm package
  * set --localstatedir=/var (will be used later by guest agent)
  * bump qemu-system dependency on seabios to 1.7.2
    and add symlinks for acpi-dsdt.aml and q35-acpi-dsdt.aml
  * import qemu-ifup and qemu-ifdown scripts from qemu-kvm,
    and modify qemu-ifup to allow usage of just `ip' command
    from iproute package (if installed) instead of old brctl+ifconfig.
    Add Breaks: for old iproute without bridge controls.
    Add iproute to Recomments, so that the scripts will actually work
    (previous script used sudo which should be in recommends too)
  * enable seccomp (and libseccomp-dev b-d) on linux,
    and add link-seccomp-only-with-softmmu-targets.patch
  * use $(MAKE) not make when building spapr-rtas.bin
  * update debian/watch (new place and new extensions)
  * add qemu-kvm package (transitional, depends on qemu-system),
    and add /usr/bin/kvm wrapper that calls qemu-system-x86_64
    with some arguments to match original qemu-kvm behavour.
    (Closes: #560853)

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 20 Jan 2013 22:12:11 +0400

qemu (1.3.0+dfsg-1~exp3) experimental; urgency=low

  * enable vde on kFreebsd too (no idea why it was disabled)
  * bluez (libbluetooth) is linux-specific
  * savevm.c-cleanup-system-includes.patch: remove excessive #includes
    from savevm.c (fixes FTBFS on kFreebsd due to wrong #include)

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 31 Dec 2012 15:52:23 +0400

qemu (1.3.0+dfsg-1~exp2) experimental; urgency=low

  * mention that 1.3: Closes #622319, #597527, #593547, #660154
  * libcap and libcap-ng are linux-specific
  * include spapr-rtas.bin file in a pre-compiled pseudo-hex-with-assembly
    form in debian/spapr-rtas.hex, "compile" it (using sed magic) in
    build step and compare the result with the actually built binary
    on ppc.  This binary is needed for ppc system emulation (qemu-system-ppc*).
    (Closes: #670909).
  * rename system-build to qemu-build, and merge user-build to qemu-build,
    building qemu-system and qemu-user in one go.  Only qemu-system-static
    is left in separate build dir.  Note that current qemu-user is
    linux-specific, even if qemu has bsd-user targets.
  * add or32 user target
  * debian/configure-opts - list of (possible arch- or os-specific)
    features to enable/disable.  This is in order to ensure we always
    build with specific options enabled and error out if new upstream
    will dislike our dependencies, or if the deps will not work.
    Move config_audio_drv from debian/rules to this file too.
    For now do not explicitly enable xen, spice, usb-redir, since
    these requires some more work.
    Also pass $(QEMU_CONFIGURE_OPTIONS) to qemu configure line,
    to be able to quickly override some options.
  * do not build-depend on sharutils, since no uuencoded binaries
    are shipped anymore
  * do not build-depend on nasm, we don't compile from assembly anymore
  * remove libgpmg1-dev from build-depends.  It was due to #267174,
    because of static link of qemu with libsdl.  Now only qemu-user-static
    is linked statically, and this one does not use libsdl.
  * add myself to uploaders, and remove dm-upload-allowed
  * added main docs to qemu-system package
  * specify --libexecdir=/usr/lib to configure
  * mark all packages as Multi-Arch: foreign
    (at least it is possible to install i386 versions on amd64 arch)
  * replace "flags OC" with "credentials yes" in debian/binfmts/*,
    since that's the format update-binfmts expects to enable setuid
    binaries. (Closes: #683205)
  * build-depend on debhelper 9, and set debian/compat to 9

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 31 Dec 2012 01:40:35 +0400

qemu (1.3.0+dfsg-1~exp1) experimental; urgency=low

  [ Michael Tokarev ]
  * new upstream version (1.3.0)
    (Closes: #676374, #622319, #597527, #593547, #660154)
   - Removed patches included upstream:
     do-not-include-libutil.h.patch
     configure-nss-usbredir.patch
     tcg_s390-fix-ld_st-with-CONFIG_TCG_PASS_AREG0.patch
     net-add--netdev-options-to-man-page.patch
   - update 02_kfreebsd.patch
   - do not build mpc8544ds.dtb
   - include new targets
  * Cleaned up the build system ALOT.  Larger changes:
    - used explicit lists of emulated targets in debian/rules
      and generate everything else from there, instead of repeating
      these lists in lots of places.
    - stop using debian/$pkg.manpages and other auxilary files like this,
      moving eveything to debian/$pkg.install, because with the number
      of packages growing, amount of these small files becomes very
      large and the result is difficult to maintain.
  * ship forgotten target-x86_64.conf in qemu-system.
  * ship virtfs-proxy-helper in qemu-utils.
  * stop shipping tundev.c, since it does not reflect the reality for
    a long time now (Closes: #325761, #325754).
  * re-introduce support parallel build using DEB_BUILD_OPTIONS=parallel=N,
    this time by adding to $MAKEFLAGS instead of passing down to submakes
  * build-depend on libcap-ng-dev (for virtfs-proxy-helper)

  [ Vagrant Cascadian ]
  * Add libcap-dev to Build-Depends to support virtfs-proxy-helper.

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 30 Dec 2012 01:52:21 +0400

qemu (1.1.2+dfsg-6a) unstable; urgency=low

  * reupload to remove two unrelated files slipped in debian/

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 18 Mar 2013 10:09:37 +0400

qemu (1.1.2+dfsg-6) unstable; urgency=low

  * another bugfix for USB, upstream from early days of past-1.1.
    usb-split-endpoint-init-and-reset.patch.  With certain redirected
    to guest USB devices, qemu process may crash:

     usb_packet_complete: Assertion `((&ep->queue)->tqh_first) == p' failed.

    The patch fixes this by de-coupling reset and complete paths.
    Big thanks goes to Joseph Price who found the fix by doing a
    reverse git bisection.
    (Closes: #701926)

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 18 Mar 2013 09:07:24 +0400

qemu (1.1.2+dfsg-5) unstable; urgency=low

  * fix USB regression introduced in 1.1 (Closes: #683983)
    uhci-don-t-queue-up-packets-after-one-with-the-SPD-flag-set.patch
    Big thanks to Peter Schaefer (https://bugs.launchpad.net/bugs/1033727)
    for the help identifying the fix.

 -- Michael Tokarev <mjt@tls.msk.ru>  Mon, 14 Jan 2013 12:20:29 +0400

qemu (1.1.2+dfsg-4) unstable; urgency=medium

  * linux-user-fix-mips-32-on-64-prealloc-case.patch (Closes: #668658)
  * e1000-discard-oversized-packets-based-on-SBP_LPE.patch: the second
    half of the fix for CVE-2012-6075. (Finally Closes: #696051)

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 09 Jan 2013 23:05:17 +0400

qemu (1.1.2+dfsg-3) unstable; urgency=low

  * add build-dependency on libcap-dev [linux-any] to enable virtfs support
    which has been dropped in 1.1. (Closes: #677654)
  * intel_hda-do-not-call-msi_reset-when-only-device-state-needs-resetting.patch
    patch to fix Fixing reset of MSI function in intel-hda virtual device.
    The fix (applied to stable-1.1.1) was partially wrong, as it actually
    added the msi_reset() call to two code paths instead of one as planned.
    Fix this by splitting the function in question into two parts.
    (Closes: #688964)
  * blockdev-preserve-readonly-and-snapshot-states-across-media-changes.patch:
    allow opening of read-only cdrom images/devices (Closes: #686776)
  * ahci-properly-reset-PxCMD-on-HBA-reset.patch: fix windows install on ahci
    (Closes: #696052)
  * e1000-discard-packets-that-are-too-long-if-not-SBP-and-not-LPE.patch:
    discard too long rx packets which may overflow guest buffer
    (Closes: #696051)
  * eepro100-fix-network-hang-when-rx-buffers-run-out.patch:
    fix e100 stall (Closes: #696061)
  * fix possible network stalls/slowness in e1000 device emulation:
    net-notify-iothread-after-flushing-queue.patch
    e1000-flush-queue-whenever-can_receive-can-go-from-false-to-true.patch
    (Closes: #696063)
  * fixes-related-to-processing-of-qemu-s-numa-option.patch:
    fixes numa handling (Closes: #691343)
  * qcow2-fix-avail_sectors-in-cluster-allocation-code.patch:
    fixes data corruption in stacked qcow2 (Closes: #695905)
  * qcow2-fix-refcount-table-size-calculation.patch: another possible
    corruption or crash in qcow2 (Closes: #691569)
  * tap-reset-vnet-header-size-on-open.patch: always ensure tap device is
    in known state initially (Closes: #696057)
  * vmdk-fix-data-corruption-bug-in-WRITE-and-READ-handling.patch:
    possible data corruption bug in vmdk image format (Closes: #696050)

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 16 Dec 2012 23:08:40 +0400

qemu (1.1.2+dfsg-2) unstable; urgency=low

  * remove debian/patches/fix-armhf-prctl.patch, it is included
    upstream in 1.1.0 version and is misapplied since 1.1.0~rc3+dfsg-1.
  * drop -jN passing to downstream makes, as it breaks dpkg-buildpackage -j
    and actually breaks build (Closes: #597524 - said to be fixed in 0.14.1
    but was still present)
  * add revert-serial-fix-retry-logic.patch that restores
    old (semi-)working behavour of a virtual serial port.

 -- Michael Tokarev <mjt@tls.msk.ru>  Wed, 19 Sep 2012 13:54:05 +0400

qemu (1.1.2+dfsg-1) unstable; urgency=low

  [Michael  Tokarev]
  * new upstream stable/bugfix release, fixing a LOT of bugs,
    including CVE-2012-3515 (Closes: #686973, #681985)
  * bump versioned depends of seabios to 1.7.0~, since this version ships
    kvmvapic.bin.
  * ship /usr/share/qemu/qemu-icon.bmp (Closes: #681317)
  * do not build-depend on ceph (librbd-dev librados-dev), since ceph is
    having longstanding issues in wheezy.
  * add tcg_s390-fix-ld_st-with-CONFIG_TCG_PASS_AREG0.patch - upstream fix
    to un-break s390[x] emulation code.  Similar fixes were included for
    other platforms in 1.1.2 changeset.  Without this fix, qemu is basically
    useless on s390.
  * document -netdev option in the manpage, a long-standing omission
    (net-add--netdev-options-to-man-page.patch)

  [Vagrant Cascadian]
  * qemu-system: Add symlinks for extboot.bin, kvmvapic.bin and vapic.bin to
    binaries shipped in seabios. Closes: #678217, #679004.
  * qemu-system: Remove dead link for ne2k_isa.rom, which is not included in
    ipxe. Closes: #679004.
  * qemu-system: Bump versioned openbios-sparc and openbios-ppc Depends to
    1.0+svn1060, to ensure we use at least version which is used by upstream.
    Wheezy already has the right version, but we should not break partial
    upgrades.

 -- Michael Tokarev <mjt@tls.msk.ru>  Sun, 09 Sep 2012 18:52:57 +0400

qemu (1.1.0+dfsg-1) unstable; urgency=low

  [ Vagrant Cascadian ]
  * New upstream release. (Closes: #655604, #655145)

  [ Michael Tokarev ]
  * do-not-include-libutil.h.patch - don't include libutil.h&Co when not
    needed.  Fixes FTBFS on kFreebsd with recent libbsd-dev.
  * drop libbsd-dev support on kFreebsd - no longer needed.
  * do not build USB host support on kFreebsd (qemu uses obsolete,
    now removed, USB API).  Use the same hack/technique as FreeBSD
    qemu port does -- changing HOST_USB to "stub" after configure run.

 -- Vagrant Cascadian <vagrant@debian.org>  Thu, 07 Jun 2012 13:44:26 -0700

qemu (1.1.0~rc3+dfsg-1) experimental; urgency=low

  * New upstream release candidate.
  * debian/patches:
    - Update 02_kfreebsd.
    - Remove dont-block-sigchld, applied upstream.
    - Update configure-nss-usbredir.
    - Update fix-armhf-prctl.
  * debian/rules: Remove --disable-darwin-user from configure, as it is no
    longer present.
  * Apply patch to qemu-make-debian-root to improve argument handling.
    (Closes: #671723). Thanks to Askar Safin.
  * qemu-utils: Add recommends on sharutils, used by qemu-make-debian-root
    (Closes: #660296).
  * Add Build-Depends on libusbredirparser-dev to support usbredir protocol.
  * Add Build-Depends on libbsd-dev for kfreebsd.

 -- Vagrant Cascadian <vagrant@debian.org>  Wed, 30 May 2012 20:24:59 -0700

qemu (1.0.1+dfsg-1) unstable; urgency=low

  [ Aurelien Jarno ]
  * New upstream stable version:
    - remove debian/patches/fix-malta-i8259
    - remove debian/patches/qemu-ifunc-ppc.patch
    - remove debian/patches/x86-fix-cmpxchg.patch

  [ Michael Tokarev ]
  * apply patch to change backticks `` in debian/rules variables
    to $(shell) construct, by Allard Hoeve.  (Closes: #660133)
  * depend on vgabios >= 0.6c-3~ not 0.6c-3, to assist backporting

  [ Hector Oron ]
  * Fix prctl syscall (Closes: #656926, #651083).

  [ Vagrant Cascadian ]
  * Update to Standards-Version 3.9.3, no changes necessary.

 -- Vagrant Cascadian <vagrant@debian.org>  Mon, 05 Mar 2012 13:05:14 -0800

qemu (1.0+dfsg-3) unstable; urgency=low

  [ Aurelien Jarno ]
  * Add a build-depends on libfdt-dev to enable some more emulated machines.
  * Really add binfmt support for s390x.

  [ Michael Tokarev ]
  * Depend on ipxe-qemu | ipxe (<< 1.0.0+git-20120202.f6840ba-2)
    after ipxe package split.  This will probably need to be changed
    to just ipxe-qemu once it will be landed properly.

  [ Vagrant Cascadian ]
  * Apply patch to use dpkg-buildflags (Closes: #656276).
    Thanks to Moritz Muehlenhoff.

 -- Vagrant Cascadian <vagrant@debian.org>  Mon, 06 Feb 2012 17:56:15 -0800

qemu (1.0+dfsg-2) unstable; urgency=low

  [ Aurelien Jarno ]
  * Add patch from upstream to fix cmpxchg on x86.
  * Add patch to not link user builds with NSS (Closes: #648202).
  * Add binfmt support for s390x.
  * Bump depends on openbios-ppc and openbios-sparc on versions
    compatible with version 1.0.
  * Build on s390x (Closes: #651048).

  [ Vagrant Cascadian ]
  * qemu-make-debian-root: Fix argument processing to handle when both -s and
    -k are specified. Thanks to Mats Erik Andersson (Closes: #638047).
  * Add Patch from upstream to fix regression on malta with i8259 interrupts.
  * qemu-debootstrap: Add support for armhf and s390x.
  * debian/rules: remove config.log in the clean target.
  * qemu-make-debian-root: Use debootstrap's minbase variant, instead of a
    long list of excludes.

 -- Vagrant Cascadian <vagrant@debian.org>  Mon, 09 Jan 2012 16:01:17 -0800

qemu (1.0+dfsg-1) experimental; urgency=low

  * New upstream version.
  * Add build-dep on libxen-dev to enable xen support.
  * Add build-dep on libiscsi-dev to enable iscsi support.
  * Add patch from upstream to not block SIGCHLD (Closes: #618743).

 -- Vagrant Cascadian <vagrant@debian.org>  Fri, 30 Dec 2011 16:12:03 -0800

qemu (1.0~rc4+dfsg-1) experimental; urgency=low

  * New upstream version:
    - Fixes CVE-2011-4111.
  * remove patches applied upstream:
    - security/leftover.patch
    - Move_QEMU_INCLUDES_before_QEMU_CFLAGS
    - runnning-typo.patch
  * Install new qemu-system variants:
    xtensa, xtensaeb, alpha
  * debian/rules: Drop hack to rename "qemu" binary to "qemu-system-i386", as
    upstream now does the same.
  * Enable spice support on amd64:
    - Add Build-Depends: libspice-server-dev, libspice-protocol-dev
  * debian/rules: use dh_prep instead of "dh_clean -k", which is deprecated.
  * qemu-system: Bump dependency on seabios to 1.6.3~.

 -- Vagrant Cascadian <vagrant@debian.org>  Mon, 28 Nov 2011 23:40:24 -0800

qemu (0.15.1+dfsg-3) unstable; urgency=low

  * Add patch from upstream to fix FTBFS on ia64.

 -- Vagrant Cascadian <vagrant@debian.org>  Fri, 09 Dec 2011 23:48:21 -0800

qemu (0.15.1+dfsg-2) unstable; urgency=low

  * Add patch that fixes a buffer overrun (CVE-2011-4111).
  * Enable spice support on amd64:
    - Add Build-Depends: libspice-server-dev, libspice-protocol-dev
  * debian/rules: Use dh_prep instead of "dh_clean -k", which is deprecated.

 -- Vagrant Cascadian <vagrant@debian.org>  Mon, 28 Nov 2011 20:34:50 -0800

qemu (0.15.1+dfsg-1) unstable; urgency=low

  * New upstream version.

 -- Vagrant Cascadian <vagrant@debian.org>  Sun, 06 Nov 2011 10:37:31 -0800

qemu (0.15.0+dfsg-1) unstable; urgency=low

  * New upstream version.
  * Install new qemu-system, qemu-user and qemu-user-static variants:
    lm32, microblazeel, s390x, unicore32
  * Patch from upstream to set QEMU_INCLUDES before QEMU_CFLAGS.
  * Update debian/watch to check http://qemu.org/download.

 -- Vagrant Cascadian <vagrant@debian.org>  Mon, 03 Oct 2011 12:29:18 -0700

qemu (0.15.0~rc2+dfsg-1) experimental; urgency=low

  * New upstream version.
  * qemu-debootstrap: Return the exit status of debootstrap instead of
    hard-coding a sucessful exit status.
  * Build-depend on librbd-dev.
  * Remove qemu-mipsel-debian-rootfs.patch, a variation was applied upstream.
  * Remove pcnet-ipxe patch, applied upstream.
  * Add Build-Depends on python.
  * Rename pxe rom symlinks to match upstream rename.

 -- Vagrant Cascadian <vagrant@debian.org>  Sun, 07 Aug 2011 13:27:43 +0200

qemu (0.14.1+dfsg-3) unstable; urgency=low

  [ Aurelien Jarno ]
  * Add patches/qemu-ifunc-ppc.patch and patches/qemu-ifunc-sparc.patch
    to fix FTBFS on ppc and sparc.

  [ Vagrant Cascadian ]
  * Apply patch to fix qemu-user-static mipsel emulation (Closes: #562887).
  * Drop support for esd (Closes: #633390). Thanks to Adrian Bunk.
  * Add dummy debian/rules build-indep/build-arch targets to resolve lintian
    warnings and future policy requirements.
  * Remove needless mention of "Author(s)" which triggers a lintian warning.
  * Fix maintainer-script-without-set-e lintian checks.
  * Fix hyphen-used-as-minus-sign lintian check for qemu-debootstrap manpage.

 -- Vagrant Cascadian <vagrant@debian.org>  Sat, 23 Jul 2011 10:18:37 +0200

qemu (0.14.1+dfsg-2) unstable; urgency=low

  * Add override for qemu-user-static binaries which embed needed libraries.
  * Add qemu-debootstrap manpage.
  * Add patch to fix typo in qemu-system-* (runnning -> running).
  * Update to Standards-Version 3.9.2, no changes necessary.

 -- Vagrant Cascadian <vagrant@debian.org>  Sat, 02 Jul 2011 22:29:17 -0700

qemu (0.14.1+dfsg-1) unstable; urgency=low

  * New upstream version.
  * Depend on ipxe instead of etherboot-qemu.
  * Add pcnet-ipxe.patch from upstream to fix ipxe with pcnet nic.
  * Add symlink for network boot with eepro100 cards (i82551, i82557b,
    i82559er).
  * Drop 01_rdb.patch, applied upstream.
  * Add support for building on armhf architecture.
  * Support debootstrap options that require arguments in qemu-debootstrap.
    Thanks to Stefano Rivera for the patch. Closes: #605660.

 -- Vagrant Cascadian <vagrant@debian.org>  Fri, 01 Jul 2011 22:49:40 -0700

qemu (0.14.0+dfsg-5.1) unstable; urgency=low

  * Non-maintainer upload.
  * Replace "librados1-dev" by "librados-dev" in Build-Dependencies.

 -- Mehdi Dogguy <mehdi@debian.org>  Fri, 29 Apr 2011 17:45:05 +0200

qemu (0.14.0+dfsg-5) unstable; urgency=low

  * Don't register qemu-mips(el) with binfmt on mips(el).  Closes:
    #618369.

 -- Aurelien Jarno <aurel32@debian.org>  Thu, 17 Mar 2011 20:13:27 +0100

qemu (0.14.0+dfsg-4) unstable; urgency=low

  * Reupload without automatically generated patch
    debian-changes-0.14.0+dfsg-3.

 -- Aurelien Jarno <aurel32@debian.org>  Mon, 28 Feb 2011 15:10:04 +0100

qemu (0.14.0+dfsg-3) unstable; urgency=low

  [ Aurelien Jarno ]
  * Depends on vgabios (>= 0.6c-3) and add symlinks for qxl, stdvga and
    vmware bioses.  Closes: #614252, #614169.
  * Tighten build-depends on linux-libc-dev to (>= 2.6.34), to get
    vhost-net support.
  * Build-depends on xfslibs-dev in order to get TRIM support on XFS
    filesystems.
  * Build-depends on librados1-dev to get rdb support.  Closes: #614150.

 -- Aurelien Jarno <aurel32@debian.org>  Mon, 28 Feb 2011 09:06:00 +0100

qemu (0.14.0+dfsg-2) unstable; urgency=low

  [ Aurelien Jarno ]
  * Tighten dependencies on openbios-ppc, openbios-sparc and seabios to
    the versions in upstream 0.14.0.
  * patches/02_kfreebsd.patch: don't consider futimens/utimensat available
    if it is a stub.

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 20 Feb 2011 00:36:20 +0100

qemu (0.14.0+dfsg-1) unstable; urgency=low

  [ Vagrant Cascadian ]
  * New upstream release candidate version.
  * qemu-user-static:
    - Drop binfmt support for emulating amd64 on i386, as it is broken and
      including it interferes with environments capable of running amd64
      natively.  Closes: #604712.
    - Remove binfmt support for installed targets in postinst before installing
      supported targets, to ensure no-longer-supported targets are actually
      removed.
    - Remove binfmt support for installed targets in prerm.

  [ Aurelien Jarno ]
  * Fix configuration files directory.  Closes: #600735.
  * Enable AIO support.

  [ Vagrant Cascadian ]
  * Update debian/copyright to refer to upstream git repositry and clarify
    which binary blobs are removed to make the dfsg-free tarball.
  * Refresh debian/patches/security/leftover.patch.

 -- Vagrant Cascadian <vagrant@debian.org>  Fri, 18 Feb 2011 21:07:01 -0800

qemu (0.13.0+dfsg-2) experimental; urgency=low

  * Fix Build-Depends to exclude kfreebsd-any wildcards where appropriate.
    Thanks to Jon Severinsson. Closes: #592215

 -- Vagrant Cascadian <vagrant@debian.org>  Sun, 24 Oct 2010 09:02:27 -0700

qemu (0.13.0+dfsg-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * mips/mipsel binfmt registration: also match EI_ABIVERSION=1, used by
    OpenWRT. Closes: #591543.
  * Build-depends on libattr1-dev to enable VirtFS (9p) support. Closes:
    #592215.
  * Use architecture wildcards instead of explicit architecture list.

  [ Vagrant Cascadian ]
  * Switch to source format 3.0 (quilt).
  * New upstream version.
  * Drop 99_stable.diff, applied in new upstream version.
  * debian/watch: update to properly handle upstream rc versions.

 -- Vagrant Cascadian <vagrant@debian.org>  Mon, 18 Oct 2010 10:22:44 -0700

qemu (0.13.0~rc0+dfsg-2) experimental; urgency=low

  [ Aurelien Jarno ]
  * Add ia64 to the list of supported architectures.
  * Bump Standards-Version to 3.9.1 (no changes).
  * Update seabios, openbios-ppc and openbios-sparc dependencies.
  * Add 99_stable.diff to update from the stable-0.13 branch:
    - Fix sparc FTBFS. Closes: #591249.
  * Add qemu-debootstrap from Loïc Minier in qemu-static. Closes:
    #572952.

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 03 Aug 2010 07:25:06 +0200

qemu (0.13.0~rc0+dfsg-1) experimental; urgency=low

  * New upstream release candidate version.
  * Do not configure audio drivers for qemu-user and qemu-user-static targets.
  * Remove patches:
    - 05_bochs_vbe, applied upstream.
    - 06_sh4, applied upstream.
    - 03_support_pselect_in_linux_user_arm, upstream implemented a simpler
      workaround.
  * Add Build-Depends on texinfo.
  * Drop libqemu-dev package.

 -- Vagrant Cascadian <vagrant@debian.org>  Thu, 29 Jul 2010 19:51:01 -0400

qemu (0.12.5+dfsg-3) unstable; urgency=medium

  * qemu-user-static:
    - Drop binfmt support for emulating amd64 on i386, as it is broken and
      including it interferes with environments capable of running amd64
      natively.  Closes: #604712.
    - Remove binfmt support for installed targets in postinst before installing
      supported targets, to ensure no-longer-supported targets are actually
      removed.
    - Remove binfmt support for installed targets in prerm.

 -- Vagrant Cascadian <vagrant@debian.org>  Sun, 28 Nov 2010 15:57:11 -0800

qemu (0.12.5+dfsg-2) unstable; urgency=low

  * mips/mipsel binfmt registration: also match EI_ABIVERSION=1, used by
    OpenWRT. Closes: #591543.
  * Update 99_stable.diff from the stable branch:
    - Fix windows XP boot with libvirt. Closes: bug#579166.

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 17 Aug 2010 12:56:30 +0200

qemu (0.12.5+dfsg-1) unstable; urgency=low

  * New upstream stable version.
  * qemu-system: don't suggests kqemu-source.  Closes: bug#589217.
  * qemu-keymaps: fix short description.

 -- Aurelien Jarno <aurel32@debian.org>  Fri, 23 Jul 2010 19:02:14 +0200

qemu (0.12.4+dfsg-4) unstable; urgency=high

  * Update debian/copyright.  Closes: bug#588911.
  * Update 99_stable.diff from the stable branch:
    - Add documentation for the stdio signal option. Closes: bug#588514.
  * Split out keymaps in the qemu-keymaps package.  Closes: bug#559174.
  * Bump Standards-Version to 3.9.0 (no changes).

 -- Aurelien Jarno <aurel32@debian.org>  Wed, 14 Jul 2010 15:13:04 +0200

qemu (0.12.4+dfsg-3) unstable; urgency=low

  * Update 99_stable.diff from the stable branch.

 -- Aurelien Jarno <aurel32@debian.org>  Wed, 16 Jun 2010 23:07:36 +0200

qemu (0.12.4+dfsg-2) unstable; urgency=low

  [ Vagrant Cascadian ]
  * qemu-system: Depend on etherboot-qemu package for PXE roms.
    Closes: #552406.

  [ Aurelien Jarno ]
  * Add 99_stable.diff to update from the stable branch.
  * Use --with-pkgversion to set the packaging version.

 -- Aurelien Jarno <aurel32@debian.org>  Wed, 02 Jun 2010 21:24:26 +0200

qemu (0.12.4+dfsg-1) unstable; urgency=low

  * New upstream stable version:
    - remove debian/patches/01_redir_doc.patch
    - remove debian/patches/04_cmd646.patch
    - update debian/patches/06_sh4.diff

 -- Aurelien Jarno <aurel32@debian.org>  Fri, 07 May 2010 19:43:48 +0200

qemu (0.12.3+dfsg-4) unstable; urgency=low

  * Add 05_bochs_vbe.diff backported from uptream to support vgabios
    0.6c.
  * Add 06_sh4.diff containing a few SH4 specific fixes backported from
    upstream.

 -- Aurelien Jarno <aurel32@debian.org>  Fri, 09 Apr 2010 01:44:38 +0200

qemu (0.12.3+dfsg-3) unstable; urgency=low

  * Add symlink for seabios's multiboot.bin.
  * Change configure-stamp depends to non-phony target $(QUILT_STAMPFN).
    Closes: #574444.
  * Fix a crash in cmd646 bmdma code that can be triggered by the guest.
    Closes: #574539.
  * Explain that KQEMU support has been removed in qemu-system.NEWS.
  * Build-Conflicts with oss4-dev, as this package install a broken
    <linux/soundcard.h> header. Closes: #575320.

 -- Aurelien Jarno <aurel32@debian.org>  Sat, 03 Apr 2010 17:07:23 +0200

qemu (0.12.3+dfsg-2) unstable; urgency=low

  [ Aurelien Jarno ]
  * Disable KVM support on PowerPC, as it needs at least 2.6.33 kernel
    headers.

  [ Vagrant Cascadian ]
  * Support pselect for linux-user arm target. Patch by Michael Casadevall.
  * Add symlink for seabios's linuxboot.bin to fix -kernel option. Thanks to
    Sami Liedes. Closes: #574174.
  * qemu-system: Switch back to using versioned dependencies for vgabios,
    bochsbios, openhackware, openbios-ppc and openbios-sparc rather than
    recommends/conflicts, to ensure a proper upgrade path. Closes: #573397.
    Reopens: #436094.

 -- Vagrant Cascadian <vagrant@debian.org>  Fri, 19 Mar 2010 09:31:29 -0700

qemu (0.12.3+dfsg-1) unstable; urgency=low

  [ Vagrant Cascadian ]
  * New upstream version:
    - Fix access to block devices on GNU/kFreeBSD. Closes: #558447.
    - Correctly update clock when waking up from sleep. Closes: #414165.
    - Slirp works with other network interfaces. Closes: #407702.
    - Add the possibility to specify a host to bind to with the -redir
      option. Closes: #366847.
    - Fix cirrus graphics card with windows 98. Closes: #522124.
  * Indicate repackaged upstream tarball by adding "+dfsg" to the version.
    Closes: #388740.
  * Remove second libgnutls-dev from build depends.
  * Update debian/watch with current location of tarball releases.
  * Drop binutils-gold patch, applied upstream.
  * Switch from bochsbios to seabios. Update bios.bin symlink and
    recommends/conflicts.
  * Bump Standards-Version to 3.8.4 (no changes).
  * Update my email address to vagrant@debian.org.

  [ Aurelien Jarno ]
  * Create a kvm group in postinst and set the group of /dev/kvm to kvm.
    Closes: #570544.
  * Add mips and mipsel to the list of supported architectures.
  * Add patches/01_redir_doc.patch to fix a mistake in the redirection
    documentation.
  * Add patches/02_kfreebsd.patch to use the legacy USB stack on
    GNU/kFreeBSD.
  * Force the depends from qemu on qemu-system, qemu-user and qemu-utils
    to (>= {source:Version}).
  * Update openbios related conflicts.

 -- Vagrant Cascadian <vagrant@debian.org>  Sun, 07 Mar 2010 09:20:43 -0800

qemu (0.11.1-2) unstable; urgency=low

  * Add versioned build-depends on etherboot.
  * Add PXE boot support for virtio network adapters.
  * Move qemu-make-debian-root to qemu-utils package, as it only produces disk
    images not useable by qemu-user. Lower recommends on debootstrap to
    suggests. Add Conflicts and Replaces on older versions of qemu-user.
  * Register /usr/bin/qemu with the alternatives system. Closes: #413840.
  * qemu: Add ${misc:Depends} so that debhelper can add dependencies if needed.

 -- Vagrant Cascadian <vagrant@freegeek.org>  Fri, 08 Jan 2010 09:26:11 -0800

qemu (0.11.1-1) unstable; urgency=low

  [ Aurelien Jarno ]
  * New upstream version.
  * Drop build-depends on libfreebsd-dev on GNU/kFreeBSD.
  * qemu: suggests qemu-user-static.
  * qemu-user-static: register QEMU with binfmt mecanism. Closes:
    #306637.
  * Bump conflicts on openbios-ppc to (<< 1.0+svn505-1).
  * Add 01-binutils-gold.diff to fix FTBFS with binutils-gold. Closes:
    #556301.
  * Add sparc64 support.
  * Use new roms location in etherboot package.

  [ Vagrant Cascadian ]
  * qemu-utils, qemu-user, qemu-system: Set both Conflicts and Replaces for
    older versions of qemu to ensure proper upgrade path.
  * Add versioned build-dep on linux-libc-dev to ensure that KVM support is
    enabled.
  * qemu-system: Lower dependencies on vgabios, bochsbios, openhackware,
    openbios-ppc and openbios-sparc to recommends. Conflict with versions that
    are incompatible. Closes: #436094.
  * qemu-utils: Tighten the versioned conflicts with kvm, as not all older
    versions actually conflict.
  * qemu-make-debian-root: Apply modified patch from Nicolas Boulenguez that
    documents usage of -s, exits on error, and mentions that it is normally
    run as root. Closes: #447034.

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 27 Dec 2009 12:09:11 +0100

qemu (0.11.0-6) unstable; urgency=low

  * Update from stable-0.11 branch.
  * qemu-utils: add Replaces: qemu (<< 0.11.0-2). Closes: #556627,
    #556860.

 -- Aurelien Jarno <aurel32@debian.org>  Fri, 20 Nov 2009 08:24:32 +0100

qemu (0.11.0-5) unstable; urgency=low

  * Change the Conflicts: into Replaces: to handle the move of /etc/ifup
    from one package to another correctly. Tighten the version. Closes:
    #556627.

 -- Aurelien Jarno <aurel32@debian.org>  Wed, 18 Nov 2009 16:30:39 +0000

qemu (0.11.0-4) unstable; urgency=low

  [ Aurelien Jarno ]
  * Update from stable-0.11 branch.
  * Default to alsa before OSS. Closes: #451234.

  [ Vagrant Cascadian ]
  * Updated Vcs-Git to a url more likely to work with debcommit.

 -- Aurelien Jarno <aurel32@debian.org>  Wed, 18 Nov 2009 16:26:17 +0100

qemu (0.11.0-3) unstable; urgency=low

  * qemu-system, qemu-user: fix conflicts version. Closes: #556627.
  * qemu-utils: conflicts with kvm (<= 85+dfsg-4.1), as it also provides
    qemu-io.

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 17 Nov 2009 09:49:24 +0100

qemu (0.11.0-2) unstable; urgency=low

  * Update from stable-0.11 branch.
  * Move qemu-user.1 and qemu-make-debian-root.8 to the qemu-user
    package.
  * Add build-depends on uuid-dev.
  * Use a specific install file for qemu-utils on GNU/kFreeBSD.
  * Call dh_install with -s.

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 17 Nov 2009 09:11:29 +0100

qemu (0.11.0-1) unstable; urgency=low

  [ Aurelien Jarno ]
  * New upstream version.
    - Documents virtio NIC. Closes: #541182.
    - Increase the maximum TCG op a target instruction op can expand to.
      Closes: #530645, #542297.
    - KVM is enabled by default. Closes: #520894.
    - Fix CVE-2009-3616.  Closes: #553589.
  * Drop 65_kfreebsd.patch.
  * Split the qemu package and use out of tree building. Based on a patch
    from Vagrant Cascadian. Closes: #524774.
  * Only recommends debootstrap for qemu-user and qemu-user static. Closes:
    #543356.
  * Remove /usr/share/qemu/proll.elf. Closes: bug#542247.
  * Add build-depends on libcurl4-gnutls-dev, libgnutls-dev and libsasl2-dev
    to enable new upstream features.
  * Bump Standards-Version to 3.8.3 (no changes).
  * Update Vcs-* fields to point to the new git repository.
  * Add Vagrant Cascadian <vagrant@freegeek.org> to uploaders, and set
    DM-Upload-Allowed to yes.

 -- Aurelien Jarno <aurel32@debian.org>  Mon, 26 Oct 2009 10:17:57 +0000

qemu (0.10.50+git20090729-1) experimental; urgency=low

  [ Josh Triplett ]
  * Remove myself from Uploaders.

  [ Riku Voipio ]
  * new upstream RC version
  * nuke all linux-user patches (applied upstream)
    06_exit_segfault
    12_signal_powerpc_support
    21_net_soopts
    30_syscall_ipc
    32_syscall_sysctl
    35_syscall_sockaddr
    48_signal_terminate
    55_unmux_socketcall
  * nuke all other applied-upstream patches
    01_nostrip (better version upstream)
    07_i386_exec_name (can be reintroduced in debian/rules)
    50_linuxbios_isa_bios_ram (shouldn't be needed anymore)
    51_linuxbios_piix_ram_size (applied)
    56_dhcp (crap)
    60_ppc_ld (reintroduce if needed)
    64_ppc_asm_constraints (ditto)
    66_tls_ld.patch (ditto)
    81_compile_dtb.patch (applied upstream)
    82_qemu-img_decimal (ditto)
  * move to git
  * simplify build rules
  * Correct my email address

 -- Riku Voipio <riku.voipio@iki.fi>  Wed, 29 Jul 2009 13:28:05 +0300

qemu (0.10.6-1) unstable; urgency=low

  [ Josh Triplett ]
  * Remove myself from Uploaders.

  [ Aurelien Jarno ]
  * New upstream version.
  * Bump Standards-Version to 3.8.2 (no changes).
  * Update debian/watch (closes: bug#538781).

 -- Aurelien Jarno <aurel32@debian.org>  Fri, 31 Jul 2009 15:25:36 +0200

qemu (0.10.5-1) unstable; urgency=low

  * New upstream version.

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 24 May 2009 16:15:35 +0200

qemu (0.10.4-1) unstable; urgency=low

  * New upstream version.
  * debian/NEWS.Debian: new file, describing the cache policy options
    (closes: bug#526832).
  * debian/patches/70_versatile_memsize.patch: new patch to set a upper
    limit on the memory size of the versatile boards (closes:
    bug#527264).

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 12 May 2009 18:31:29 +0200

qemu (0.10.3-1) unstable; urgency=low

  * New upstream version.
  * Tighten dependency on bochsbios.

 -- Aurelien Jarno <aurel32@debian.org>  Sat, 02 May 2009 10:14:21 +0200

qemu (0.10.2-2) unstable; urgency=low

  * Add missing comma in build-depends (closes: bug#524207).
  * Tighten dependency on vgabios.

 -- Aurelien Jarno <aurel32@debian.org>  Wed, 15 Apr 2009 22:30:43 +0200

qemu (0.10.2-1) unstable; urgency=low

  [ Aurelien Jarno ]
  * New upstream stable release.

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 07 Apr 2009 07:37:15 +0200

qemu (0.10.1-1) unstable; urgency=low

  [ Aurelien Jarno ]
  * New upstream stable release:
    - patches/80_stable-branch.patch: remove.
  * debian/control:
    - Remove depends on proll.
    - Move depends on device-tree-compiler to build-depends.
    - Bump Standards-Version to 3.8.1 (no changes).
  * patches/82_qemu-img_decimal.patch: new patch from upstream to make
    qemu-img accept sizes with decimal values (closes: bug#501400).

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 22 Mar 2009 10:13:17 +0100

qemu (0.10.0-1) unstable; urgency=low

  [ Aurelien Jarno ]
  * New upstream release:
    - Fix fr-be keyboard mapping (closes: bug#514462).
    - Fix stat64 structure on ppc-linux-user (closes: bug#470231).
    - Add a chroot option (closes: bug#415996).
    - Add evdev support (closes: bug#513210).
    - Fix loop on symlinks in user mode (closes: bug#297572).
    - Bump depends on openbios-sparc.
    - Depends on openbios-ppc.
    - Update 12_signal_powerpc_support.patch.
    - Update 21_net_soopts.patch.
    - Drop 44_socklen_t_check.patch (merged upstream).
    - Drop 49_null_check.patch (merged upstream).
    - Update 64_ppc_asm_constraints.patch.
    - Drop security/CVE-2008-0928-fedora.patch (merged upstream).
    - Drop security/CVE-2007-5730.patch (merged upstream).
  * patches/80_stable-branch.patch: add patches from stable branch:
    - Fix race condition between signal handler/execution loop (closes:
      bug#474386, bug#501731).
  * debian/copyright: update.
  * Compile and install .dtb files:
    - debian/control: build-depends on device-tree-compiler.
    - debian/patches/81_compile_dtb.patch: new patch from upstream.
    - debian/rules: compile and install bamboo.dtb and mpc8544.dtb.

 -- Aurelien Jarno <aurel32@debian.org>  Sat, 07 Mar 2009 06:20:34 +0100

qemu (0.9.1+svn20090104-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
  * Disable security/CVE-2008-0928-fedora.patch, it still breaks qcow
    format.

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 04 Jan 2009 16:31:40 +0100

qemu (0.9.1+svn20081223-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - Fix CVE-2008-2382
  * Update patches/48_signal_terminate.patch.
  * debian/rules: remove upstream flags from CFLAGS.

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 23 Dec 2008 14:51:25 +0100

qemu (0.9.1+svn20081214-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - Fix jmp im on x86_64 when executing 32-bit code. Fix grub
      installation (Closes: bug#467148).

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 14 Dec 2008 23:26:04 +0100

qemu (0.9.1+svn20081207-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - Do not depend on gcc-3.4 anymore (Closes: bug#440425, bug#463066).
    - Fix broken display introduced by CVE-2007-1320 (Closes: bug#422578).
  * debian/control: remove build-dependency on gcc-3.4.
  * debian/rules: remove code for dyngen targets.
  * Split 90_security.patch into
    - security/CVE-2007-5730.patch
    - security/leftover.patch
  * Replace 91_security.patch by security/CVE-2008-0928-fedora.patch taken
    from fedora repository and enable it (Closes: #469649).

  [ Riku Voipio ]
  * 2 patches gone, 19 to go:
    - 10_signal_jobs.patch: drop, merged upstream
    - 11_signal_sigaction.patch: drop, merged upstream
    - series: update

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 07 Dec 2008 19:40:09 +0100

qemu (0.9.1+svn20081128-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - Include documentation for network downscript option (Closes:
      bug#506994).
    - Drop 00_bios.patch and pass --disable-blobs instead.
    - Update 12_signal_powerpc_support.patch.

  [ Riku Voipio ]
  * Drop 31_syscalls.patch as it makes no sense using host uselib to
    load target code into qemu's host memoryspace.

 -- Aurelien Jarno <aurel32@debian.org>  Sat, 29 Nov 2008 09:04:41 +0100

qemu (0.9.1+svn20081112-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - does not need a disk image anymore (Closes: bug#260935).
    - 53_openbios_size.patch: drop (merged upstream).
    - 90_security: update.
  * debian/control: depend on openbios-sparc (>= 1.0~alpha2+20081109)
    (Closes: bug#502411, bug#502414).

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 09 Nov 2008 14:42:37 +0100

qemu (0.9.1+svn20081101-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - fix a heap overflow in Cirrus emulation (CVE-2008-4539).
    - 50_linuxbios_isa_bios_ram.patch: update.
    - 90_security.patch: update.

 -- Aurelien Jarno <aurel32@debian.org>  Sat, 01 Nov 2008 09:26:45 +0100

qemu (0.9.1+svn20081023-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - 12_signal_powerpc_support.patch: update.
    - 50_linuxbios_isa_bios_ram.patch: update.

 -- Aurelien Jarno <aurel32@debian.org>  Thu, 23 Oct 2008 21:34:26 +0200

qemu (0.9.1+svn20081016-1) experimental; urgency=low

  [ Aurelien Jarno ]
  * New upstream snapshot.
  * patches/31_syscalls.patch: remove parts merged upstream.
  * debian/qemu-make-debian-root:
    - Fix bug introduced when fixing bug#496394 (Closes: bug#502325).

 -- Aurelien Jarno <aurel32@debian.org>  Mon, 13 Oct 2008 23:11:15 +0200

qemu (0.9.1+svn20081012-1) experimental; urgency=low

  [ Riku Voipio ]
  * Add a bunch of patches from scratchbox
    - 44_socklen_t_check work better with badbehavin net apps
    - 48_signal_terminate make qemu binary terminate on signals as expected
    - 49_null_checks don't bother some syscalls when null/zero is passed

  [ Aurelien Jarno ]
  * New upstream snapshot.
    - alpha is now a TCG target.
    - comma has been added to sendkey (closes: bug#414342).
  * patches/31_syscalls.patch: remove parts merged upstream.
  * patches/39_syscall_fadvise64.patch: remove (merged upstream).
  * patches/90_security.patch: remove parts merged upstream.
  * debian/control: build-depends on libbluetooth-dev.

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 12 Oct 2008 18:46:54 +0200

qemu (0.9.1+svn20080905-1) experimental; urgency=low

  * New upstream snapshot.
    - SH4 is now a TCG target.
  * debian/watch: update URL location.

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 02 Sep 2008 01:43:24 +0200

qemu (0.9.1+svn20080826-1) experimental; urgency=low

  * New upstream snapshot.
  * debian/qemu-make-debian-root:
    - Use mktemp instead of $$ to create temporary directories (Closes:
      bug#496394).
  * Ship a libqemu-dev package (Closes: bug#451618).

 -- Aurelien Jarno <aurel32@debian.org>  Tue, 26 Aug 2008 09:55:36 +0200

qemu (0.9.1+svn20080822-1) experimental; urgency=low

  * New upstream snapshot.
    - Focus to monitor to ask password (Closes: bug#473240).
    - TCG SPARC host support (Closes: bug#450817).
    - Check KQEMU availability before allocating memory (Closes: bug#414566).
    - Fix dead keys (Closes: bug#489594).
    - Fix ES1370 emulation (Closes: bug#494462).
    - New USB UHCI implemnation (Closes: bug#457651).
    - Add debian/patches/00_bios.patch.
    - Remove debian/patches/02_snapshot_use_tmpdir.patch (merged).
    - Remove debian/patches/04_do_not_print_rtc_freq_if_ok.patch (merged).
    - Remove patches/05_non-fatal_if_linux_hd_missing.patch (merged).
    - Update debian/patches/07_i386_exec_name.patch
    - Update debian/patches/12_signal_powerpc_support.patch
    - Remove debian/patches/33_syscall_ppc_clone.patch (merged differently).
    - Remove debian/patches/41_arm_fpa_sigfpe.patch (merged).
    - Remove debian/patches/42_arm_tls.patch (merged differently).
    - Update debian/patches/55_unmux_socketcall.patch.
    - Remove debian/patches/63_sparc_build.patch (useless).
    - Update debian/patches/65_kfreebsd.patch.
    - Update debian/patches/66_tls_ld.patch.
    - Remove debian/patches/70_manpage.patch (merged).
    - Remove debian/patches/71_doc.patch  (merged).
    - Remove debian/patches/80_ui_curses.patch (merged).
    - Remove debian/patches/81_mips32r2_fpu.patch (merged).
    - Remove debian/patches/82_mips_abs.patch (merged).
    - Remove debian/patches/83_usb-serial.patch (merged).
    - Remove debian/patches/84_rtl8139.patch (merged).
    - Remove debian/patches/85_vvfat.patch (merged).
    - Remove debian/patches/86_df.patch (merged).
    - Remove debian/patches/87_eoi.patch (merged).
    - Remove debian/patches/88_dma.patch (merged).
    - Remove debian/patches/89_braille.patch (merged).
    - Remove debian/patches/92_no_shutdown.patch (merged).
    - Remove debian/patches/93_tmpfs.patch (merged).
    - Remove debian/patches/94_security.patch (merged).
  * debian/README.source: new file.
  * debian/patches/*: convert to patchlevel 1 (Closes: bug#484963).
  * debian/control:
    - Add build-depends on libesd0-dev.
    - Add build-depends on libpulse-dev.
    - Add build-depends on libvdeplug2-dev.
    - Add build-depends on etherboot.
    - Update list of supported targets (Closes: bug#488339).
    - Suggests kqemu-source.
    - Bump Standards-Version to 3.8.0.
  * debian/links:
    - Add missing manpage symlinks.
  * debian/rules:
    - Enable audio drivers depending on the system.
    - Enable DYNGEN targets depending on the system.
    - Install PXE bios from etherboot (Closes: bug#412010).
    - Don't ignore make clean errors.
    - Don't build DYNGEN targets on kfreebsd-amd64 (Closes: bug#494353).
  * debian/patches/22_net_tuntap_stall.patch: remove (outdated).

 -- Aurelien Jarno <aurel32@debian.org>  Fri, 22 Aug 2008 01:00:54 +0200

qemu (0.9.1-5) unstable; urgency=high

  [ Guillem Jover ]
  * Add Homepage field.
  * Add Vcs-Browser and Vcs-Svn fields.
  * Remove packaging repository information from debian/copyright.
  * Add former package co-maintainers to debian/copyright.
  * Serialize patch and configure steps in debian/rules to support parallel
    builds, as we are patching configure.
  * Remove myself from Uploaders.

  [ Aurelien Jarno ]
  * debian/patches/70_manpage.patch: remove curses documentation, it is already
    in debian/patches/80_ui_curses.patch (Closes: bug#477369).
  * debian/patches/94_security.patch: add format= to drive options
    (CVE-2008-2004).

 -- Aurelien Jarno <aurel32@debian.org>  Mon, 28 Apr 2008 21:54:12 +0200

qemu (0.9.1-4) unstable; urgency=high

  * debian/patches/52_ne2000_return.patch: drop, the patch is wrong.
  * Backports from upstream:
    - Typo in curses_keys.h
    - Documentation for the -curses option
    - Fix broken absoluteness check for cabs.d.*.
    - USB-to-serial device.
    - rtl8139: fix endianness on big endian targets
    - restore rw support for vvfat
    - x86-64: recompute DF after eflags has been modified when emulating
      SYSCALL
    - ignore reads to the EOI register
    - IDE: Improve DMA transfers by increasing the buffer size
    - Braille device support
    - Add -no-shutdown option (Closes: #326406)
    - Ask to use "mount -o remount" instead of "umount" and "mount"
      /dev/shm (Closes: #476539).
  * debian/qemu.doc-base: fix section.

 -- Aurelien Jarno <aurel32@debian.org>  Sun, 20 Apr 2008 23:29:42 +0200

qemu (0.9.1-3) unstable; urgency=low

  [ Aurelien Jarno ]
  * debian/patches/42_arm_tls.patch: fix to get qemu-system-arm working
    again. (Closes: #471722).
  * debian/patches/56_dhcp.patch: fix DHCP server to correctly support
    MS-Windows guests. (Closes: #471452).

 -- Aurelien Jarno <aurel32@debian.org>  Wed, 19 Mar 2008 18:58:29 +0100

qemu (0.9.1-2) unstable; urgency=low

  [ Aurelien Jarno ]
  * debian/patches/80_ui_curses.patch: pull new patch from upstream CVS
    (Closes: #442274).
  * debian/patches/65_kfreebsd.patch: link with -lfreebsd. (Closes:
    #465932).
  * debian/patches/81_mips32r2_fpu.patch: patch pulled from upstream
    to fix FPU issue on MIPS32R2.
  * debian/patches/42_arm_tls.patch: reenable, mistakenly disabled in the
    previous upload. (Closes: #469743).
  * debian/rules: fix parallel building. (Closes: #469981).
  * debian/patches/07_i386_exec_name.patch: install the i386 emulator as
    qemu-system-i386, and change qemu into a link pointing to the i386
    version.
  * debian/README.Debian: add notes about qemu-system-ppc and video.x
    (Closes: #388735).
  * debian/patches/70_manpage.patch: describe the -curses option.
    (Closes: #433658).
  * debian/patches/71_doc.patch: fix the monitor change option. (Closes:
    #467106).
  * debian/patches/35_syscall_sockaddr.patch: fix sockaddr (Closes:
    #469351).
  * debian/patches/43_arm_cpustate.patch: disable (Closes: #444171).

 -- Aurelien Jarno <aurel32@debian.org>  Mon, 17 Mar 2008 01:29:03 +0100

qemu (0.9.1-1) unstable; urgency=low

  [ Aurelien Jarno ]
  * New upstream version. (Closes: #459801)
    - Supports s390 host. (Closes: #441119)
    - Fix PCI bar allocation. (Closes: #413315)
    - Fix typo in keys name. (Closes: #426181)
    - Fix segfault of qemu-i386 (Closes: #446868).
    - debian/control: bump depends on openbios-sparc to
      >= 1.0~alpha2+20080106.
    - debian/patches/02_snapshot_use_tmpdir.patch: Refreshed.
    - debian/patches/04_do_not_print_rtc_freq_if_ok.patch: Likewise.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Likewise.
    - debian/patches/06_exit_segfault.patch: Likewise.
    - debian/patches/10_signal_jobs.patch: Likewise.
    - debian/patches/11_signal_sigaction.patch: Likewise.
    - debian/patches/12_signal_powerpc_support.patch: Likewise.
    - debian/patches/21_net_soopts.patch: Likewise.
    - debian/patches/30_syscall_ipc.patch: Likewise.
    - debian/patches/31_syscalls.patch: Likewise.
    - debian/patches/32_syscall_sysctl.patch: Likewise.
    - debian/patches/33_syscall_ppc_clone.patch: Likewise.
    - debian/patches/35_syscall_sockaddr.patch: Likewise.
    - debian/patches/41_arm_fpa_sigfpe.patch: Likewise.
    - debian/patches/42_arm_tls.patch: Likewise.
    - debian/patches/50_linuxbios_isa_bios_ram.patch: Likewise
    - debian/patches/51_linuxbios_piix_ram_size.patch: Likewise
    - debian/patches/61_safe_64bit_int.patch: Removed, merged upstream.
    - debian/patches/63_sparc_build.patch: Refreshed.
    - debian/patches/80_ui_curses.patch: Likewise.
  * debian/patches/90_security.patch: fix 64-bit overflow. (Closes:
    #425634)
  * debian/qemu-make-debian-root: add a -s option to create sparse
    image. (Closes: #322325)
  * debian/control: bump depends on bochsbios to >= 2.3.5-1. Use
    BIOS-qemu-latest instead of BIOS-bochs-latest. (Closes: #402289,
    #442822)
  * debian/rules: build the non-dyngen part with default gcc.
  * debian/rules: support DEB_BUILD_OPTIONS="parallel=n".
  * debian/patches/70_manpage.patch: describe the arguments of the
    -usbdevice option in the manpage. (Closes: #443801)
  * debian/control: now using Standards-Version 3.7.3 (no changes needed).
  * debian/control: build-depends on libgnutls-dev to enable TLS support
    in VNC.
  * debian/patches/01_nostrip.patch: don't strip binaries during make
    install. (Closes: #437866)
  * debian/patches/53_openbios_size.patch: increase maximum prom size to
    support latest openbios.

 -- Aurelien Jarno <aurel32@debian.org>  Mon, 28 Jan 2008 21:24:14 +0100

qemu (0.9.0+20070816-1) unstable; urgency=low

  [ Guillem Jover ]
  * New upstream snapshot.
    - Fix hang on ARM during Etch installation. (Closes: #430164)
    - Fix data corruption with qcow 2. (Closes: #440296)
    - Fix errors with raw images > 4 GiB. (Closes: #425634)
    - debian/patches/01_typo_qemu-img.patch: Removed, merged upstream.
    - debian/patches/03_machines_list_no_error.patch: Likewise.
    - debian/patches/36_syscall_prctl.patch: Likewise.
    - debian/patches/37_syscall_mount.patch: Likewise.
    - debian/patches/38_syscall_semctl.patch: Likewise.
    - debian/patches/40_sparc_fp_to_int.patch: Likewise.
    - debian/patches/44_arm_eabi_built_on_64bit_arches.patch: Likewise.
    - debian/patches/62_linux_boot_nasm.patch: Likewise.
    - debian/patches/04_do_not_print_rtc_freq_if_ok.patch: Synced.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Likewise.
    - debian/patches/31_syscalls.patch: Likewise.
    - debian/patches/35_syscall_sockaddr.patch: Likewise.
    - debian/patches/42_arm_tls.patch: Likewise.
    - debian/patches/43_arm_cpustate.patch: Likewise.
    - debian/patches/51_linuxbios_piix_ram_size.patch: Likewise.
    - debian/patches/55_unmux_socketcall.patch: Likewise.
    - debian/patches/60_ppc_ld.patch: Likewise.
    - debian/patches/65_kfreebsd.patch: Likewise.
    - debian/patches/80_ui_curses.patch: Likewise.
    - debian/patches/90_security.patch: Likewise.
  * Remove Elrond and Guilherme de S. Pastore from Uploaders, with their
    permission, and add Aurelien Jarno and Riku Voipio.
  * Remove Tag field, this is better maintained outside of the package.
  * Add openbios-sparc64 to qemu_bios_files in debian/rules.

  [ Aurelien Jarno ]
  * Fix FTBFS on amd64. (Closes: #434296)
    - Drop debian/patches/34_syscalls_types.patch
  * debian/control:
    - Suggest samba. (Closes: #430368)
  * Add OpenBIOS for sparc. (Closes: #407076)
    - debian/control: depends on openbios-sparc.
    - debian/links: provide symlinks in /usr/share/qemu.

 -- Guillem Jover <guillem@debian.org>  Tue, 04 Sep 2007 04:04:47 +0300

qemu (0.9.0-2) unstable; urgency=high

  [ Guillem Jover ]
  * Fix several security issues. (Closes: #424070)
    Thanks to Tavis Ormandy <taviso@google.com>.
    - Cirrus LGD-54XX "bitblt" heap overflow. CVE-2007-1320
    - NE2000 "mtu" heap overflow.
    - QEMU "net socket" heap overflow.
    - QEMU NE2000 "receive" integer signedness error. CVE-2007-1321
    - Infinite loop in the emulated SB16 device.
    - Unprivileged "aam" instruction does not correctly handle the
      undocumented divisor operand. CVE-2007-1322
    - Unprivileged "icebp" instruction will halt emulation. CVE-2007-1322
    - debian/patches/90_security.patch: New file.
  * Enable adlib audio emulation. (Closes: #419170)
  * Fix structure padding for target_eabi_flock64 when built for a 64 bit
    architecture. (Closes: #414799)
    Thanks to Stuart Anderson <anderson@netsweng.com>.
    - debian/patches/44_arm_eabi_built_on_64bit_arches.patch: New file.
  * Fix qemu to be able to use LinuxBios. (Closes: #412212)
    Thanks to Ed Swierk <eswierk@cs.stanford.edu>.
    - debian/patches/50_linuxbios_isa_bios_ram.patch: New file.
    - 51_linuxbios_piix_ram_size.patch: Likewise.
  * Fix segfault when booting a Linux kernel w/o a disk image, by exiting but
    clarifying the message, as to use '/dev/null'. (Closes: #409817, #411780)
    Thanks to Robert Millan <rmh@aybabtu.com>.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Updated.
  * Fix segfault by using addrlen instead of target_addrlen in
    do_getpeername()/do_getsockname(). (Closes: #411910)
    Thanks to Stuart Anderson <anderson@netsweng.com>.
    - debian/patches/35_syscall_sockaddr.patch: Updated.
  * Fix semctl() for 32 bit targets on 64 bit hosts. (Closes: #414809)
    Thanks to Stuart Anderson <anderson@netsweng.com>.
    - debian/patches/38_syscall_semctl.patch: New file.
  * Remove Elrond from Uploaders with consent, always welcome to join
    back anytime.

 -- Guillem Jover <guillem@debian.org>  Wed, 16 May 2007 08:08:31 +0300

qemu (0.9.0-1) experimental; urgency=low

  [ Guillem Jover ]
  * New upstream release. (Closes: #409989)
    - Support for relative paths in backing files for disk images.
      (Closes: #390446)
    - debian/patches/01_doc_typos.patch: Removed, merged upstream.
    - debian/patches/38_syscall_arm_statfs64.patch: Likewise.
    - debian/patches/51_serial_small_divider.patch: Likewise.
    - debian/patches/67_ppc_ftbfs.patch: Likewise.
    - debian/patches/21_net_soopts.patch: Synced.
    - debian/patches/30_syscall_ipc.patch: Likewise.
    - debian/patches/31_syscalls.patch: Likewise.
    - debian/patches/35_syscall_sockaddr.patch: Likewise.
    - debian/patches/39_syscall_fadvise64.patch: Likewise.
    - debian/patches/42_arm_tls.patch: Likewise.
    - debian/patches/55_unmux_socketcall.patch: Likewise.
    - debian/patches/80_ui_curses.patch: Likewise.
  * Update the copyright information.
  * The ACPI initialization code has been moved to bochsbios.
    - debian/patches/acpi-dsdt.hex: Removed.
    - debian/rules: Do not install acpi-dsdt.hex.
  * Add more files to the list of roms removed from the tarball needed to
    be touched so that upstream 'make install' does not fail.
  * Added armeb and armel to Architecture fields and libgpmg1-dev
    Build-Depends.
  * Recommend vde2 instead of the transitional vde package. (Closes: #407251)
  * Fix typo in qemu-img output. (Closes: #408542)
    - debian/patches/01_typo_qemu-img.patch: New file.
    Thanks to Adam Buchbinder <adam.buchbinder@gmail.com>.
  * Symlink qemu-user(1) to qemu-m68k(1).
  * Reduce redundancy in qemu-user(1) synopsis.
  * Fix rounding in sparc floating point to integer conversions.
    - debian/patches/40_sparc_fp_to_int.patch: New file.
    Thanks to Aurelien Jarno <aurelien@aurel32.net>.

 -- Guillem Jover <guillem@debian.org>  Thu,  8 Feb 2007 01:01:29 +0200

qemu (0.8.2-5) unstable; urgency=low

  [ Guillem Jover ]
  * Added a missing part to the ARM NPTL support patch, initially lost.
    - debian/patches/42_arm_tls.patch: Updated.

 -- Guillem Jover <guillem@debian.org>  Tue, 16 Jan 2007 11:44:00 +0200

qemu (0.8.2-4) unstable; urgency=medium

  [ Guillem Jover ]
  * Disable using iasl for now until it's ported to big-endian systems and
    include a locally built acpi-dsdt.hex file.

 -- Guillem Jover <guillem@debian.org>  Sun,  3 Dec 2006 21:10:23 +0200

qemu (0.8.2-3) unstable; urgency=low

  [ Guillem Jover ]
  * Hopefully really fix powerpc FTBFS.

 -- Guillem Jover <guillem@debian.org>  Sun,  5 Nov 2006 17:09:53 +0200

qemu (0.8.2-2) unstable; urgency=low

  [ Guillem Jover ]
  * Update Tag field to match new debtags vocabulary.
  * Clean properly. (Closes: #390166)
    - Remove the acpi generated files and the docs.
    - Revert the docs regeneration forcing logic.
    Thanks to Anderson Lizardo <anderson.lizardo@gmail.com>.
  * On install use DESTDIR instead of specifying all paths. (Closes: #396139)
    Thanks to Anderson Lizardo <anderson.lizardo@gmail.com>.
  * Port to GNU/kFreeBSD. (Closes: #327622)
    - Disable ALSA on non-linux systems.
    - Add a Build-Depends on libfreebsd-dev on kfreebsd systems.
    - Add kfreebsd-i386 and kfreebsd-amd64 to the Architecture field.
    - debian/patches/65_kfreebsd.patch: New file.
    Thanks Petr Salinger <Petr.Salinger@seznam.cz>.
  * In qemu-make-debian-root do not explicitely install in aptitude and
    libsigc++-1.2-5c102, they are pulled now by default. And do not remove
    aptitude afterwards. (Closes: #392481)
    Thanks to Ted Percival <ted@midg3t.net>.
  * Add experimental ncurses ui support. (Closes: #369462)
    - debian/patches/80_ui_curses.patch: New file.
    Thanks to Andrzej Zaborowski <balrog@zabor.org>.
  * Add SO_PEERCRED and SO_SNDTIMEO support, and fix accept syscall when
    being passed NULL pointers.
    - debian/patches/21_net_sockopts.patch: Renamed to ...
    - debian/patches/21_net_soopts.patch: ... here. Modify.
    Thanks to Pablo Virolainen.
  * Add a fadvise64 syscall stub.
    - debian/patches/39_syscall_fadvise64.patch: New file.
    Thanks to Pablo Virolainen.
  * Add EABI unmuxed socket syscalls.
    - debian/patches/55_unmux_socketcall.patch: New file.
    Thanks to Riku Voipio.
  * Add TLS sections to the ARM and x86 linker scripts so that qemu user
    emulators can be linked statically.
    - debian/patches/66_tls_ld.patch: New file.
  * Move the documentation of the binary blob removals from the original
    upstream tarball from README.Debian to debian/copyright.
  * Reword the emphasis on "FAST!" from the package description.
  * Fix FTBFS on powerpc by adding the missing fp_status variable to the
    int32_to_float32 function calls.
    - debian/patches/67_ppc_ftbfs.patch: New file.

 -- Guillem Jover <guillem@debian.org>  Sun,  5 Nov 2006 08:48:27 +0200

qemu (0.8.2-1) unstable; urgency=low

  [ Guillem Jover ]
  * New upstream release. (Closes: #379461, #385029, #388810)
    - Add ACPI BIOS emulation support. (Closes: #372533)
    - Fix mouse invisible wall when using Windows XP. (Closes: #384666)
    - debian/patches/01_doc_typos.patch: Sync.
    - debian/patches/03_machines_list_no_error.patch: Likewise.
    - debian/patches/04_do_not_print_rtc_freq_if_ok.patch: Likewise.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Likewise.
    - debian/patches/06_exit_segfault.patch: Likewise.
    - debian/patches/12_signal_powerpc_support.patch: Likewise.
    - debian/patches/21_net_sockopt.patch: Likewise.
    - debian/patches/22_net_tuntap_stall.patch: Likewise.
    - debian/patches/30_syscall_ipc.patch: Likewise.
    - debian/patches/31_syscalls.patch: Likewise.
    - debian/patches/32_syscall_sysctl.patch: Likewise.
    - debian/patches/33_syscall_ppc_clone.patch: Likewise.
    - debian/patches/35_syscall_sockaddr.patch: Likewise.
    - debian/patches/36_syscall_prctl.patch: Likewise.
    - debian/patches/37_syscall_mount.patch: Likewise.
    - debian/patches/41_arm_fpa_sigfpe.patch: Likewise.
    - debian/patches/42_arm_tls.patch: Likewise.
    - debian/patches/61_safe_64bit_int.patch: Likewise.
    - debian/patches/63_sparc_build.patch: Likewise.
    - debian/patches/50_missing_keycodes.patch: Removed, integrated upstream.
  * Switch to quilt:
    - debian/control: Add quilt (>= 0.40) to Build-Depends.
    - debian/patches/series: New file.
    - debian/patch.mk: Removed.
    - debian/rules: Include '/usr/share/quilt/quilt.make' instead of
      'debian/patch.mk'.
  * Build the ACPI Source Language files with iasl.
  * Add a Tag field to the binary package, using data from debtags.
  * Add 2006 to the debian/copyright years.
  * Add a Recommends on vde. (Closes: #386780)
  * Fix spelling error in package description (peripherials -> peripherals).
    (Closes: #388700)
    Thanks to Rakesh 'arky' Ambati <rakesh_ambati@yahoo.com>.
  * Fix ne2000_can_receive return code to 0 when the command is STOP.
    (Closes: #386209)
    - debian/patches/52_ne2000_return.patch: New file.
    Thanks to Samuel Thibault <samuel.thibault@ens-lyon.org>.
  * Document the binary blob removals from the original upstream tarball in
    README.Debian. (Closes: #388740)

 -- Guillem Jover <guillem@debian.org>  Mon, 25 Sep 2006 04:16:25 +0300

qemu (0.8.1-1) unstable; urgency=low

  [ Guillem Jover ]
  * New upstream release. (Closes: #366955, #366637)
    - debian/patches/01_doc_typos.patch: Sync.
    - debian/patches/04_do_not_print_rtc_freq_if_ok.patch: Likewise.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Likewise.
    - debian/patches/12_signal_powerpc_support.patch: Likewise.
    - debian/patches/21_net_sockopt.patch: Likewise.
    - debian/patches/22_net_tuntap_stall.patch: Likewise.
    - debian/patches/30_syscall_ipc.patch: Likewise.
    - debian/patches/31_syscalls.patch: Likewise.
    - debian/patches/32_syscall_sysctl.patch: Likewise.
    - debian/patches/33_syscall_ppc_clone.patch: Likewise.
    - debian/patches/35_syscall_sockaddr.patch: Likewise.
    - debian/patches/36_syscall_prctl.patch: Likewise.
    - debian/patches/37_syscall_mount.patch: Likewise.
    - debian/patches/41_arm_fpa_sigfpe.patch: Likewise.
    - debian/patches/42_arm_tls.patch: Likewise.
    - debian/patches/43_arm_cpustate.patch: Likewise.
    - debian/patches/50_missing_keycodes.patch: Likewise.
    - debian/patches/51_serial_small_divider.patch: Likewise.
    - debian/patches/61_safe_64bit_int.patch: Likewise.
    - debian/patches/63_sparc_build.patch: Likewise.
    - debian/patches/40_arm_nwfpe_cpsr.patch: Removed, integrated upstream.
  * Make the patch system apply the patch on the first run.
    - debian/patches/64_ppc_asm_constraints.patch: Add DPATCHLEVEL.
  * Document how to use the images created with qemu-make-debian-root in the
    man page. Thanks to Jacobo <jacobo221@hotmail.com>. (Closes: #343450)
  * Add support for the -snapshot option to use the TMPDIR evironment
    variable. (Closes: #353880)
    - debian/patches/02_snapshot_use_tmpdir.patch: New file.
  * Do not exit with an error when using '-M ?'. (Closes: #365209)
    - debian/patches/03_machines_list_no_error.patch: New file.
  * Added symlink for system-mipsel emulator man page.
  * Build and clean the pc-bios directory.
  * Avoid segfaulting by using _exit(2) instead of exit(3) in qemu user
    emulators. (Closes: #338289)
    - debian/patches/06_exit_segfault.patch: New file.
  * Enable ALSA audio support and add libasound2-dev to the Build-Depends.
  * Now using Standards-Version 3.7.2 (no changes needed).

 -- Guillem Jover <guillem@debian.org>  Sun, 28 May 2006 20:51:10 +0300

qemu (0.8.0-3) unstable; urgency=low

  [ Josh Triplett ]
  * Fix FTBFS on PowerPC caused by asm constraint problem. (Closes: #361727)
    - debian/patches/64_ppc_asm_constraints.patch.

  [ Guillem Jover ]
  * Clamp addrlen from host to target when using AF_UNIX. This fixes
    socket problems when using EABI.
    - debian/patches/35_syscall_sockaddr.patch: New file.
  * Fix floating point comparison on ARM NWFPE, due to glue code missmatch.
    (Closes: #356287)
    - debian/patches/40_arm_nwfpe_cpsr.patch: New file.
    - debian/patches/40_fpu_arm_sigfpe.patch: Rename to ...
    - debian/patches/41_arm_fpa_sigfpe.patch: ... this. Resync.
    Thanks to Ulrich Hecht.
  * Fix POSIX threads creation on ARM hanging when initializing the cpu
    structure being it cyclic.
    - debian/patches/43_arm_cpustate.patch: New file.
  * Add TLS support for ARM. Stolen from Scratchbox.
    - debian/patches/42_arm_tls.patch: New file.
  * Fix sysctl endian problem.
    - debian/patches/32_syscall_sysctl.patch: Update.
    Thanks to Timo Savola <tsavola@movial.fi>.
  * Remove now default '--enable-slirp' build option. (Closes: #356284)
    Thanks to Anderson Lizardo <anderson.lizardo@gmail.com>.
  * Remove unused sharedir to 'make install'. (Closes: #356418)
    Thanks to Anderson Lizardo <anderson.lizardo@gmail.com>.
  * Fix package not cleaning properly. (Closes: #356279)
    Thanks to Anderson Lizardo <anderson.lizardo@gmail.com> for the initial
    patch.
  * Add needed syscalls to make debootstrap work. (Closes: #356291)
    - debian/patches/36_syscall_prctl.patch: New file.
    - debian/patches/37_syscall_mount.patch: Likewise.
    - debian/patches/38_syscall_arm_statfs64.patch: Likewise.
    Thanks to Anderson Lizardo <anderson.lizardo@gmail.com>.
  * Remove obsolete Build-Dependency xlibs-dev.

 -- Guillem Jover <guillem@debian.org>  Thu, 13 Apr 2006 11:53:00 +0300

qemu (0.8.0-2) unstable; urgency=low

  [ Guillem Jover ]
  * Switch away from cdbs to plain debhelper.
  * Upgrade to debhelper compat level 5.
  * Allow overriding CC compiler variable. (Closes: #345772)
  * Do not redefine 64 bit types on 64 bit arches.
    - debian/patches/61_safe_64bit_int.patch: New file.
  * Allow linux_boot.bin to be built on any arch by switching to nasm,
    and Build-Depending on it.
    - debian/patches/62_linux_boot_nasm.patch: New file.
  * The serial hw driver uses a small divider that gets zeroed when shifting
    bits to the right. (Closes: #276276, #348098)
    - debian/patches/51_serial_small_divider.patch: New file.
    Thanks to Samuel Thibault <samuel.thibault@ens-lyon.org>.
  * Escaped hyphens in qemu-user manpage, use italics for filenames and
    parameters and bold for options.
  * Partial build failure fix for Sparc. (Bugs: #317145, #336970)
    Thanks to Jurij Smakov <jurij@wooyd.org>.

 -- Guillem Jover <guillem@debian.org>  Mon, 20 Feb 2006 09:17:46 +0200

qemu (0.8.0-1) unstable; urgency=low

  [ Guillem Jover ]
  * New upstream release. (Closes: #344339)
    - Added support for Virtual FAT. (Closes: #313123)
    - Emulate repeated keystrokes when holding a key. (Closes: #298864)
    - debian/patches/01_doc_typos.patch: Sync.
    - debian/patches/04_do_not_print_rtc_freq_if_ok.patch: Likewise.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Likewise.
    - debian/patches/12_signal_powerpc_support.patch: Likewise.
    - debian/patches/21_net_sockopt.patch: Likewise.
    - debian/patches/22_net_tuntap_stall.patch: Likewise.
    - debian/patches/30_syscall_ipc.patch: Likewise.
    - debian/patches/31_syscalls.patch: Likewise.
    - debian/patches/32_syscall_sysctl.patch: Likewise.
    - debian/patches/33_syscall_ppc_clone.patch: Likewise.
    - debian/patches/40_fpu_arm_sigfpe.patch: Likewise.
    - debian/patches/50_missing_keycodes.patch: Likewise.
  * Added mips and mipsel to the lintian overrides for the user emulators
    being shlib-with-non-pic-code.
  * Added symlinks for mips, mipsel and system-arm emulator manpages.

 -- Guillem Jover <guillem@debian.org>  Fri, 30 Dec 2005 05:44:53 +0200

qemu (0.7.2-2) unstable; urgency=low

  [ Josh Triplett ]
  * Add support for signal handling on PowerPC. (Closes: #335509)
    - debian/patches/12_signal_powerpc_support.patch: New file.

  [ Guillem Jover ]
  * Add Josh Triplett <josh@psas.pdx.edu> to Uploaders and packaging team.
  * Fix PowerPC build failure by reintroducing the ppc linker script and
    adding the missing _SDA_BASE_ and _SDA2_BASE_ symbols. (Closes: #336983)
  * Remove invalid patch making X11 fail at runtime.
    - debian/patches/20_net_socket.patch: Remove.
    - debian/patches/32_syscall_sysctl.patch: Sync.
    Thanks to Daniel Gimpelevich <daniel@gimpelevich.san-francisco.ca.us>.
  * Avoid the patch system to try until it applies.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Added patch level.
    - debian/patches/12_signal_powerpc_support.patch: Likewise.

 -- Guillem Jover <guillem@debian.org>  Wed, 21 Dec 2005 22:11:34 +0200

qemu (0.7.2-1) unstable; urgency=low

  [ Guillem Jover ]
  * New upstream release. (Closes: #321232, #327168)
    - debian/patches/12_signal_silent.patch: Integrated upstream, remove.
    - debian/patches/50_ppc_ldscript.patch: Likewise.
    - debian/patches/33_syscall_truncate64.patch: Likewise.
    - debian/patches/01_doc_typos.patch: Resync with upstream.
    - debian/patches/04_do_not_print_rtc_freq_if_ok.patch: Likewise.
    - debian/patches/05_non-fatal_if_linux_hd_missing.patch: Likewise.
    - debian/patches/10_signal_jobs.patch: Likewise.
    - debian/patches/11_signal_sigaction.patch: Likewise.
    - debian/patches/20_net_socket.patch: Likewise.
    - debian/patches/21_net_sockopt.patch: Likewise.
    - debian/patches/22_net_tuntap_stall.patch: Likewise.
    - debian/patches/30_syscall_ipc.patch: Likewise.
    - debian/patches/31_syscalls.patch: Likewise.
    - debian/patches/32_syscall_sysctl.patch: Likewise.
    - debian/patches/40_fpu_arm_sigfpe.patch: Likewise.
  * Repackaged upstream source to deal with binaries w/o sources.
    - pc-bios/video.x: New file removed.
  * Create a new qemu-user(1) manpage and link all user emulator manpages
    to it. (Closes: #335163)
  * Add missing '-' and '=' keycodes for sendkey command.
    - debian/patches/50_missing_keycodes.patch: New file. (Closes: #334071)
    Thanks to Robert Millan <rmh@aybabtu.com>.
  * Add manpage link for qemu-system-mips.
  * Make sysctl byte-swap the name values.
    - debian/patches/32_syscall_sysctl.patch: Merge patch. (Closes: #334458)
    Thanks to Josh Triplett <josh@psas.pdx.edu>.
  * Change documentation menu section to "Apps/Emulators". (Closes: #335062)
    Thanks to Frans Pop <aragorn@tiscali.nl>.
  * On PowerPC, do not zero registers r7-r31 in do_fork and zero register r3.
    Fixing segfaults on programs using the clone syscall.
    - debian/patches/33_syscall_ppc_clone.patch: New file. (Closes: #335159)
    Thanks to Josh Triplett <josh@psas.pdx.edu>
    and Paul Brook <paul@codesourcery.com>.
  * Tighten vgabios and bochsbios versioned Depends.
  * Add video.x to the list of roms to touch to make qemu Makefile happy.
  * Add lintian overrides for the user emulators being shlib-with-non-pic-code.
  * Wrap lines in debian/control fields (knowingly breaking policy).

  [ Guilherme de S. Pastore ]
  * debian/control:
    - Updated my e-mail address.
  * debian/copyright:
    - Dropped André from team members list, not a single contribution ever.

 -- Guillem Jover <guillem@debian.org>  Mon, 31 Oct 2005 05:01:45 +0200

qemu (0.7.0-4) unstable; urgency=low

  [ Guillem Jover ]
  * Rebuild source with locally deborked dpkg-source. (Closes: #321019)
  * Added the location of the Subversion repo used for the packages and
    fixed the upstream URL in debian/copyright.
  * Lower case title header in qemu-make-debian-root man page.
  * Use dd instead of cat to generate the qemu debian root image.
    (Closes: #315952)

 -- Guillem Jover <guillem@debian.org>  Wed,  3 Aug 2005 05:53:30 +0300

qemu (0.7.0-3) unstable; urgency=low

  [ Guillem Jover ]
  * Update watch file to version 3, use perlre and new upstream site.
  * Now using Standards-Version 3.6.2 (no changes needed).
  * Fix TUN/TAP network interface stalling the connection. (Closes: #290569)
    Thanks to Vitaly Belostotsky <byly.useless@tochka.ru>.
  * Link against librt, needed by the new clock_gettime syscall.
    - debian/patches/31_syscalls.patch: Update. (Closes: #315388)
    Thanks to Timo Savola <tsavola@movial.fi> for noticing.
  * Force Build-Dependency on binutils >= 2.16-1 needed by the amd64 and
    powerpc linker scripts. (Closes: #262655)
  * Force usage of gcc-3.4. (Closes: #319527)
  * Add missing Build-Dependency on zlib1g-dev.
    Thanks to Reinhard Tartler <siretart@tauware.de>.
  * Include <linux/types.h> in syscall.c to avoid the broken headers in
    linux-kernel-headers 2.6.12.
    - debian/patches/34_syscalls_types.patch: New file.
    Thanks to Octavian Cerna <tavy@ylabs.com>.
  * Fix powerpc linker script.
    - debian/patches/50_ppc_ldscript.patch: New file.
    Thanks to Octavian Cerna <tavy@ylabs.com>.

 -- Guillem Jover <guillem@debian.org>  Mon,  1 Aug 2005 02:48:09 +0300

qemu (0.7.0-2) unstable; urgency=low

  [ Guillem Jover ]
  * Add alpha, sparc, arm and s390 to Architectures (and to the
    libgpmg1-dev Build-Depends).

  * Forward SIGSTOP and SIGCONT sent to QEMU to the emulated application.
    - debian/patches/10_signal_jobs.patch: New file.
    Thanks to Ulrich Hecht.
  * Return EINVAL on emulated sigaction when given invalid signal
    parameters SIGKILL and SIGSTOP.
    - debian/patches/11_signal_sigaction.patch: New fle.
    Thanks to Valtteri Rahkonen.
  * Do not print messsages for uncaught signal, thus fixing the case
    were some applications want to kill their siblings.
    - debian/patches/12_signal_silent.patch: New file.
    Thanks to Valtteri Rahkonen

  * Fix Unix sockets by handling correctly AF_UNIX socket address
    structure length.
    - debian/patches/20_net_socket.patch: New file.
    Thanks to Timo Savola.
  * Implement SO_LINGER, SO_RCVTIMEO, SO_SNDTIMEO, SO_PEERNAME and
    SO_PEERCRED getsockoptions.
    - debian/patches/21_net_sockopt.patch: New file.
    Thanks to Valtteri Rahkonen.

  * Implement SysV IPC message and semaphore syscalls.
    - debian/patches/30_syscall_ipc.patch: New file.
    Thanks to Valtteri Rahkonen.
  * Implement acct, umount2, uselib, swapon, syslog, ftruncate64,
    mincore, madvise, readahead and clock_gettime syscalls.
    - debian/patches/31_syscalls.patch: New file.
    Thanks to Ulrich Hecht.
  * Implement sysctl CTL_KERN/KERN_VERSION
    - debian/patches/32_syscall_sysctl.patch: New file.
    Thanks to Timo Savola.
  * Implement truncate64 syscall.
    - debian/patches/33_syscall_truncate64.patch: New file.
    Thanks to Valtteri Rahkonen.

  * Implement ARM floating point exeption emulation.
    - debian/patches/40_fpu_arm_sigfpe.patch: New file.
    Thanks to Ulrich Hecht.

 -- Guillem Jover <guillem@debian.org>  Sun, 19 Jun 2005 15:05:37 +0300

qemu (0.7.0-1) experimental; urgency=low

  [ Guillem Jover ]
  * New upstream release. (Closes: #308459, #308494)
  * Do not require a disk image when booting a Linux kernel. (Closes: #260935)
    Thanks to Jonas Smedegaard <dr@jones.dk>.

  [ Guilherme de S. Pastore ]
  * Rewrote README.Debian for more clarity
  * Add support for amd64 as a host architecture. (Closes: #262655)
    - Add build-depend on libgpmg1-dev on amd64.
  * Fixed qemu-make-debian-root so that it shows the name by which
    it was called on the usage notice, not "%s". (Closes: #303507)
    Thanks to Micah Anderson <micah@riseup.net>.

  [ Elrond ]
  * Clean up more files, so they don't end up in the final .diff.gz
  * Switch to external proll and openhackware:
    - Instead of patching qemu's Makefile, trick it by giving it empty
      files to install and remove them straight after install.
    - Don't ship the roms in debian/roms any more!
    - Instead add more symlinks.
    - Update Depends: apropiately.

 -- Guillem Jover <guillem@debian.org>  Fri, 27 May 2005 02:06:20 +0300

qemu (0.6.1+20050407-1) unstable; urgency=low

  [ Guillem Jover ]
  * New upstream snapshot.
    - Fix -user-net. (Closes: #295019)
    - Fix win2k and winxp image booting. (Closes: #285170, #292707)
    - Fix installation of outdated documentation. (Closes: #286931)
    - Provide qemu-img instead of qemu-mkcow. (Closes: #290713)
    - Remove debian/patches/05_fix_openpic_timer_test.patch, integrated
      upstream.
    - Remove debian/patches/02_selectable_sdl_keyboard.patch, superseded
      by new keyboard implementation. (Closes: #284510, #299432)
    - Remove debian/patches/01_mkcow_section_and_hyphens.patch.
    - Conditionalize qemu -g option for some architectures. (Closes: #298988)
  * Added new copyright year to debian/copyright.
  * Added initial qemu-make-debian-root man page. (Closes: #286932)
  * Fixed typos in qemu documentation. (Closes: #301933)
    Thanks to A Costa <agcosta@gis.net>.
  * Added Elrond <elrond@samba-tng.org> to Uploaders and packaging team.
  * Use the default target list:
    - Do not build qemu-fast anymore as it is deprecated upstream anyway.
    (Closes: #278602, #281510)
    - New targets armeb and system-x86_64.
  * Updated ROM images under debian/roms/:
    - OpenHackWare 0.4.
    - Proll 18 with qemu specific patches.
  * Remove uudecoded files from pc-bios/ on clean.
  * Fix qemu-make-debian-root to behave correctly even if the needed
    Recommends are not installed.

  [ Guilherme de S. Pastore ]
  * Create a doc-base entry for the package (Closes: #290669)
  * debian/control:
    - Add debootstrap to the 'Recommends: ' line, as needed by
      qemu-make-debian-root (Closes: #302848)
    - Moved sharutils from dependency to recommendation, as it is only
      needed by qemu-make-debian-root
  * debian/docs:
    - Do not include README.distrib in the binary package (Closes: #302853)

  [ Elrond ]
  * Replace "libgpmg1-dev | not+linux-gnu" by "libgpmg1-dev [i386 powerpc]"
    in Build-Depends. qemu should not need to build-depend on it anyway, the
    real problem is described in Bug#267174. When it is solved, we can
    remove our dependency. Until then please remember to add any arch, which
    we will build on and that has gpm. This change hopefully calms:
    <http://qa.debian.org/debcheck.php?dist=unstable&package=qemu>
  * Add versions to the dependencies on bochsbios and vgabios
    (Closes: #288997):
    - vgabios: Use the current version from testing/unstable (0.4c+20041014-1),
      according to Frans Pop <aragorn@tiscali.nl>, this fixed those
      "blank screen" problems.
    - bochsbios: Use the current version from unstable (2.1.1+20041109-3), as
      Guillem Jover fixed the networking in that version.

 -- Guillem Jover <guillem@debian.org>  Thu,  7 Apr 2005 01:26:01 +0300

qemu (0.6.1-1) unstable; urgency=low

  [ Guillem Jover ]
  * New upstream release. (Closes: #281626)
    - Booting from drive b is not supported anymore. (Closes: #275679)
    - Fix ne2k network interface that was not working in some situations.
      (Closes: #281862)
    - Remove debian/patches/06_build_gcc3.4.patch, fixed upstream.
    - Remove debian/patches/04_lfs.patch, fixed upstream.
    - Remove debian/patches/02_fix_powerpc_FTBFS.patch, fixed upstream.
    - Remove debian/patches/00_escape_manpage_hyphens.patch, not needed.
    - Sync debian/patches/03_use_external_bios.patch.
  * Include uuencoded source for proll 18, some build fixes and its binary
    proll.bin on debian/roms/.
  * Suggests sudo to be used by the qemu-ifup script.
    Thanks to Elrond <elrond@samba-tng.org>.
  * Make sudo in qemu-ifup explain what the password is for. (Closes: #281380)
  * Add an option to select the method to convert keyevent to keycode
    in the SDL keyboard handling code. Added support for Right Shift in the
    generic handler. (Closes: #282658)
    Thanks to Elrond <elrond@samba-tng.org>.
  * Do not set RTC frequency to 1024 or warn about this if it has already
    the correct value. (Closes: #281403)
  * Enabled sparc-softmmu support.

 -- Guillem Jover <guillem@debian.org>  Sat, 27 Nov 2004 23:23:49 +0100

qemu (0.6.0.dfsg.2-1) unstable; urgency=low

  [ Guillem Jover ]
  * Repackaged upstream source to remove external included files.
    - pc-bios/ppc-rom.bin: Removed.
    - pc-bios/OpenHackWare_0.3.tar.bz2: Likewise.
    - pc-bios/vgabios.bin: Likewise.
    - pc-bios/vgabios-cirrus.bin: Likewise.
    - pc-bios/vgabios-cvs-2004-06-17.tgz: Likewise.
  * Include uuencoded source for OpenHackWare 0.3.1 and its binary
    ppc-rom.bin on debian/roms/. Add a Build-Depends on sharutils.
  * Update tundev.c. Pass -tun-dev to qemu without the equal sign.
    Thanks to Isaac Clerencia <isaac@sindominio.net>.
  * Fix README.Debian to point to the renamed qemu-make-debian-root.
  * Add Depends on sharutils needed by qemu-make-debian-root.
    (Closes: #272130)
  * Use and depend on vgabios package, which is in sync with bochsbios
    that checks for rom bios checksums. (Closes: #281202)
  * Enable LFS globally, thus fixing problems with qemu-mkcow when using
    an existing large image.
    (Closes: #279925)
  * Fix openpic timer write test, catched from a warning about a constant
    value larger than the type it was casted to.
  * Fix build failure with gcc 3.4. Patch stolen from Gentoo BTS.

 -- Guillem Jover <guillem@debian.org>  Mon, 15 Nov 2004 10:46:54 +0100

qemu (0.6.0.dfsg.1-1) unstable; urgency=high

  [ Guillem Jover ]
  * Repackaged upstream source to deal with binaries w/o sources.
    (Closes: #268780)
    - pc-bios/bios.bin: Removed binary without source. Now using
      bochsbios package.
    - pc-bios/vgabios.bin: Rebuilt from vgabios cvs 2004-06-17 snapshot,
      source included.
    - pc-bios/vgabios-cirrus.bin: Likewise.
    - pc-bios/ppc-rom.bin: Rebuilt on voltaire, source included.
    - pc-bios/linux_boot.bin: Rebuilt from source.
  * Move make-debian-root.sh to /usr/sbin/qemu-make-debian-root.
    (Closes: #268705)

 -- Guillem Jover <guillem@debian.org>  Mon, 13 Sep 2004 01:28:54 +0200

qemu (0.6.0-2) unstable; urgency=high

  [ Guilherme de S. Pastore ]
  * Fixed dangling symlinks under /usr/share/man/man1. (Closes: #264764)

  [ Guillem Jover ]
  * Fix FTBFS on powerpc.
    - debian/patches/02_fix_powerpc_FTBFS.patch: New file.

 -- Guillem Jover <guillem@debian.org>  Wed, 18 Aug 2004 15:50:43 +0200

qemu (0.6.0-1) unstable; urgency=medium

  * New maintainers. (Closes: #258900)
  * New upstream release. (Closes: #258732)
    - Installs ppc BIOS ROM file. (Closes: #257492)
    - Builds with -fno-strict-aliasing. (Closes: #257123)

  [ Guilherme de S. Pastore ]
  * debian/rules:
    - Cleaned up.
    - Ported to use CDBS.
  * 00_escape_manpage_hyphens.patch:
    - Correct a little typo and escape hyphens in upstream manpage.
  * 01_mkcow_section_and_hyphens.patch:
    - Fix section mismatch and escape hyphens in the qemu-mkcow manpage.
  * Added simple /etc/qemu-ifup helper script. (Closes: #245281)
    Thanks to Martin Michlmayr <tbm@cyrius.com>.
  * Cleaned debian/watch.
  * UTF-8'ed debian/changelog.
  * Updated Standards-Version to 3.6.1.1.
  * Removed outdated and unnecessary debian/qemu-i386.sgml.
    - Removed build dependency on docbook-to-man.
  * Removed "x86" part from the description (hey, qemu is not x86-only
    in any way). Deserves a complete rewrite, shall be done soon.

  [ Guillem Jover ]
  * Lower-case package short description.
  * Added missing CPU emulations to the description.
  * Cleaned and updated debian/copyright.
  * Removed manually added libx11-6 dependency.
  * Only Build-Depends on libgpmg1-dev on GNU/Linux systems.
  * Cosmetic unification to debian/changelog.
  * debian/rules:
    - Remove generated files.
    - Give exec perms to qemu-ifup.

 -- Guillem Jover <guillem@debian.org>  Sun,  8 Aug 2004 17:24:08 +0200

qemu (0.5.5-2) unstable; urgency=low

  * Re-enable SDL disabled while I was bugchasing. (Closes: #255014)
  * Yes, this is really 0.5.5. (Closes: #254655)
  * Enable slirp networking. (Closes: #253573)
  * Add Build-Depends on libgpmg1-dev (found by Bastian Blank, probably breaks
    Hurd but that's a problem for another day).

 -- Paul Russell <prussell@debian.org>  Thu, 24 Jun 2004 06:26:42 +0200

qemu (0.5.5-1) unstable; urgency=low

  * New upstream release. (Closes: #237556, #237556)
  * Applied patch to add options to make_debian_root.sh. (Closes: #238787)
  * Applied patch for other archs: hmmm... (Closes: #251420)
  * Do umount -d in make_debian_root.sh. (Closes: #251775)

 -- Paul Russell <prussell@debian.org>  Tue,  1 Jun 2004 03:50:05 +0200

qemu (0.5.4-1) unstable; urgency=low

  * New upstream release. (Closes: #246634)
  * qemu-mkcow included in upstream.
  * Added tundev program source in doc, to see if people find it useful.

 -- Paul Russell <prussell@debian.org>  Mon,  3 May 2004 08:14:49 +0200

qemu (0.5.3-1) unstable; urgency=low

  * New upstream release. (Closes: #237556)
  * Use aalib-config --static-libs. (Closes: #243325)
  * Document Control-Shift to release mouse pointer. (Closes: #238074)

 -- Paul Russell <prussell@debian.org>  Tue, 13 Apr 2004 02:58:49 +0200

qemu (0.5.2-4) unstable; urgency=low

  * Fix PPC install (Michel Daenzer patch). (Closes: #238431)
  * Simplify deps (might be wrong, but it's neater). (Closes: #238430)

 -- Paul Russell <prussell@debian.org>  Wed, 17 Mar 2004 01:35:47 +0100

qemu (0.5.2-3) unstable; urgency=low

  * Make compile on woody. (Closes: #238163)
  * Include qemu-doc.html. (Closes: #238076)
  * Wrote qemu-i386 man page. (Closes: #238077)

 -- Paul Russell <prussell@debian.org>  Mon, 15 Mar 2004 23:56:25 +0100

qemu (0.5.2-2) unstable; urgency=low

  * Fix build problem so bios.bin etc. can be found. (Closes: #237553)

 -- Paul Russell <prussell@debian.org>  Fri, 12 Mar 2004 05:43:00 +0100

qemu (0.5.2-1) unstable; urgency=low

  * Initial Release. (Closes: #187407)

 -- Paul Russell <prussell@debian.org>  Wed,  3 Mar 2004 02:18:54 +0100
